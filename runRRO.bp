left_line = 1
right_line = 2
left_sensor = 3
right_sensor = 4
left_motor = "A"
right_motor = "B"
not_inverted_motor = "B"
motors = left_motor + right_motor
left_forward = -1
right_forward = 1
grabber_motor = "C"
water_motor = "D"
left_max = 49
left_min = 4
right_max = 46
right_min = 4

last_err = 0
last_motor_err = 0

Sensor.SetMode(left_line, 0)
Sensor.SetMode(right_line, 0)
Sensor.SetMode(right_sensor, 4)

If EV3.BatteryVoltage < 8 Then
  beep()
  Speaker.Wait()
  beep()
EndIf

Sub take_chem
  Motor.Start(grabber_motor, 100)
  Program.Delay(1500)
  Motor.Stop(grabber_motor, "True")
EndSub

Function movement_init(in number power)
  MotorA.StartPower(power * @left_forward)
  MotorB.StartPower(power * @right_forward)
EndFunction

Function line(in number l, in number r)
  If l = -100 Then
    l = (Sensor.ReadPercent(@left_line) - @left_min) / (@left_max - @left_min) * 100
  EndIf
  If r = -100 Then
    r = (Sensor.ReadPercent(@right_line) - @right_min) / (@right_max - @right_min) * 100
  EndIf
  err = r - l
  diff = err - @last_err
  delta = err * 0.3 + diff * 1
  left_power = 80 - delta
  right_power = 80 + delta
  MotorA.SetPower(left_power * @left_forward)
  MotorB.SetPower(right_power * @right_forward)
  @last_err = err
EndFunction

Function endless_line()
  'Motor.StartPower("AB", 80)
  MotorA.StartPower(80 * @left_forward)
  MotorB.StartPower(80 * @right_forward)
  While "True"
    line(-100, -100)
  EndWhile
EndFunction

Sub beep
  Speaker.Tone(100, 500, 200)
EndSub

Function delay(in number time)
  Program.Delay(time)
EndFunction

Function reset()
  MotorA.ResetCount()
  MotorB.ResetCount()
EndFunction

Function stop()
  'Motor.Stop(@motors, "True")
  MotorAB.OffAndBrake()
EndFunction

Function speedup(in number power, in number deg)
  movement_init(10)
  reset()
  l = MotorA.GetTacho() * @left_forward
  While l < deg
    p = l / deg
    power = (power - 10) * p + 10
    l = MotorA.GetTacho() * @left_forward
    r = MotorB.GetTacho() * @right_forward
    delta = (l - r) * p
    left_power = power - delta
    right_power = power + delta
    MotorA.SetPower(left_power * @left_forward)
    MotorB.SetPower(right_power * @right_forward)
  EndWhile
EndFunction

Function speedup_backward(in number power, in number deg)
  movement_init(-10)
  reset()
  l = 0
  While l < deg
    p = l / deg
    power = (power - 10) * p + 10
    l = MotorA.GetTacho() * @left_forward * -1
    r = MotorB.GetTacho() * @right_forward * -1
    delta = (l - r) * p
    left_power = power - delta
    right_power = power + delta
    MotorA.SetPower(left_power * @left_forward * -1)
    MotorB.SetPower(right_power * @right_forward * -1)
  EndWhile
EndFunction

Function sync()
  l = MotorA.GetTacho() * @left_forward
  r = MotorB.GetTacho() * @right_forward
  err = l - r
  diff = err - @last_err
  delta = err * 1 + diff * 0
  left_power = 80 - delta
  right_power = 80 + delta
  MotorA.SetPower(left_power * @left_forward)
  MotorB.SetSpeed(right_power * @right_forward)
  @last_err = err
EndFunction

Function forward_deg(in number deg)
  movement_init(80)
  reset()
  l = MotorA.GetTacho() * @left_forward
  While l < deg
    sync()
    l = MotorA.GetTacho() * @left_forward
  EndWhile
EndFunction

Function move_motor_forward(in string motor, in number forward, in number deg, in number max_power, in string acceleration, in string zame, in string to_stop)
  normal_deg = deg
  If acceleration = "True" Then
    normal_deg = normal_deg - 120
  EndIf
  If zame = "True" Then
    normal_deg = normal_deg - 120
  EndIf
  If acceleration = "True" Then
    Motor.ResetCount(motor)
    m = 0
    While m < 120
      p = m / 120
      power = (max_power - 10) * p + 10
      Motor.Start(motor, power * forward)
      m = Motor.GetCount(motor) * forward
      Program.Delay(10)
    EndWhile
  EndIf
  Motor.Move(motor, max_power * forward, normal_deg, "False")
  If zame = "True" Then
    Motor.ResetCount(motor)
    m = 0
    While m < 120
      p = 1 - (m / 120)
      power = (max_power - 10) * p + 10
      Motor.Start(motor, power * forward)
      m = Motor.GetCount(motor) * forward
      Program.Delay(10)
    EndWhile
  EndIf
  If to_stop = "True" Then
    Motor.Stop(motor, "True")
  EndIf
EndFunction

Function move_motor_backward(in string motor, in number forward, in number deg, in number max_power, in string acceleration, in string zame, in string to_stop)
  Motor.Start(motor, -10 * forward)
  normal_deg = deg
  If acceleration = "True" Then
    normal_deg = normal_deg - 120
  EndIf
  If zame = "True" Then
    normal_deg = normal_deg - 120
  EndIf
  If acceleration = "True" Then
    Motor.ResetCount(motor)
    m = 0
    While m < 120
      p = m / 120
      power = (max_power - 10) * p + 10
      Motor.Start(motor, power * -1 * forward)
      m = Motor.GetCount(motor) * -1 * forward
      If m < 0 Then
        m = 0
      EndIf
      Program.Delay(10)
    EndWhile
  EndIf
  Motor.Move(motor, max_power * -1 * forward, normal_deg, "False")
  If zame = "True" Then
    Motor.ResetCount(motor)
    m = 0
    While m < 120
      p = 1 - (m / 120)
      power = (max_power - 10) * p + 10
      Motor.Start(motor, power * -1 * forward)
      m = Motor.GetCount(motor) * -1 * forward
      Program.Delay(10)
    EndWhile
  EndIf
  If to_stop = "True" Then
    Motor.Stop(motor, "True")
  EndIf
EndFunction

Function zame(in number base_power, in number min_power, in number deg)
  movement_init(base_power)
  reset()
  l = MotorA.GetTacho() * @left_forward
  While l < deg
    p = l / deg
    l = MotorA.GetTacho() * @left_forward
    r = MotorB.GetTacho() * @right_forward
    delta = (l - r) * (1 - p)
    power = (base_power - min_power) * (1 - p) + min_power
    left_power = power - delta
    right_power = power + delta
    MotorA.SetPower(left_power * @left_forward)
    MotorB.SetPower(right_power * @right_forward)
    Program.Delay(10)
  EndWhile
EndFunction

Sub kick_water
  Motor.Start(water_motor, 50)
  Program.Delay(500)
  Motor.Move(water_motor, -50, 100, "True")
EndSub

Sub find_line
  l = (Sensor.ReadPercent(@left_line) - @left_min) / (@left_max - @left_min) * 100
  r = (Sensor.ReadPercent(@right_line) - @right_min) / (@right_max - @right_min) * 100
  reset()
  If l < 25 Then
    MotorA.OffAndBrake()
    
    MotorB.StartSpeed(15 * @right_forward)
    While MotorB.GetTacho() * @right_forward < 90
    EndWhile
    MotorB.OffAndBrake()
    
    MotorA.StartSpeed(15 * @left_forward)
    While MotorA.GetTacho() * @left_forward < 80
    EndWhile
    MotorA.OffAndBrake()
  ElseIf r < 25 Then
    MotorB.OffAndBrake()
    
    MotorA.StartSpeed(15 * @left_forward)
    While MotorA.GetTacho() * @left_forward < 90
    EndWhile
    MotorA.OffAndBrake()
    
    MotorB.StartSpeed(15 * @right_forward)
    While MotorB.GetTacho() * @right_forward < 80
    EndWhile
    MotorB.OffAndBrake()
  Else
    MotorA.OffAndBrake()
    MotorB.StartSpeed(15 * @right_forward)
    
    finished = "False"
    has_moved = "False"
    While finished = "False"
      l = (Sensor.ReadPercent(@left_line) - @left_min) / (@left_max - @left_min) * 100
      r = (Sensor.ReadPercent(@right_line) - @right_min) / (@right_max - @right_min) * 100
      If r < 25 Then
        finished = "True"
        MotorB.OffAndBrake()
        c = MotorB.GetTacho() * @right_forward
        MotorA.StartSpeed(15 * @left_forward)
        While MotorA.GetTacho() * @left_forward < c
        EndWhile
        MotorA.OffAndBrake()
        
      ElseIf r > 60 And l < 35 And l > 20 Then
        If has_moved = "False" Then
          c1 = MotorB.GetTacho() * @right_forward
          While MotorB.GetTacho() * @right_forward < c1 + 25
          EndWhile
          has_moved = "True"
        Else
          finished = "True"
          MotorB.OffAndBrake()
          c = MotorB.GetTacho() * @right_forward
          MotorA.StartSpeed(15 * @left_forward)
          While MotorA.GetTacho() * @left_forward < c + 170
          EndWhile
          MotorA.OffAndBrake()
          
          MotorB.StartSpeed(15 * @right_forward)
          While MotorB.GetTacho() * @right_forward < 160
          EndWhile
          MotorB.OffAndBrake()
        EndIf
      ElseIf r > 60 And l < 35 Then
        finished = "True"
        c1 = MotorB.GetTacho() * @right_forward
        While MotorB.GetTacho() * @right_forward < c1 + 90
        EndWhile
        MotorB.OffAndBrake()
        reset()
        beep()
        MotorA.StartSpeed(15 * @left_forward)
        While MotorA.GetTacho() * @left_forward < 160
        EndWhile
        MotorA.OffAndBrake()
      EndIf
    EndWhile
  EndIf
EndSub

Sub main
  move_motor_forward(left_motor, left_forward, 320, 40, "True", "True", "True")
  move_motor_forward(right_motor, right_forward, 320, 40, "True", "True", "True")
  forward_deg(1200)
  
  movement_init(80)
  While Sensor.ReadPercent(left_line) < 30 Or Sensor.ReadPercent(right_line) < 30
    sync()
  EndWhile
  While Sensor.ReadPercent(left_line) > 10 Or Sensor.ReadPercent(right_line) > 10
    sync()
  EndWhile
  zame(80, 15, 40)
  
  stop()
  reset()
  delay(250)
  move_motor_backward(right_motor, right_forward, 490, 40, "True", "False", "False")
  movement_init(-50)
  Program.Delay(700)
  stop()
  forward_deg(70)
  MotorA.OffAndBrake()
  move_motor_forward(right_motor, right_forward, 540, 40, "False", "True", "True")
  
  reset()
  
  movement_init(80)
  l = (Sensor.ReadPercent(@left_line) - @left_min) / (@left_max - @left_min) * 100
  r = (Sensor.ReadPercent(@right_line) - @right_min) / (@right_max - @right_min) * 100
  While l > 50 Or r > 50
    line(l, r)
    l = (Sensor.ReadPercent(@left_line) - @left_min) / (@left_max - @left_min) * 100
    r = (Sensor.ReadPercent(@right_line) - @right_min) / (@right_max - @right_min) * 100
  EndWhile
  Thread.Run = beep
  
  'values = Sensor.ReadRaw(right_sensor, 3)
  'object = "none"
  'If values[0] > 30 Then
  'object = "fire"
  '' Огонь
  'beep()
  'zame(80, 120)
  'Motor.Stop(left_motor, "True")
  'move_motor_forward(right_motor, right_forward, 120, 20, "False", "False", "True")
  'move_motor_forward(left_motor, left_forward, 95, 20, "False", "False", "True")
  'speedup(80, 120)
  'forward_deg(490 - 120)
  'Thread.Run = kick_water
  'ElseIf values[0] > 10 Then
  '' Человек
  'beep()
  'Speaker.Wait()
  'beep()
  'ElseIf values[2] > 3 Then
  '' Химикат
  'Thread.Run = take_chem
  'EndIf 
  
  forward_deg(630)
  Thread.Run = beep
  forward_deg(930 - 120)
  zame(80, 0, 120)
  stop()
  Thread.Run = beep
  delay(700)
  speedup_backward(30, 70)
  'Motor.MoveSync(motors, left_forward * 30, right_forward * -30, , "True ")
EndSub

main()