DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_BASE_POWER_8
DATAF VLV_MIN_POWER_8
DATAF VLV_DEG_8
DATAF VLV_COEF_8
DATAF VLV_BASE_POWER_12
DATAF VLV_MIN_POWER_12
DATAF VLV_DEG_12
DATAF VLV_COEF_12
DATAS VLV_MOTOR_11 252
DATAF VLV_FORWARD_11
DATAF VLV_DEG_11
DATAF VLV_MAX_POWER_11
DATAS VLV_ACCELERATION_11 252
DATAS VLV_ZAME_11 252
DATAS VLV_TO_STOP_11 252
DATAF VLV_TIME_5
DATAF VLV_PERCENT_13
DATAF VLV_POWER_1
DATAF VLV_A_3
DATAF VLV_DEG_10
DATAF VLV_POWER_10
DATAF VLV_L_2
DATAF VLV_POWER_9
DATAF VGV_P
DATAF VGV_LINE
DATAF VGV_LEFT_SENSOR
DATAF VGV_RIGHT_SENSOR
DATAF VGV_ULTRASONIC
DATAS VGV_LEFT_MOTOR 252
DATAS VGV_RIGHT_MOTOR 252
DATAS VGV_NOT_INVERTED_MOTOR 252
DATAS VGV_MOTORS 252
DATAF VGV_LEFT_FORWARD
DATAF VGV_RIGHT_FORWARD
DATAS VGV_GRABBER_MOTOR 252
DATAS VGV_WATER_MOTOR 252
DATAF VGV_LEFT_MAX
DATAF VGV_LEFT_MIN
DATAF VGV_LAST_ERR
DATAF VGV_LAST_MOTOR_ERR
DATAS VGV_BROWN 252
DATAS VGV_RED 252
DATAS VGV_YELLOW 252
DATAS VGV_GREEN 252
DATAS VGV_BLUE 252
DATAS VGV_WHITE 252
DATAF VGV_WATER_STATE
DATAF VGV_FIRE_COUNT
DATAF VGV_MEN_COUNT
DATAS VGV_CHEM 252
DATAS VGV_TAKE_CHEM_IN_YELLOW 252
DATAF VGV_A
DATAF VGV_R
DATAS VGV_OBEJCT 252
DATAS VGV_OBJECT 252
DATAF VGV_DEG
DATAS VGV_TAKE_LEFT 252
DATAS VGV_TAKE_RIGHT 252
DATAF VGV_W
DATAF VGV_ULTRA
DATAF VLV_ERR_2
DATAF VLV_DIFF_2
DATAF VLV_DELTA_2
DATAF VLV_LEFT_POWER_2
DATAF VLV_RIGHT_POWER_2
DATAF VLV_L_3
DATAF VLV_ERR_3
DATAF VLV_DIFF_3
DATAF VLV_DELTA_3
DATAF VLV_LEFT_POWER_3
DATAF VLV_RIGHT_POWER_3
DATAF VLV_L_8
DATAF VLV_P_8
DATAF VLV_POWER_8
DATAF VLV_R_8
DATAF VLV_DELTA_8
DATAF VLV_LEFT_POWER_8
DATAF VLV_RIGHT_POWER_8
DATAF VLV_L_9
DATAF VLV_R_9
DATAF VLV_ERR_9
DATAF VLV_DIFF_9
DATAF VLV_DELTA_9
DATAF VLV_LEFT_POWER_9
DATAF VLV_RIGHT_POWER_9
DATAF VLV_L_10
DATAF VLV_NORMAL_DEG_11
DATAF VLV_ACCELERATION_DEG_11
DATAF VLV_ZAME_DEG_11
DATAF VLV_M_11
DATAF VLV_P_11
DATAF VLV_POWER_11
DATAF VLV_L_12
DATAF VLV_P_12
DATAF VLV_R_12
DATAF VLV_DELTA_12
DATAF VLV_POWER_12
DATAF VLV_LEFT_POWER_12
DATAF VLV_RIGHT_POWER_12
DATA32 RUNCOUNTER_F_KICK_WATER_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_BASE_POWER_8
    MOVEF_F 0.0 VLV_MIN_POWER_8
    MOVEF_F 0.0 VLV_DEG_8
    MOVEF_F 0.0 VLV_COEF_8
    MOVEF_F 0.0 VLV_BASE_POWER_12
    MOVEF_F 0.0 VLV_MIN_POWER_12
    MOVEF_F 0.0 VLV_DEG_12
    MOVEF_F 0.0 VLV_COEF_12
    STRINGS DUPLICATE '' VLV_MOTOR_11
    MOVEF_F 0.0 VLV_FORWARD_11
    MOVEF_F 0.0 VLV_DEG_11
    MOVEF_F 0.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE '' VLV_ACCELERATION_11
    STRINGS DUPLICATE '' VLV_ZAME_11
    STRINGS DUPLICATE '' VLV_TO_STOP_11
    MOVEF_F 0.0 VLV_TIME_5
    MOVEF_F 0.0 VLV_PERCENT_13
    MOVEF_F 0.0 VLV_POWER_1
    MOVEF_F 0.0 VLV_A_3
    MOVEF_F 0.0 VLV_DEG_10
    MOVEF_F 0.0 VLV_POWER_10
    MOVEF_F 0.0 VLV_L_2
    MOVEF_F 0.0 VLV_POWER_9
    MOVEF_F 0.0 VGV_P
    MOVEF_F 0.0 VGV_LINE
    MOVEF_F 0.0 VGV_LEFT_SENSOR
    MOVEF_F 0.0 VGV_RIGHT_SENSOR
    MOVEF_F 0.0 VGV_ULTRASONIC
    STRINGS DUPLICATE '' VGV_LEFT_MOTOR
    STRINGS DUPLICATE '' VGV_RIGHT_MOTOR
    STRINGS DUPLICATE '' VGV_NOT_INVERTED_MOTOR
    STRINGS DUPLICATE '' VGV_MOTORS
    MOVEF_F 0.0 VGV_LEFT_FORWARD
    MOVEF_F 0.0 VGV_RIGHT_FORWARD
    STRINGS DUPLICATE '' VGV_GRABBER_MOTOR
    STRINGS DUPLICATE '' VGV_WATER_MOTOR
    MOVEF_F 0.0 VGV_LEFT_MAX
    MOVEF_F 0.0 VGV_LEFT_MIN
    MOVEF_F 0.0 VGV_LAST_ERR
    MOVEF_F 0.0 VGV_LAST_MOTOR_ERR
    STRINGS DUPLICATE '' VGV_BROWN
    STRINGS DUPLICATE '' VGV_RED
    STRINGS DUPLICATE '' VGV_YELLOW
    STRINGS DUPLICATE '' VGV_GREEN
    STRINGS DUPLICATE '' VGV_BLUE
    STRINGS DUPLICATE '' VGV_WHITE
    MOVEF_F 0.0 VGV_WATER_STATE
    MOVEF_F 0.0 VGV_FIRE_COUNT
    MOVEF_F 0.0 VGV_MEN_COUNT
    STRINGS DUPLICATE '' VGV_CHEM
    STRINGS DUPLICATE '' VGV_TAKE_CHEM_IN_YELLOW
    MOVEF_F 0.0 VGV_A
    MOVEF_F 0.0 VGV_R
    STRINGS DUPLICATE '' VGV_OBEJCT
    STRINGS DUPLICATE '' VGV_OBJECT
    MOVEF_F 0.0 VGV_DEG
    STRINGS DUPLICATE '' VGV_TAKE_LEFT
    STRINGS DUPLICATE '' VGV_TAKE_RIGHT
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_ULTRA
    MOVEF_F 0.0 VLV_ERR_2
    MOVEF_F 0.0 VLV_DIFF_2
    MOVEF_F 0.0 VLV_DELTA_2
    MOVEF_F 0.0 VLV_LEFT_POWER_2
    MOVEF_F 0.0 VLV_RIGHT_POWER_2
    MOVEF_F 0.0 VLV_L_3
    MOVEF_F 0.0 VLV_ERR_3
    MOVEF_F 0.0 VLV_DIFF_3
    MOVEF_F 0.0 VLV_DELTA_3
    MOVEF_F 0.0 VLV_LEFT_POWER_3
    MOVEF_F 0.0 VLV_RIGHT_POWER_3
    MOVEF_F 0.0 VLV_L_8
    MOVEF_F 0.0 VLV_P_8
    MOVEF_F 0.0 VLV_POWER_8
    MOVEF_F 0.0 VLV_R_8
    MOVEF_F 0.0 VLV_DELTA_8
    MOVEF_F 0.0 VLV_LEFT_POWER_8
    MOVEF_F 0.0 VLV_RIGHT_POWER_8
    MOVEF_F 0.0 VLV_L_9
    MOVEF_F 0.0 VLV_R_9
    MOVEF_F 0.0 VLV_ERR_9
    MOVEF_F 0.0 VLV_DIFF_9
    MOVEF_F 0.0 VLV_DELTA_9
    MOVEF_F 0.0 VLV_LEFT_POWER_9
    MOVEF_F 0.0 VLV_RIGHT_POWER_9
    MOVEF_F 0.0 VLV_L_10
    MOVEF_F 0.0 VLV_NORMAL_DEG_11
    MOVEF_F 0.0 VLV_ACCELERATION_DEG_11
    MOVEF_F 0.0 VLV_ZAME_DEG_11
    MOVEF_F 0.0 VLV_M_11
    MOVEF_F 0.0 VLV_P_11
    MOVEF_F 0.0 VLV_POWER_11
    MOVEF_F 0.0 VLV_L_12
    MOVEF_F 0.0 VLV_P_12
    MOVEF_F 0.0 VLV_R_12
    MOVEF_F 0.0 VLV_DELTA_12
    MOVEF_F 0.0 VLV_POWER_12
    MOVEF_F 0.0 VLV_LEFT_POWER_12
    MOVEF_F 0.0 VLV_RIGHT_POWER_12
    MOVE32_32 0 RUNCOUNTER_F_KICK_WATER_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_KICK_WATER_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_KICK_WATER_0 0
    CALL GETANDINC32 RUNCOUNTER_F_KICK_WATER_0 -1 RUNCOUNTER_F_KICK_WATER_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_KICK_WATER_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch410
    WRITE32 ENDSUB_F_KICK_WATER_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_KICK_WATER_0
  dispatch410:
    MOVEF_F 0.0 VLV_BASE_POWER_8
    MOVEF_F 0.0 VLV_MIN_POWER_8
    MOVEF_F 0.0 VLV_DEG_8
    MOVEF_F 0.0 VLV_COEF_8
    MOVEF_F 0.0 VLV_BASE_POWER_12
    MOVEF_F 0.0 VLV_MIN_POWER_12
    MOVEF_F 0.0 VLV_DEG_12
    MOVEF_F 0.0 VLV_COEF_12
    STRINGS DUPLICATE '' VLV_MOTOR_11
    MOVEF_F 0.0 VLV_FORWARD_11
    MOVEF_F 0.0 VLV_DEG_11
    MOVEF_F 0.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE '' VLV_ACCELERATION_11
    STRINGS DUPLICATE '' VLV_ZAME_11
    STRINGS DUPLICATE '' VLV_TO_STOP_11
    MOVEF_F 0.0 VLV_TIME_5
    MOVEF_F 0.0 VLV_PERCENT_13
    MOVEF_F 0.0 VLV_POWER_1
    MOVEF_F 0.0 VLV_A_3
    MOVEF_F 0.0 VLV_DEG_10
    MOVEF_F 0.0 VLV_POWER_10
    MOVEF_F 0.0 VLV_L_2
    MOVEF_F 0.0 VLV_POWER_9
    MOVEF_F 0.0 VGV_P
    MOVEF_F 0.0 VGV_LINE
    MOVEF_F 0.0 VGV_LEFT_SENSOR
    MOVEF_F 0.0 VGV_RIGHT_SENSOR
    MOVEF_F 0.0 VGV_ULTRASONIC
    STRINGS DUPLICATE '' VGV_LEFT_MOTOR
    STRINGS DUPLICATE '' VGV_RIGHT_MOTOR
    STRINGS DUPLICATE '' VGV_NOT_INVERTED_MOTOR
    STRINGS DUPLICATE '' VGV_MOTORS
    MOVEF_F 0.0 VGV_LEFT_FORWARD
    MOVEF_F 0.0 VGV_RIGHT_FORWARD
    STRINGS DUPLICATE '' VGV_GRABBER_MOTOR
    STRINGS DUPLICATE '' VGV_WATER_MOTOR
    MOVEF_F 0.0 VGV_LEFT_MAX
    MOVEF_F 0.0 VGV_LEFT_MIN
    MOVEF_F 0.0 VGV_LAST_ERR
    MOVEF_F 0.0 VGV_LAST_MOTOR_ERR
    STRINGS DUPLICATE '' VGV_BROWN
    STRINGS DUPLICATE '' VGV_RED
    STRINGS DUPLICATE '' VGV_YELLOW
    STRINGS DUPLICATE '' VGV_GREEN
    STRINGS DUPLICATE '' VGV_BLUE
    STRINGS DUPLICATE '' VGV_WHITE
    MOVEF_F 0.0 VGV_WATER_STATE
    MOVEF_F 0.0 VGV_FIRE_COUNT
    MOVEF_F 0.0 VGV_MEN_COUNT
    STRINGS DUPLICATE '' VGV_CHEM
    STRINGS DUPLICATE '' VGV_TAKE_CHEM_IN_YELLOW
    MOVEF_F 0.0 VGV_A
    MOVEF_F 0.0 VGV_R
    STRINGS DUPLICATE '' VGV_OBEJCT
    STRINGS DUPLICATE '' VGV_OBJECT
    MOVEF_F 0.0 VGV_DEG
    STRINGS DUPLICATE '' VGV_TAKE_LEFT
    STRINGS DUPLICATE '' VGV_TAKE_RIGHT
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_ULTRA
    MOVEF_F 1.0 VGV_LINE
    MOVEF_F 2.0 VGV_LEFT_SENSOR
    MOVEF_F 3.0 VGV_RIGHT_SENSOR
    MOVEF_F 4.0 VGV_ULTRASONIC
    STRINGS DUPLICATE 'A' VGV_LEFT_MOTOR
    STRINGS DUPLICATE 'B' VGV_RIGHT_MOTOR
    STRINGS DUPLICATE 'B' VGV_NOT_INVERTED_MOTOR
    CALL TEXT.APPEND VGV_LEFT_MOTOR VGV_RIGHT_MOTOR VGV_MOTORS
    MOVEF_F -1.0 VGV_LEFT_FORWARD
    MOVEF_F 1.0 VGV_RIGHT_FORWARD
    STRINGS DUPLICATE 'C' VGV_GRABBER_MOTOR
    STRINGS DUPLICATE 'D' VGV_WATER_MOTOR
    MOVEF_F 40.0 VGV_LEFT_MAX
    MOVEF_F 5.0 VGV_LEFT_MIN
    MOVEF_F 0.0 VGV_LAST_ERR
    MOVEF_F 0.0 VGV_LAST_MOTOR_ERR
    STRINGS DUPLICATE 'False' VGV_BROWN
    STRINGS DUPLICATE 'False' VGV_RED
    STRINGS DUPLICATE 'False' VGV_YELLOW
    STRINGS DUPLICATE 'False' VGV_GREEN
    STRINGS DUPLICATE 'False' VGV_BLUE
    STRINGS DUPLICATE 'False' VGV_WHITE
    MOVEF_F 0.0 VGV_WATER_STATE
    MOVEF_F 0.0 VGV_FIRE_COUNT
    MOVEF_F 0.0 VGV_MEN_COUNT
    STRINGS DUPLICATE 'False' VGV_CHEM
    STRINGS DUPLICATE 'False' VGV_TAKE_CHEM_IN_YELLOW
    DATA8 layer1
	DATA8 no1
	DATA8 mode81
	
	MOVEF_8 VGV_LINE no1
	SUB8 no1 1 no1
	DIV8 no1 4 layer1
	MATH MOD8 no1 4 no1

	MOVEF_8 0.0 mode81
	
	INPUT_DEVICE READY_RAW layer1 no1 0 mode81 0
    DATA8 layer2
	DATA8 no2
	DATA8 mode82
	
	MOVEF_8 VGV_LEFT_SENSOR no2
	SUB8 no2 1 no2
	DIV8 no2 4 layer2
	MATH MOD8 no2 4 no2

	MOVEF_8 1.0 mode82
	
	INPUT_DEVICE READY_RAW layer2 no2 0 mode82 0
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 VGV_RIGHT_SENSOR no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 1.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 VGV_ULTRASONIC no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    CALL EV3.BATTERYVOLTAGE F.0
    JR_GTEQF F.0 8.0 else5_1
    WRITE32 ENDSUB_F_BEEP_0:CALLSUB7 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BEEP_0
CALLSUB7:
    SOUND_READY
    WRITE32 ENDSUB_F_BEEP_0:CALLSUB9 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BEEP_0
CALLSUB9:
  else5_1:
  endif5:
    WRITE32 ENDSUB_F_MAIN_0:CALLSUB10 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MAIN_0
CALLSUB10:
ENDTHREAD:
    RETURN
SUB_F_BEEP_0:
    CALL SPEAKER.TONE 100.0 500.0 200.0
RETSUB_F_BEEP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BEEP_0:
SUB_F_KICK_WATER_0:
    CALL MOTOR.START VGV_WATER_MOTOR 50.0
    DATA32 milliseconds13
	MOVEF_32 500.0 milliseconds13
	DATA32 timer13
	TIMER_WAIT milliseconds13 timer13
	TIMER_READY timer13
    CALL MOTOR.STOP VGV_WATER_MOTOR 'True'
    CALL MOTOR.SCHEDULE VGV_WATER_MOTOR -50.0 0.0 20.0 0.0 'True' 

	DATA8 layer15
	DATA8 nos15
	DATA8 busy15
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_WATER_MOTOR layer15 nos15
	JR_EQ8 0 nos15 motornotbusy15
  motorwaiting15:
	OUTPUT_TEST layer15 nos15 busy15
	JR_EQ8 busy15 0 motornotbusy15
	SLEEP
	JR motorwaiting15
  motornotbusy15:
RETSUB_F_KICK_WATER_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_KICK_WATER_0:
SUB_F_TAKE_CHEM_ON_RIGHT_0:
    MOVEF_F 30.0 VLV_BASE_POWER_8
    MOVEF_F 20.0 VLV_MIN_POWER_8
    MOVEF_F 50.0 VLV_DEG_8
    MOVEF_F -1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB16 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB16:
    MOVEF_F 30.0 VLV_BASE_POWER_12
    MOVEF_F 20.0 VLV_MIN_POWER_12
    MOVEF_F 50.0 VLV_DEG_12
    MOVEF_F -1.0 VLV_COEF_12
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB17 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB17:
    OUTPUT_POWER 0 1 0
	OUTPUT_STOP 0 1 1
    STRINGS DUPLICATE VGV_RIGHT_MOTOR VLV_MOTOR_11
    MULF VGV_RIGHT_FORWARD -1.0 VLV_FORWARD_11
    MOVEF_F 100.0 VLV_DEG_11
    MOVEF_F 30.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE 'False' VLV_ACCELERATION_11
    STRINGS DUPLICATE 'True' VLV_ZAME_11
    STRINGS DUPLICATE 'True' VLV_TO_STOP_11
    WRITE32 ENDSUB_F_MOVE_MOTOR_7:CALLSUB20 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_7
CALLSUB20:
    CALL MOTOR.SCHEDULE VGV_GRABBER_MOTOR 50.0 0.0 170.0 0.0 'True' 

	DATA8 layer21
	DATA8 nos21
	DATA8 busy21
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_GRABBER_MOTOR layer21 nos21
	JR_EQ8 0 nos21 motornotbusy21
  motorwaiting21:
	OUTPUT_TEST layer21 nos21 busy21
	JR_EQ8 busy21 0 motornotbusy21
	SLEEP
	JR motorwaiting21
  motornotbusy21:
    MOVEF_F 30.0 VLV_BASE_POWER_8
    MOVEF_F 20.0 VLV_MIN_POWER_8
    MOVEF_F 50.0 VLV_DEG_8
    MOVEF_F 1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB22 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB22:
    MOVEF_F 30.0 VLV_BASE_POWER_12
    MOVEF_F 20.0 VLV_MIN_POWER_12
    MOVEF_F 50.0 VLV_DEG_12
    MOVEF_F 1.0 VLV_COEF_12
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB23 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB23:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB24 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB24:
    CALL MOTOR.SCHEDULE VGV_GRABBER_MOTOR 50.0 0.0 110.0 0.0 'True' 

	DATA8 layer25
	DATA8 nos25
	DATA8 busy25
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_GRABBER_MOTOR layer25 nos25
	JR_EQ8 0 nos25 motornotbusy25
  motorwaiting25:
	OUTPUT_TEST layer25 nos25 busy25
	JR_EQ8 busy25 0 motornotbusy25
	SLEEP
	JR motorwaiting25
  motornotbusy25:
    MOVEF_F 30.0 VLV_BASE_POWER_8
    MOVEF_F 20.0 VLV_MIN_POWER_8
    MOVEF_F 60.0 VLV_DEG_8
    MOVEF_F -1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB26 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB26:
    MOVEF_F 30.0 VLV_BASE_POWER_12
    MOVEF_F 15.0 VLV_MIN_POWER_12
    MOVEF_F 60.0 VLV_DEG_12
    MOVEF_F -1.0 VLV_COEF_12
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB27 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB27:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB28 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB28:
    MOVEF_F 300.0 VLV_TIME_5
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB29 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB29:
    STRINGS DUPLICATE VGV_RIGHT_MOTOR VLV_MOTOR_11
    MOVEF_F VGV_RIGHT_FORWARD VLV_FORWARD_11
    MOVEF_F 85.0 VLV_DEG_11
    MOVEF_F 30.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE 'True' VLV_ACCELERATION_11
    STRINGS DUPLICATE 'True' VLV_ZAME_11
    STRINGS DUPLICATE 'True' VLV_TO_STOP_11
    WRITE32 ENDSUB_F_MOVE_MOTOR_7:CALLSUB30 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_7
CALLSUB30:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB31 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB31:
    MOVEF_F 300.0 VLV_TIME_5
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB32 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB32:
    MOVEF_F 30.0 VLV_BASE_POWER_8
    MOVEF_F 20.0 VLV_MIN_POWER_8
    MOVEF_F 100.0 VLV_DEG_8
    MOVEF_F 1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB33 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB33:
    STRINGS DUPLICATE 'True' VGV_CHEM
RETSUB_F_TAKE_CHEM_ON_RIGHT_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TAKE_CHEM_ON_RIGHT_0:
SUB_F_TAKE_CHEM_ON_LEFT_0:
    MOVEF_F 30.0 VLV_BASE_POWER_8
    MOVEF_F 20.0 VLV_MIN_POWER_8
    MOVEF_F 50.0 VLV_DEG_8
    MOVEF_F -1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB34 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB34:
    MOVEF_F 30.0 VLV_BASE_POWER_12
    MOVEF_F 20.0 VLV_MIN_POWER_12
    MOVEF_F 50.0 VLV_DEG_12
    MOVEF_F -1.0 VLV_COEF_12
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB35 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB35:
    OUTPUT_POWER 0 2 0
	OUTPUT_STOP 0 2 1
    STRINGS DUPLICATE VGV_LEFT_MOTOR VLV_MOTOR_11
    MULF VGV_LEFT_FORWARD -1.0 VLV_FORWARD_11
    MOVEF_F 100.0 VLV_DEG_11
    MOVEF_F 30.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE 'False' VLV_ACCELERATION_11
    STRINGS DUPLICATE 'True' VLV_ZAME_11
    STRINGS DUPLICATE 'True' VLV_TO_STOP_11
    WRITE32 ENDSUB_F_MOVE_MOTOR_7:CALLSUB38 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_7
CALLSUB38:
    CALL MOTOR.SCHEDULE VGV_GRABBER_MOTOR 50.0 0.0 170.0 0.0 'True' 

	DATA8 layer39
	DATA8 nos39
	DATA8 busy39
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_GRABBER_MOTOR layer39 nos39
	JR_EQ8 0 nos39 motornotbusy39
  motorwaiting39:
	OUTPUT_TEST layer39 nos39 busy39
	JR_EQ8 busy39 0 motornotbusy39
	SLEEP
	JR motorwaiting39
  motornotbusy39:
    MOVEF_F 30.0 VLV_BASE_POWER_8
    MOVEF_F 20.0 VLV_MIN_POWER_8
    MOVEF_F 50.0 VLV_DEG_8
    MOVEF_F 1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB40 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB40:
    MOVEF_F 30.0 VLV_BASE_POWER_12
    MOVEF_F 20.0 VLV_MIN_POWER_12
    MOVEF_F 50.0 VLV_DEG_12
    MOVEF_F 1.0 VLV_COEF_12
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB41 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB41:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB42 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB42:
    CALL MOTOR.SCHEDULE VGV_GRABBER_MOTOR 50.0 0.0 110.0 0.0 'True' 

	DATA8 layer43
	DATA8 nos43
	DATA8 busy43
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_GRABBER_MOTOR layer43 nos43
	JR_EQ8 0 nos43 motornotbusy43
  motorwaiting43:
	OUTPUT_TEST layer43 nos43 busy43
	JR_EQ8 busy43 0 motornotbusy43
	SLEEP
	JR motorwaiting43
  motornotbusy43:
    MOVEF_F 30.0 VLV_BASE_POWER_8
    MOVEF_F 20.0 VLV_MIN_POWER_8
    MOVEF_F 60.0 VLV_DEG_8
    MOVEF_F -1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB44 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB44:
    MOVEF_F 30.0 VLV_BASE_POWER_12
    MOVEF_F 15.0 VLV_MIN_POWER_12
    MOVEF_F 60.0 VLV_DEG_12
    MOVEF_F -1.0 VLV_COEF_12
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB45 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB45:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB46 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB46:
    MOVEF_F 300.0 VLV_TIME_5
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB47 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB47:
    STRINGS DUPLICATE VGV_LEFT_MOTOR VLV_MOTOR_11
    MOVEF_F VGV_LEFT_FORWARD VLV_FORWARD_11
    MOVEF_F 85.0 VLV_DEG_11
    MOVEF_F 30.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE 'True' VLV_ACCELERATION_11
    STRINGS DUPLICATE 'True' VLV_ZAME_11
    STRINGS DUPLICATE 'True' VLV_TO_STOP_11
    WRITE32 ENDSUB_F_MOVE_MOTOR_7:CALLSUB48 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_7
CALLSUB48:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB49 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB49:
    MOVEF_F 300.0 VLV_TIME_5
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB50 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB50:
    MOVEF_F 30.0 VLV_BASE_POWER_8
    MOVEF_F 20.0 VLV_MIN_POWER_8
    MOVEF_F 100.0 VLV_DEG_8
    MOVEF_F 1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB51 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB51:
    STRINGS DUPLICATE 'True' VGV_CHEM
RETSUB_F_TAKE_CHEM_ON_LEFT_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TAKE_CHEM_ON_LEFT_0:
SUB_F_MAIN_0:
    MOVEF_F 97.0 VGV_A
    MULF 80.0 VGV_LEFT_FORWARD F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
	OUTPUT_START 0 1
    MULF 85.0 VGV_RIGHT_FORWARD F.0
    MOVEF_8 F.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
	OUTPUT_START 0 2
    WRITE32 ENDSUB_F_RESET_0:CALLSUB56 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RESET_0
CALLSUB56:
  while57:
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.0
    JR_GTEQF F.0 1000.0 endwhile57
  whilebody57:
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.0
    JR_LTF F.0 1000.0 whilebody57
  endwhile57:
    WRITE32 ENDSUB_F_READ_PERCENT_1:CALLSUB60 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_READ_PERCENT_1
CALLSUB60:
    MOVEF_F VLV_PERCENT_13 VGV_P
  while61:
    JR_GTEQF VGV_P 50.0 endwhile61
  whilebody61:
    WRITE32 ENDSUB_F_READ_PERCENT_1:CALLSUB62 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_READ_PERCENT_1
CALLSUB62:
    MOVEF_F VLV_PERCENT_13 VGV_P
    JR_LTF VGV_P 50.0 whilebody61
  endwhile61:
  while63:
    JR_LTEQF VGV_P 20.0 endwhile63
  whilebody63:
    WRITE32 ENDSUB_F_READ_PERCENT_1:CALLSUB64 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_READ_PERCENT_1
CALLSUB64:
    MOVEF_F VLV_PERCENT_13 VGV_P
    JR_GTF VGV_P 20.0 whilebody63
  endwhile63:
    OUTPUT_POWER 0 1 0
	OUTPUT_STOP 0 1 1
    STRINGS DUPLICATE VGV_RIGHT_MOTOR VLV_MOTOR_11
    MULF VGV_RIGHT_FORWARD -1.0 VLV_FORWARD_11
    MOVEF_F 180.0 VLV_DEG_11
    MOVEF_F 50.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE 'False' VLV_ACCELERATION_11
    STRINGS DUPLICATE 'False' VLV_ZAME_11
    STRINGS DUPLICATE 'True' VLV_TO_STOP_11
    WRITE32 ENDSUB_F_MOVE_MOTOR_7:CALLSUB67 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_7
CALLSUB67:
    STRINGS DUPLICATE VGV_LEFT_MOTOR VLV_MOTOR_11
    MOVEF_F VGV_LEFT_FORWARD VLV_FORWARD_11
    MOVEF_F 180.0 VLV_DEG_11
    MOVEF_F 50.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE 'False' VLV_ACCELERATION_11
    STRINGS DUPLICATE 'False' VLV_ZAME_11
    STRINGS DUPLICATE 'True' VLV_TO_STOP_11
    WRITE32 ENDSUB_F_MOVE_MOTOR_7:CALLSUB68 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_7
CALLSUB68:
    MOVEF_F -50.0 VLV_POWER_1
    WRITE32 ENDSUB_F_MOVEMENT_INIT_1:CALLSUB69 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVEMENT_INIT_1
CALLSUB69:
    DATA32 milliseconds70
	MOVEF_32 1000.0 milliseconds70
	DATA32 timer70
	TIMER_WAIT milliseconds70 timer70
	TIMER_READY timer70
    WRITE32 ENDSUB_F_STOP_0:CALLSUB71 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB71:
    MOVEF_F 30.0 VLV_BASE_POWER_8
    MOVEF_F 20.0 VLV_MIN_POWER_8
    MOVEF_F 65.0 VLV_DEG_8
    MOVEF_F 1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB72 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB72:
    OUTPUT_POWER 0 1 0
	OUTPUT_STOP 0 1 1
    STRINGS DUPLICATE VGV_RIGHT_MOTOR VLV_MOTOR_11
    MOVEF_F VGV_RIGHT_FORWARD VLV_FORWARD_11
    MOVEF_F 360.0 VLV_DEG_11
    MOVEF_F 30.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE 'False' VLV_ACCELERATION_11
    STRINGS DUPLICATE 'True' VLV_ZAME_11
    STRINGS DUPLICATE 'True' VLV_TO_STOP_11
    WRITE32 ENDSUB_F_MOVE_MOTOR_7:CALLSUB74 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_7
CALLSUB74:
    MOVEF_F 40.0 VLV_POWER_1
    WRITE32 ENDSUB_F_MOVEMENT_INIT_1:CALLSUB75 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVEMENT_INIT_1
CALLSUB75:
    WRITE32 ENDSUB_F_READ_PERCENT_1:CALLSUB76 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_READ_PERCENT_1
CALLSUB76:
    MOVEF_F VLV_PERCENT_13 VGV_P
  while77:
    JR_LTEQF VGV_P 23.0 endwhile77
  whilebody77:
    WRITE32 ENDSUB_F_READ_PERCENT_1:CALLSUB78 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_READ_PERCENT_1
CALLSUB78:
    MOVEF_F VLV_PERCENT_13 VGV_P
    MOVEF_F VGV_A VLV_A_3
    WRITE32 ENDSUB_F_ULTRA_LINE_1:CALLSUB79 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ULTRA_LINE_1
CALLSUB79:
    JR_GTF VGV_P 23.0 whilebody77
  endwhile77:
    MOVEF_F 40.0 VLV_BASE_POWER_12
    MOVEF_F 0.0 VLV_MIN_POWER_12
    MOVEF_F 35.0 VLV_DEG_12
    MOVEF_F 1.0 VLV_COEF_12
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB80 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB80:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB81 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB81:
    MOVEF_F 200.0 VLV_TIME_5
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB82 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB82:
    CALL SENSOR.READRAWVALUE VGV_RIGHT_SENSOR 0.0 VGV_R
    STRINGS DUPLICATE 'none' VGV_OBEJCT
    JR_LTEQF VGV_R 150.0 else84_1
    STRINGS DUPLICATE 'human' VGV_OBJECT
    ADDF VGV_MEN_COUNT 1.0 VGV_MEN_COUNT
    STRINGS DUPLICATE 'True' VGV_BROWN
    JR endif84
  else84_1:
    JR_LTEQF VGV_R 60.0 else84_2
    DATA32 tmp86
    CALL GETANDINC32 RUNCOUNTER_F_KICK_WATER_0 1  RUNCOUNTER_F_KICK_WATER_0 tmp86
    JR_NEQ32 0 tmp86 alreadylaunched86
    OBJECT_START TF_KICK_WATER_0
  alreadylaunched86:
    STRINGS DUPLICATE 'fire' VGV_OBJECT
    ADDF VGV_FIRE_COUNT 1.0 VGV_FIRE_COUNT
    STRINGS DUPLICATE 'True' VGV_BROWN
    JR endif84
  else84_2:
    JR_LTEQF VGV_R 15.0 else84_3
    WRITE32 ENDSUB_F_TAKE_CHEM_ON_RIGHT_0:CALLSUB88 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TAKE_CHEM_ON_RIGHT_0
CALLSUB88:
    STRINGS DUPLICATE 'chem' VGV_OBJECT
    STRINGS DUPLICATE 'True' VGV_BROWN
  else84_3:
  endif84:
    MOVEF_F 525.0 VGV_DEG
    CALL NE_STRING VGV_OBJECT 'chem' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else89_1
    MOVEF_F 40.0 VLV_BASE_POWER_8
    MOVEF_F 15.0 VLV_MIN_POWER_8
    MOVEF_F 120.0 VLV_DEG_8
    MOVEF_F 1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB91 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB91:
    SUBF VGV_DEG 120.0 VGV_DEG
  else89_1:
  endif89:
    WRITE32 ENDSUB_F_RESET_0:CALLSUB93 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RESET_0
CALLSUB93:
    CALL EQ_STRING VGV_BROWN 'False' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else94_1
  while96:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.1
    MULF F.1 VGV_LEFT_FORWARD F.0
    SUBF VGV_DEG 120.0 F.1
    JR_GTEQF F.0 F.1 endwhile96
  whilebody96:
    MOVEF_F VGV_A VLV_A_3
    WRITE32 ENDSUB_F_ULTRA_LINE_1:CALLSUB100 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ULTRA_LINE_1
CALLSUB100:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.1
    MULF F.1 VGV_LEFT_FORWARD F.0
    SUBF VGV_DEG 120.0 F.1
    JR_LTF F.0 F.1 whilebody96
  endwhile96:
    MOVEF_F 40.0 VLV_BASE_POWER_12
    MOVEF_F 15.0 VLV_MIN_POWER_12
    MOVEF_F 120.0 VLV_DEG_12
    MOVEF_F 1.0 VLV_COEF_12
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB104 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB104:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB105 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB105:
    MOVEF_F 200.0 VLV_TIME_5
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB106 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB106:
    CALL SENSOR.READRAWVALUE VGV_RIGHT_SENSOR 0.0 VGV_R
    JR_LTEQF VGV_R 160.0 else108_1
    STRINGS DUPLICATE 'True' VGV_RED
    ADDF VGV_MEN_COUNT 1.0 VGV_MEN_COUNT
    STRINGS DUPLICATE 'human' VGV_OBJECT
    JR endif108
  else108_1:
    JR_LTEQF VGV_R 80.0 else108_2
    STRINGS DUPLICATE 'True' VGV_RED
    ADDF VGV_FIRE_COUNT 1.0 VGV_FIRE_COUNT
    STRINGS DUPLICATE 'fire' VGV_OBJECT
    MOVEF_F 40.0 VLV_BASE_POWER_8
    MOVEF_F 15.0 VLV_MIN_POWER_8
    MOVEF_F 50.0 VLV_DEG_8
    MOVEF_F -1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB111 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB111:
    MOVEF_F 40.0 VLV_BASE_POWER_12
    MOVEF_F 15.0 VLV_MIN_POWER_12
    MOVEF_F 50.0 VLV_DEG_12
    MOVEF_F -1.0 VLV_COEF_12
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB112 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB112:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB113 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB113:
    WRITE32 ENDSUB_F_KICK_WATER_0:CALLSUB114 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_KICK_WATER_0
CALLSUB114:
    MOVEF_F 40.0 VLV_BASE_POWER_8
    MOVEF_F 15.0 VLV_MIN_POWER_8
    MOVEF_F 100.0 VLV_DEG_8
    MOVEF_F 1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB115 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB115:
    JR endif108
  else108_2:
    JR_LTEQF VGV_R 20.0 else108_3
    STRINGS DUPLICATE 'True' VGV_RED
    STRINGS DUPLICATE 'chem' VGV_OBJECT
    WRITE32 ENDSUB_F_TAKE_CHEM_ON_RIGHT_0:CALLSUB116 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TAKE_CHEM_ON_RIGHT_0
CALLSUB116:
  else108_3:
  endif108:
    MOVEF_F 40.0 VLV_POWER_1
    WRITE32 ENDSUB_F_MOVEMENT_INIT_1:CALLSUB117 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVEMENT_INIT_1
CALLSUB117:
    JR endif94
  else94_1:
  while118:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.1
    MULF F.1 VGV_LEFT_FORWARD F.0
    JR_GTEQF F.0 VGV_DEG endwhile118
  whilebody118:
    MOVEF_F VGV_A VLV_A_3
    WRITE32 ENDSUB_F_ULTRA_LINE_1:CALLSUB121 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ULTRA_LINE_1
CALLSUB121:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.1
    MULF F.1 VGV_LEFT_FORWARD F.0
    JR_LTF F.0 VGV_DEG whilebody118
  endwhile118:
  else94_2:
  endif94:
    WRITE32 ENDSUB_F_RESET_0:CALLSUB124 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RESET_0
CALLSUB124:
  while125:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.1
    MULF F.1 VGV_LEFT_FORWARD F.0
    JR_GTEQF F.0 520.0 endwhile125
  whilebody125:
    MOVEF_F VGV_A VLV_A_3
    WRITE32 ENDSUB_F_ULTRA_LINE_1:CALLSUB128 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ULTRA_LINE_1
CALLSUB128:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.1
    MULF F.1 VGV_LEFT_FORWARD F.0
    JR_LTF F.0 520.0 whilebody125
  endwhile125:
    MULF 60.0 VGV_LEFT_FORWARD F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
    MULF 60.0 VGV_RIGHT_FORWARD F.0
    MOVEF_8 F.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
    DATA32 milliseconds135
	MOVEF_32 1000.0 milliseconds135
	DATA32 timer135
	TIMER_WAIT milliseconds135 timer135
	TIMER_READY timer135
    WRITE32 ENDSUB_F_STOP_0:CALLSUB136 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB136:
    STRINGS DUPLICATE 'False' VGV_TAKE_LEFT
    STRINGS DUPLICATE 'False' VGV_TAKE_RIGHT
    MOVEF_F 200.0 VLV_TIME_5
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB137 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB137:
    CALL SENSOR.READRAWVALUE VGV_RIGHT_SENSOR 0.0 VGV_R
    JR_LTEQF VGV_R 160.0 else139_1
    STRINGS DUPLICATE 'True' VGV_RED
    JR endif139
  else139_1:
    JR_LTEQF VGV_R 80.0 else139_2
    STRINGS DUPLICATE 'True' VGV_RED
    WRITE32 ENDSUB_F_KICK_WATER_0:CALLSUB140 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_KICK_WATER_0
CALLSUB140:
    JR endif139
  else139_2:
    DATA8 layer141
	DATA8 no141
	DATA8 mode8141
	
	MOVEF_8 VGV_RIGHT_SENSOR no141
	SUB8 no141 1 no141
	DIV8 no141 4 layer141
	MATH MOD8 no141 4 no141

	MOVEF_8 4.0 mode8141
	
	INPUT_DEVICE READY_RAW layer141 no141 0 mode8141 0
    MOVEF_F 200.0 VLV_TIME_5
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB142 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB142:
    CALL SENSOR.READRAWVALUE VGV_RIGHT_SENSOR 0.0 VGV_W
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VGV_W '%g' 99 S.0
    CALL LCD.TEXT 1.0 0.0 0.0 2.0 S.0
    DATA8 layer147
	DATA8 no147
	DATA8 mode8147
	
	MOVEF_8 VGV_RIGHT_SENSOR no147
	SUB8 no147 1 no147
	DIV8 no147 4 layer147
	MATH MOD8 no147 4 no147

	MOVEF_8 1.0 mode8147
	
	INPUT_DEVICE READY_RAW layer147 no147 0 mode8147 0
    JR_LTEQF VGV_W 30.0 else148_1
    STRINGS DUPLICATE 'True' VGV_TAKE_RIGHT
    STRINGS DUPLICATE 'True' VGV_RED
  else148_1:
  endif148:
  else139_3:
  endif139:
    CALL EQ_STRING VGV_RED 'False' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else149_1
    CALL SENSOR.READRAWVALUE VGV_LEFT_SENSOR 0.0 VGV_R
    CALL LCD.CLEAR
    STRINGS VALUE_FORMATTED VGV_R '%g' 99 S.0
    CALL LCD.TEXT 1.0 0.0 0.0 2.0 S.0
    DATA32 milliseconds155
	MOVEF_32 1000.0 milliseconds155
	DATA32 timer155
	TIMER_WAIT milliseconds155 timer155
	TIMER_READY timer155
    JR_LTEQF VGV_R 140.0 else156_1
    STRINGS DUPLICATE 'True' VGV_RED
    JR endif156
  else156_1:
    JR_LTEQF VGV_R 80.0 else156_2
    STRINGS DUPLICATE 'True' VGV_RED
    WRITE32 ENDSUB_F_KICK_WATER_0:CALLSUB157 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_KICK_WATER_0
CALLSUB157:
    JR endif156
  else156_2:
    DATA8 layer158
	DATA8 no158
	DATA8 mode8158
	
	MOVEF_8 VGV_LEFT_SENSOR no158
	SUB8 no158 1 no158
	DIV8 no158 4 layer158
	MATH MOD8 no158 4 no158

	MOVEF_8 4.0 mode8158
	
	INPUT_DEVICE READY_RAW layer158 no158 0 mode8158 0
    STRINGS DUPLICATE VGV_RIGHT_MOTOR VLV_MOTOR_11
    MULF VGV_RIGHT_FORWARD -1.0 VLV_FORWARD_11
    MOVEF_F 20.0 VLV_DEG_11
    MOVEF_F 20.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE 'False' VLV_ACCELERATION_11
    STRINGS DUPLICATE 'False' VLV_ZAME_11
    STRINGS DUPLICATE 'True' VLV_TO_STOP_11
    WRITE32 ENDSUB_F_MOVE_MOTOR_7:CALLSUB160 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_7
CALLSUB160:
    CALL SENSOR.READRAWVALUE VGV_LEFT_SENSOR 0.0 VGV_W
    DATA8 layer162
	DATA8 no162
	DATA8 mode8162
	
	MOVEF_8 VGV_LEFT_SENSOR no162
	SUB8 no162 1 no162
	DIV8 no162 4 layer162
	MATH MOD8 no162 4 no162

	MOVEF_8 1.0 mode8162
	
	INPUT_DEVICE READY_RAW layer162 no162 0 mode8162 0
    MOVEF_8 20.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
	OUTPUT_START 0 2
    DATA32 milliseconds164
	MOVEF_32 500.0 milliseconds164
	DATA32 timer164
	TIMER_WAIT milliseconds164 timer164
	TIMER_READY timer164
    OUTPUT_POWER 0 2 0
	OUTPUT_STOP 0 2 1
    JR_LTEQF VGV_W 60.0 else166_1
    STRINGS DUPLICATE 'True' VGV_RED
    STRINGS DUPLICATE 'True' VGV_TAKE_LEFT
  else166_1:
  endif166:
  else156_3:
  endif156:
    JR endif149
  else149_1:
    WRITE32 ENDSUB_F_BEEP_0:CALLSUB167 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BEEP_0
CALLSUB167:
  else149_2:
  endif149:
    CALL EQ_STRING VGV_TAKE_LEFT 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else168_1
    MOVEF_F 30.0 VLV_BASE_POWER_8
    MOVEF_F 20.0 VLV_MIN_POWER_8
    MOVEF_F 60.0 VLV_DEG_8
    MOVEF_F -1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB170 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB170:
    MOVEF_F 30.0 VLV_BASE_POWER_12
    MOVEF_F 20.0 VLV_MIN_POWER_12
    MOVEF_F 60.0 VLV_DEG_12
    MOVEF_F -1.0 VLV_COEF_12
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB171 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB171:
    OUTPUT_POWER 0 2 0
	OUTPUT_STOP 0 2 1
    STRINGS DUPLICATE VGV_LEFT_MOTOR VLV_MOTOR_11
    MULF VGV_LEFT_FORWARD -1.0 VLV_FORWARD_11
    MOVEF_F 90.0 VLV_DEG_11
    MOVEF_F 20.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE 'False' VLV_ACCELERATION_11
    STRINGS DUPLICATE 'True' VLV_ZAME_11
    STRINGS DUPLICATE 'True' VLV_TO_STOP_11
    WRITE32 ENDSUB_F_MOVE_MOTOR_7:CALLSUB174 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_7
CALLSUB174:
    CALL MOTOR.SCHEDULE VGV_GRABBER_MOTOR 50.0 0.0 170.0 0.0 'True' 

	DATA8 layer175
	DATA8 nos175
	DATA8 busy175
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_GRABBER_MOTOR layer175 nos175
	JR_EQ8 0 nos175 motornotbusy175
  motorwaiting175:
	OUTPUT_TEST layer175 nos175 busy175
	JR_EQ8 busy175 0 motornotbusy175
	SLEEP
	JR motorwaiting175
  motornotbusy175:
    MOVEF_F 30.0 VLV_BASE_POWER_8
    MOVEF_F 20.0 VLV_MIN_POWER_8
    MOVEF_F 40.0 VLV_DEG_8
    MOVEF_F 1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB176 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB176:
    MOVEF_F 30.0 VLV_BASE_POWER_12
    MOVEF_F 20.0 VLV_MIN_POWER_12
    MOVEF_F 40.0 VLV_DEG_12
    MOVEF_F 1.0 VLV_COEF_12
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB177 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB177:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB178 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB178:
    CALL MOTOR.SCHEDULE VGV_GRABBER_MOTOR 50.0 0.0 110.0 0.0 'True' 

	DATA8 layer179
	DATA8 nos179
	DATA8 busy179
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_GRABBER_MOTOR layer179 nos179
	JR_EQ8 0 nos179 motornotbusy179
  motorwaiting179:
	OUTPUT_TEST layer179 nos179 busy179
	JR_EQ8 busy179 0 motornotbusy179
	SLEEP
	JR motorwaiting179
  motornotbusy179:
    MOVEF_F 30.0 VLV_BASE_POWER_8
    MOVEF_F 20.0 VLV_MIN_POWER_8
    MOVEF_F 40.0 VLV_DEG_8
    MOVEF_F -1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB180 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB180:
    MOVEF_F 30.0 VLV_BASE_POWER_12
    MOVEF_F 20.0 VLV_MIN_POWER_12
    MOVEF_F 40.0 VLV_DEG_12
    MOVEF_F -1.0 VLV_COEF_12
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB181 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB181:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB182 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB182:
    MOVEF_F 200.0 VLV_TIME_5
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB183 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB183:
    STRINGS DUPLICATE VGV_LEFT_MOTOR VLV_MOTOR_11
    MOVEF_F VGV_LEFT_FORWARD VLV_FORWARD_11
    MOVEF_F 90.0 VLV_DEG_11
    MOVEF_F 20.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE 'True' VLV_ACCELERATION_11
    STRINGS DUPLICATE 'False' VLV_ZAME_11
    STRINGS DUPLICATE 'True' VLV_TO_STOP_11
    WRITE32 ENDSUB_F_MOVE_MOTOR_7:CALLSUB184 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_7
CALLSUB184:
    MOVEF_F 30.0 VLV_POWER_1
    WRITE32 ENDSUB_F_MOVEMENT_INIT_1:CALLSUB185 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVEMENT_INIT_1
CALLSUB185:
    DATA32 milliseconds186
	MOVEF_32 1000.0 milliseconds186
	DATA32 timer186
	TIMER_WAIT milliseconds186 timer186
	TIMER_READY timer186
    WRITE32 ENDSUB_F_STOP_0:CALLSUB187 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB187:
    JR endif168
  else168_1:
    CALL EQ_STRING VGV_TAKE_RIGHT 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else168_2
    MOVEF_F 30.0 VLV_BASE_POWER_8
    MOVEF_F 20.0 VLV_MIN_POWER_8
    MOVEF_F 60.0 VLV_DEG_8
    MOVEF_F -1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB189 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB189:
    MOVEF_F 30.0 VLV_BASE_POWER_12
    MOVEF_F 20.0 VLV_MIN_POWER_12
    MOVEF_F 60.0 VLV_DEG_12
    MOVEF_F -1.0 VLV_COEF_12
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB190 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB190:
    OUTPUT_POWER 0 1 0
	OUTPUT_STOP 0 1 1
    STRINGS DUPLICATE VGV_RIGHT_MOTOR VLV_MOTOR_11
    MULF VGV_RIGHT_FORWARD -1.0 VLV_FORWARD_11
    MOVEF_F 90.0 VLV_DEG_11
    MOVEF_F 20.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE 'False' VLV_ACCELERATION_11
    STRINGS DUPLICATE 'True' VLV_ZAME_11
    STRINGS DUPLICATE 'True' VLV_TO_STOP_11
    WRITE32 ENDSUB_F_MOVE_MOTOR_7:CALLSUB193 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_7
CALLSUB193:
    CALL MOTOR.SCHEDULE VGV_GRABBER_MOTOR 50.0 0.0 170.0 0.0 'True' 

	DATA8 layer194
	DATA8 nos194
	DATA8 busy194
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_GRABBER_MOTOR layer194 nos194
	JR_EQ8 0 nos194 motornotbusy194
  motorwaiting194:
	OUTPUT_TEST layer194 nos194 busy194
	JR_EQ8 busy194 0 motornotbusy194
	SLEEP
	JR motorwaiting194
  motornotbusy194:
    MOVEF_F 30.0 VLV_BASE_POWER_8
    MOVEF_F 20.0 VLV_MIN_POWER_8
    MOVEF_F 40.0 VLV_DEG_8
    MOVEF_F 1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB195 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB195:
    MOVEF_F 30.0 VLV_BASE_POWER_12
    MOVEF_F 20.0 VLV_MIN_POWER_12
    MOVEF_F 40.0 VLV_DEG_12
    MOVEF_F 1.0 VLV_COEF_12
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB196 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB196:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB197 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB197:
    CALL MOTOR.SCHEDULE VGV_GRABBER_MOTOR 50.0 0.0 110.0 0.0 'True' 

	DATA8 layer198
	DATA8 nos198
	DATA8 busy198
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_GRABBER_MOTOR layer198 nos198
	JR_EQ8 0 nos198 motornotbusy198
  motorwaiting198:
	OUTPUT_TEST layer198 nos198 busy198
	JR_EQ8 busy198 0 motornotbusy198
	SLEEP
	JR motorwaiting198
  motornotbusy198:
    MOVEF_F 30.0 VLV_BASE_POWER_8
    MOVEF_F 20.0 VLV_MIN_POWER_8
    MOVEF_F 40.0 VLV_DEG_8
    MOVEF_F -1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB199 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB199:
    MOVEF_F 30.0 VLV_BASE_POWER_12
    MOVEF_F 20.0 VLV_MIN_POWER_12
    MOVEF_F 40.0 VLV_DEG_12
    MOVEF_F -1.0 VLV_COEF_12
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB200 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB200:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB201 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB201:
    MOVEF_F 200.0 VLV_TIME_5
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB202 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB202:
    STRINGS DUPLICATE VGV_RIGHT_MOTOR VLV_MOTOR_11
    MOVEF_F VGV_RIGHT_FORWARD VLV_FORWARD_11
    MOVEF_F 90.0 VLV_DEG_11
    MOVEF_F 20.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE 'True' VLV_ACCELERATION_11
    STRINGS DUPLICATE 'False' VLV_ZAME_11
    STRINGS DUPLICATE 'True' VLV_TO_STOP_11
    WRITE32 ENDSUB_F_MOVE_MOTOR_7:CALLSUB203 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_7
CALLSUB203:
    MOVEF_F 30.0 VLV_POWER_1
    WRITE32 ENDSUB_F_MOVEMENT_INIT_1:CALLSUB204 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVEMENT_INIT_1
CALLSUB204:
    DATA32 milliseconds205
	MOVEF_32 1000.0 milliseconds205
	DATA32 timer205
	TIMER_WAIT milliseconds205 timer205
	TIMER_READY timer205
    WRITE32 ENDSUB_F_STOP_0:CALLSUB206 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB206:
  else168_2:
  endif168:
    MOVEF_F 30.0 VLV_BASE_POWER_8
    MOVEF_F 20.0 VLV_MIN_POWER_8
    MOVEF_F 110.0 VLV_DEG_8
    MOVEF_F -1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB207 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB207:
    OUTPUT_POWER 0 1 0
	OUTPUT_STOP 0 1 1
    STRINGS DUPLICATE VGV_RIGHT_MOTOR VLV_MOTOR_11
    MULF VGV_RIGHT_FORWARD -1.0 VLV_FORWARD_11
    MOVEF_F 360.0 VLV_DEG_11
    MOVEF_F 30.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE 'False' VLV_ACCELERATION_11
    STRINGS DUPLICATE 'False' VLV_ZAME_11
    STRINGS DUPLICATE 'True' VLV_TO_STOP_11
    WRITE32 ENDSUB_F_MOVE_MOTOR_7:CALLSUB210 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_7
CALLSUB210:
    MOVEF_F -40.0 VLV_POWER_1
    WRITE32 ENDSUB_F_MOVEMENT_INIT_1:CALLSUB211 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVEMENT_INIT_1
CALLSUB211:
    MOVEF_F 1000.0 VLV_TIME_5
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB212 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB212:
    MOVEF_F 40.0 VLV_BASE_POWER_8
    MOVEF_F 20.0 VLV_MIN_POWER_8
    MOVEF_F 120.0 VLV_DEG_8
    MOVEF_F 1.0 VLV_COEF_8
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB213 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB213:
    MOVEF_F 185.0 VLV_DEG_10
    MOVEF_F 40.0 VLV_POWER_10
    WRITE32 ENDSUB_F_FORWARD_DEG_2:CALLSUB214 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_FORWARD_DEG_2
CALLSUB214:
    MOVEF_F 40.0 VLV_BASE_POWER_12
    MOVEF_F 20.0 VLV_MIN_POWER_12
    MOVEF_F 120.0 VLV_DEG_12
    MOVEF_F 1.0 VLV_COEF_12
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB215 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB215:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB216 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB216:
    MOVEF_F 200.0 VLV_TIME_5
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB217 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB217:
    CALL SENSOR.READRAWVALUE VGV_RIGHT_SENSOR 0.0 VGV_R
    JR_LTEQF VGV_R 160.0 else219_1
    JR endif219
  else219_1:
    JR_LTEQF VGV_R 80.0 else219_2
    WRITE32 ENDSUB_F_KICK_WATER_0:CALLSUB220 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_KICK_WATER_0
CALLSUB220:
    JR endif219
  else219_2:
    DATA8 layer221
	DATA8 no221
	DATA8 mode8221
	
	MOVEF_8 VGV_RIGHT_SENSOR no221
	SUB8 no221 1 no221
	DIV8 no221 4 layer221
	MATH MOD8 no221 4 no221

	MOVEF_8 4.0 mode8221
	
	INPUT_DEVICE READY_RAW layer221 no221 0 mode8221 0
    MOVEF_F 200.0 VLV_TIME_5
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB222 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB222:
    CALL SENSOR.READRAWVALUE VGV_RIGHT_SENSOR 0.0 VGV_W
    DATA8 layer224
	DATA8 no224
	DATA8 mode8224
	
	MOVEF_8 VGV_RIGHT_SENSOR no224
	SUB8 no224 1 no224
	DIV8 no224 4 layer224
	MATH MOD8 no224 4 no224

	MOVEF_8 1.0 mode8224
	
	INPUT_DEVICE READY_RAW layer224 no224 0 mode8224 0
    JR_LTEQF VGV_W 45.0 else225_1
    STRINGS DUPLICATE 'True' VGV_TAKE_CHEM_IN_YELLOW
  else225_1:
  endif225:
  else219_3:
  endif219:
    STRINGS DUPLICATE VGV_RIGHT_MOTOR VLV_MOTOR_11
    MOVEF_F VGV_RIGHT_FORWARD VLV_FORWARD_11
    MOVEF_F 260.0 VLV_DEG_11
    MOVEF_F 30.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE 'True' VLV_ACCELERATION_11
    STRINGS DUPLICATE 'True' VLV_ZAME_11
    STRINGS DUPLICATE 'True' VLV_TO_STOP_11
    WRITE32 ENDSUB_F_MOVE_MOTOR_7:CALLSUB226 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_7
CALLSUB226:
    STRINGS DUPLICATE VGV_LEFT_MOTOR VLV_MOTOR_11
    MOVEF_F VGV_LEFT_FORWARD VLV_FORWARD_11
    MOVEF_F 260.0 VLV_DEG_11
    MOVEF_F 30.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE 'True' VLV_ACCELERATION_11
    STRINGS DUPLICATE 'False' VLV_ZAME_11
    STRINGS DUPLICATE 'False' VLV_TO_STOP_11
    WRITE32 ENDSUB_F_MOVE_MOTOR_7:CALLSUB227 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_7
CALLSUB227:
    MOVEF_F 30.0 VLV_BASE_POWER_12
    MOVEF_F 20.0 VLV_MIN_POWER_12
    MOVEF_F 165.0 VLV_DEG_12
    MOVEF_F 1.0 VLV_COEF_12
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB228 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB228:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB229 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB229:
    CALL SENSOR.READRAWVALUE VGV_LEFT_SENSOR 0.0 VGV_R
    JR_LTEQF VGV_R 180.0 else231_1
    JR endif231
  else231_1:
    JR_LTEQF VGV_R 100.0 else231_2
    WRITE32 ENDSUB_F_KICK_WATER_0:CALLSUB232 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_KICK_WATER_0
CALLSUB232:
    JR endif231
  else231_2:
    CALL SENSOR.READRAWVALUE VGV_ULTRASONIC 0.0 VGV_ULTRA
    JR_GTEQF VGV_ULTRA 70.0 else234_1
    WRITE32 ENDSUB_F_TAKE_CHEM_ON_LEFT_0:CALLSUB235 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_TAKE_CHEM_ON_LEFT_0
CALLSUB235:
  else234_1:
  endif234:
  else231_3:
  endif231:
    MOVEF_F 100.0 VLV_DEG_10
    MOVEF_F 30.0 VLV_POWER_10
    WRITE32 ENDSUB_F_FORWARD_DEG_2:CALLSUB236 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_FORWARD_DEG_2
CALLSUB236:
    WRITE32 ENDSUB_F_RESET_0:CALLSUB237 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RESET_0
CALLSUB237:
  while238:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.1
    MULF F.1 VGV_LEFT_FORWARD F.0
    JR_GTEQF F.0 300.0 endwhile238
  whilebody238:
    MOVEF_F 103.0 VLV_A_3
    WRITE32 ENDSUB_F_ULTRA_LINE_1:CALLSUB241 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ULTRA_LINE_1
CALLSUB241:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.1
    MULF F.1 VGV_LEFT_FORWARD F.0
    JR_LTF F.0 300.0 whilebody238
  endwhile238:
    MULF 40.0 VGV_LEFT_FORWARD F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
    MULF 40.0 VGV_RIGHT_FORWARD F.0
    MOVEF_8 F.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
    DATA32 milliseconds248
	MOVEF_32 1000.0 milliseconds248
	DATA32 timer248
	TIMER_WAIT milliseconds248 timer248
	TIMER_READY timer248
    WRITE32 ENDSUB_F_STOP_0:CALLSUB249 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB249:
RETSUB_F_MAIN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MAIN_0:
SUB_F_MOVEMENT_INIT_1:
    MULF VLV_POWER_1 VGV_LEFT_FORWARD F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
	OUTPUT_START 0 1
    MULF VLV_POWER_1 VGV_RIGHT_FORWARD F.0
    MOVEF_8 F.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
	OUTPUT_START 0 2
RETSUB_F_MOVEMENT_INIT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MOVEMENT_INIT_1:
SUB_F_LINE_1:
    JR_NEQF VLV_L_2 -100.0 else254_1
    CALL SENSOR.READPERCENT VGV_LINE F.2
    SUBF F.2 VGV_LEFT_MIN F.1
    SUBF VGV_LEFT_MAX VGV_LEFT_MIN F.2
    DATAF tmpf258
    DATA8 flag258
    DIVF F.1 F.2 tmpf258
    CP_EQF 0.0 F.2 flag258
    SELECTF flag258 0.0 tmpf258 F.0

    MULF F.0 150.0 VLV_L_2
  else254_1:
  endif254:
    SUBF VLV_L_2 50.0 VLV_ERR_2
    SUBF VLV_ERR_2 VGV_LAST_ERR VLV_DIFF_2
    MULF VLV_ERR_2 1.0 F.0
    MULF VLV_DIFF_2 7.0 F.1
    ADDF F.0 F.1 VLV_DELTA_2
    SUBF 80.0 VLV_DELTA_2 VLV_LEFT_POWER_2
    ADDF 80.0 VLV_DELTA_2 VLV_RIGHT_POWER_2
    MULF VLV_LEFT_POWER_2 VGV_LEFT_FORWARD F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
    MULF VLV_RIGHT_POWER_2 VGV_RIGHT_FORWARD F.0
    MOVEF_8 F.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
    MOVEF_F VLV_ERR_2 VGV_LAST_ERR
    DATA32 milliseconds271
	MOVEF_32 5.0 milliseconds271
	DATA32 timer271
	TIMER_WAIT milliseconds271 timer271
	TIMER_READY timer271
RETSUB_F_LINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE_1:
SUB_F_ULTRA_LINE_1:
    CALL SENSOR.READRAWVALUE VGV_ULTRASONIC 0.0 VLV_L_3
    SUBF VLV_L_3 VLV_A_3 VLV_ERR_3
    SUBF VLV_ERR_3 VGV_LAST_ERR VLV_DIFF_3
    MULF VLV_ERR_3 0.8 F.0
    MULF VLV_DIFF_3 0.0 F.1
    ADDF F.0 F.1 VLV_DELTA_3
    SUBF 40.0 VLV_DELTA_3 VLV_LEFT_POWER_3
    ADDF 40.0 VLV_DELTA_3 VLV_RIGHT_POWER_3
    MULF VLV_LEFT_POWER_3 VGV_LEFT_FORWARD F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
    MULF VLV_RIGHT_POWER_3 VGV_RIGHT_FORWARD F.0
    MOVEF_8 F.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
    MOVEF_F VLV_ERR_3 VGV_LAST_ERR
RETSUB_F_ULTRA_LINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ULTRA_LINE_1:
SUB_F_DELAY_1:
    DATA32 milliseconds284
	MOVEF_32 VLV_TIME_5 milliseconds284
	DATA32 timer284
	TIMER_WAIT milliseconds284 timer284
	TIMER_READY timer284
RETSUB_F_DELAY_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DELAY_1:
SUB_F_RESET_0:
    OUTPUT_CLR_COUNT 0 1
    OUTPUT_CLR_COUNT 0 2
RETSUB_F_RESET_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RESET_0:
SUB_F_STOP_0:
    OUTPUT_POWER 0 3 0
	OUTPUT_STOP 0 3 1
RETSUB_F_STOP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_STOP_0:
SUB_F_SPEEDUP_4:
    MOVEF_F 15.0 VLV_POWER_1
    WRITE32 ENDSUB_F_MOVEMENT_INIT_1:CALLSUB288 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVEMENT_INIT_1
CALLSUB288:
    WRITE32 ENDSUB_F_RESET_0:CALLSUB289 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RESET_0
CALLSUB289:
    MOVEF_F 0.0 VLV_L_8
  while290:
    JR_GTEQF VLV_L_8 VLV_DEG_8 endwhile290
  whilebody290:
    DATAF tmpf291
    DATA8 flag291
    DIVF VLV_L_8 VLV_DEG_8 tmpf291
    CP_EQF 0.0 VLV_DEG_8 flag291
    SELECTF flag291 0.0 tmpf291 VLV_P_8

    SUBF VLV_BASE_POWER_8 VLV_MIN_POWER_8 F.1
    MULF F.1 VLV_P_8 F.0
    ADDF F.0 VLV_MIN_POWER_8 VLV_POWER_8
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.1
    MULF F.1 VGV_LEFT_FORWARD F.0
    MULF F.0 VLV_COEF_8 VLV_L_8
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.1
    MULF F.1 VGV_RIGHT_FORWARD F.0
    MULF F.0 VLV_COEF_8 VLV_R_8
    SUBF VLV_L_8 VLV_R_8 F.0
    MULF F.0 VLV_P_8 VLV_DELTA_8
    SUBF VLV_POWER_8 VLV_DELTA_8 VLV_LEFT_POWER_8
    ADDF VLV_POWER_8 VLV_DELTA_8 VLV_RIGHT_POWER_8
    MULF VLV_LEFT_POWER_8 VGV_LEFT_FORWARD F.1
    MULF F.1 VLV_COEF_8 F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
    MULF VLV_RIGHT_POWER_8 VGV_RIGHT_FORWARD F.1
    MULF F.1 VLV_COEF_8 F.0
    MOVEF_8 F.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
    JR_LTF VLV_L_8 VLV_DEG_8 whilebody290
  endwhile290:
RETSUB_F_SPEEDUP_4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SPEEDUP_4:
SUB_F_SYNC_1:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    MULF F.0 VGV_LEFT_FORWARD VLV_L_9
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.0
    MULF F.0 VGV_RIGHT_FORWARD VLV_R_9
    SUBF VLV_L_9 VLV_R_9 VLV_ERR_9
    SUBF VLV_ERR_9 VGV_LAST_ERR VLV_DIFF_9
    MULF VLV_ERR_9 1.0 F.0
    MULF VLV_DIFF_9 0.0 F.1
    ADDF F.0 F.1 VLV_DELTA_9
    SUBF VLV_POWER_9 VLV_DELTA_9 VLV_LEFT_POWER_9
    ADDF VLV_POWER_9 VLV_DELTA_9 VLV_RIGHT_POWER_9
    MULF VLV_LEFT_POWER_9 VGV_LEFT_FORWARD F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
    MULF VLV_RIGHT_POWER_9 VGV_RIGHT_FORWARD F.0
    MOVEF_8 F.0 setSpeedB
	OUTPUT_SPEED 0 2 setSpeedB
    MOVEF_F VLV_ERR_9 VGV_LAST_ERR
RETSUB_F_SYNC_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SYNC_1:
SUB_F_FORWARD_DEG_2:
    MOVEF_F VLV_POWER_10 VLV_POWER_1
    WRITE32 ENDSUB_F_MOVEMENT_INIT_1:CALLSUB326 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVEMENT_INIT_1
CALLSUB326:
    WRITE32 ENDSUB_F_RESET_0:CALLSUB327 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RESET_0
CALLSUB327:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    MULF F.0 VGV_LEFT_FORWARD VLV_L_10
  while330:
    JR_GTEQF VLV_L_10 VLV_DEG_10 endwhile330
  whilebody330:
    MOVEF_F VLV_POWER_10 VLV_POWER_9
    WRITE32 ENDSUB_F_SYNC_1:CALLSUB331 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SYNC_1
CALLSUB331:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    MULF F.0 VGV_LEFT_FORWARD VLV_L_10
    JR_LTF VLV_L_10 VLV_DEG_10 whilebody330
  endwhile330:
RETSUB_F_FORWARD_DEG_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_FORWARD_DEG_2:
SUB_F_MOVE_MOTOR_7:
    MOVEF_F VLV_DEG_11 VLV_NORMAL_DEG_11
    MOVEF_F 0.0 VLV_ACCELERATION_DEG_11
    MOVEF_F 0.0 VLV_ZAME_DEG_11
    CALL EQ_STRING VLV_ACCELERATION_11 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else334_1
    DATAF tmpf336
    DATA8 flag336
    DIVF VLV_DEG_11 2.0 tmpf336
    CP_EQF 0.0 2.0 flag336
    SELECTF flag336 0.0 tmpf336 F.1

    MATH FLOOR F.1 F.0
    DATA8 flag338
	CP_LTF F.0 120.0 flag338
	SELECTF flag338 F.0 120.0 VLV_ACCELERATION_DEG_11
    SUBF VLV_NORMAL_DEG_11 VLV_ACCELERATION_DEG_11 VLV_NORMAL_DEG_11
  else334_1:
  endif334:
    CALL EQ_STRING VLV_ZAME_11 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else340_1
    DATAF tmpf342
    DATA8 flag342
    DIVF VLV_DEG_11 2.0 tmpf342
    CP_EQF 0.0 2.0 flag342
    SELECTF flag342 0.0 tmpf342 F.1

    MATH FLOOR F.1 F.0
    DATA8 flag344
	CP_LTF F.0 120.0 flag344
	SELECTF flag344 F.0 120.0 VLV_ZAME_DEG_11
    SUBF VLV_NORMAL_DEG_11 VLV_ZAME_DEG_11 VLV_NORMAL_DEG_11
  else340_1:
  endif340:
    CALL EQ_STRING VLV_ACCELERATION_11 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else346_1
    CALL MOTOR.RESETCOUNT VLV_MOTOR_11
    MOVEF_F 0.0 VLV_M_11
  while349:
    JR_GTEQF VLV_M_11 VLV_ACCELERATION_DEG_11 endwhile349
  whilebody349:
    DATAF tmpf350
    DATA8 flag350
    DIVF VLV_M_11 VLV_ACCELERATION_DEG_11 tmpf350
    CP_EQF 0.0 VLV_ACCELERATION_DEG_11 flag350
    SELECTF flag350 0.0 tmpf350 VLV_P_11

    SUBF VLV_MAX_POWER_11 10.0 F.1
    MULF F.1 VLV_P_11 F.0
    ADDF F.0 10.0 VLV_POWER_11
    MULF VLV_POWER_11 VLV_FORWARD_11 F.0
    CALL MOTOR.START VLV_MOTOR_11 F.0
    CALL MOTOR.GETCOUNT VLV_MOTOR_11 F.0
    MULF F.0 VLV_FORWARD_11 VLV_M_11
    DATA32 milliseconds358
	MOVEF_32 10.0 milliseconds358
	DATA32 timer358
	TIMER_WAIT milliseconds358 timer358
	TIMER_READY timer358
    JR_LTF VLV_M_11 VLV_ACCELERATION_DEG_11 whilebody349
  endwhile349:
  else346_1:
  endif346:
    JR_LTEQF VLV_NORMAL_DEG_11 0.0 else359_1
    MULF VLV_MAX_POWER_11 VLV_FORWARD_11 F.0
    CALL MOTOR.SCHEDULE VLV_MOTOR_11 F.0 0.0 VLV_NORMAL_DEG_11 0.0 'False' 

	DATA8 layer361
	DATA8 nos361
	DATA8 busy361
	CALL MOTORDECODEPORTSDESCRIPTOR VLV_MOTOR_11 layer361 nos361
	JR_EQ8 0 nos361 motornotbusy361
  motorwaiting361:
	OUTPUT_TEST layer361 nos361 busy361
	JR_EQ8 busy361 0 motornotbusy361
	SLEEP
	JR motorwaiting361
  motornotbusy361:
  else359_1:
  endif359:
    CALL EQ_STRING VLV_ZAME_11 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else362_1
    CALL MOTOR.RESETCOUNT VLV_MOTOR_11
    MOVEF_F 0.0 VLV_M_11
  while365:
    JR_GTEQF VLV_M_11 VLV_ZAME_DEG_11 endwhile365
  whilebody365:
    DATAF tmpf366
    DATA8 flag366
    DIVF VLV_M_11 VLV_ZAME_DEG_11 tmpf366
    CP_EQF 0.0 VLV_ZAME_DEG_11 flag366
    SELECTF flag366 0.0 tmpf366 F.0

    SUBF 1.0 F.0 VLV_P_11
    SUBF VLV_MAX_POWER_11 10.0 F.1
    MULF F.1 VLV_P_11 F.0
    ADDF F.0 10.0 VLV_POWER_11
    MULF VLV_POWER_11 VLV_FORWARD_11 F.0
    CALL MOTOR.START VLV_MOTOR_11 F.0
    CALL MOTOR.GETCOUNT VLV_MOTOR_11 F.0
    MULF F.0 VLV_FORWARD_11 VLV_M_11
    DATA32 milliseconds375
	MOVEF_32 10.0 milliseconds375
	DATA32 timer375
	TIMER_WAIT milliseconds375 timer375
	TIMER_READY timer375
    JR_LTF VLV_M_11 VLV_ZAME_DEG_11 whilebody365
  endwhile365:
  else362_1:
  endif362:
    CALL EQ_STRING VLV_TO_STOP_11 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else376_1
    CALL MOTOR.STOP VLV_MOTOR_11 'True'
  else376_1:
  endif376:
RETSUB_F_MOVE_MOTOR_7:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MOVE_MOTOR_7:
SUB_F_ZAME_4:
    MOVEF_F VLV_BASE_POWER_12 VLV_POWER_1
    WRITE32 ENDSUB_F_MOVEMENT_INIT_1:CALLSUB379 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVEMENT_INIT_1
CALLSUB379:
    WRITE32 ENDSUB_F_RESET_0:CALLSUB380 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RESET_0
CALLSUB380:
    MOVEF_F 0.0 VLV_L_12
  while381:
    JR_GTEQF VLV_L_12 VLV_DEG_12 endwhile381
  whilebody381:
    DATAF tmpf382
    DATA8 flag382
    DIVF VLV_L_12 VLV_DEG_12 tmpf382
    CP_EQF 0.0 VLV_DEG_12 flag382
    SELECTF flag382 0.0 tmpf382 VLV_P_12

    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.1
    MULF F.1 VGV_LEFT_FORWARD F.0
    MULF F.0 VLV_COEF_12 VLV_L_12
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.1
    MULF F.1 VGV_RIGHT_FORWARD F.0
    MULF F.0 VLV_COEF_12 VLV_R_12
    SUBF VLV_L_12 VLV_R_12 F.0
    SUBF 1.0 VLV_P_12 F.1
    MULF F.0 F.1 VLV_DELTA_12
    SUBF VLV_BASE_POWER_12 VLV_MIN_POWER_12 F.1
    SUBF 1.0 VLV_P_12 F.2
    MULF F.1 F.2 F.0
    ADDF F.0 VLV_MIN_POWER_12 VLV_POWER_12
    SUBF VLV_POWER_12 VLV_DELTA_12 VLV_LEFT_POWER_12
    ADDF VLV_POWER_12 VLV_DELTA_12 VLV_RIGHT_POWER_12
    MULF VLV_LEFT_POWER_12 VGV_LEFT_FORWARD F.1
    MULF F.1 VLV_COEF_12 F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
    MULF VLV_RIGHT_POWER_12 VGV_RIGHT_FORWARD F.1
    MULF F.1 VLV_COEF_12 F.0
    MOVEF_8 F.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
    DATA32 milliseconds404
	MOVEF_32 10.0 milliseconds404
	DATA32 timer404
	TIMER_WAIT milliseconds404 timer404
	TIMER_READY timer404
    JR_LTF VLV_L_12 VLV_DEG_12 whilebody381
  endwhile381:
RETSUB_F_ZAME_4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ZAME_4:
SUB_F_READ_PERCENT_1:
    CALL SENSOR.READPERCENT VGV_LINE F.2
    SUBF F.2 VGV_LEFT_MIN F.1
    SUBF VGV_LEFT_MAX VGV_LEFT_MIN F.2
    DATAF tmpf408
    DATA8 flag408
    DIVF F.1 F.2 tmpf408
    CP_EQF 0.0 F.2 flag408
    SELECTF flag408 0.0 tmpf408 F.0

    MULF F.0 100.0 VLV_PERCENT_13
RETSUB_F_READ_PERCENT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_READ_PERCENT_1:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall EV3.BATTERYVOLTAGE  // F
{
	OUT_F voltage
	UI_READ GET_VBATT voltage
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall NE_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 flag 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0 flag isnotequal
isequal:
	STRINGS DUPLICATE 'False' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'True' result
	RETURN
}
subcall EQ_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 FLAG 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
isequal:
	STRINGS DUPLICATE 'True' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'False' result
	RETURN
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
