DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VLV_BASE_POWER_9
DATAF VLV_MIN_POWER_9
DATAF VLV_DEG_9
DATAF VLV_COEF_9
DATAF VLV_BASE_POWER_13
DATAF VLV_MIN_POWER_13
DATAF VLV_DEG_13
DATAF VLV_COEF_13
DATAS VLV_MOTOR_12 252
DATAF VLV_FORWARD_12
DATAF VLV_DEG_12
DATAF VLV_MAX_POWER_12
DATAS VLV_ACCELERATION_12 252
DATAS VLV_ZAME_12 252
DATAS VLV_TO_STOP_12 252
DATAF VLV_TIME_6
DATAF VLV_PERCENT_14
DATAF VLV_POWER_1
DATAF VLV_A_4
DATAF VLV_DEG_11
DATAF VLV_POWER_11
DATAF VLV_POWER_10
DATAF VLV_L_3
DATAS VLV_TO_DELAY_15 252
DATAF VLV_L_2
DATAF VGV_P
DATAF VGV_LINE
DATAF VGV_LEFT_SENSOR
DATAF VGV_RIGHT_SENSOR
DATAF VGV_ULTRASONIC
DATAS VGV_LEFT_MOTOR 252
DATAS VGV_RIGHT_MOTOR 252
DATAS VGV_NOT_INVERTED_MOTOR 252
DATAS VGV_MOTORS 252
DATAF VGV_LEFT_FORWARD
DATAF VGV_RIGHT_FORWARD
DATAS VGV_GRABBER_MOTOR 252
DATAS VGV_WATER_MOTOR 252
DATAF VGV_LEFT_MAX
DATAF VGV_LEFT_MIN
DATAF VGV_LAST_ERR
DATAF VGV_LAST_MOTOR_ERR
DATAS VGV_BROWN 252
DATAS VGV_RED 252
DATAS VGV_YELLOW 252
DATAS VGV_GREEN 252
DATAS VGV_BLUE 252
DATAS VGV_WHITE 252
DATAS VGV_BROWN_MAN 252
DATAS VGV_RED_MAN 252
DATAS VGV_YELLOW_MAN 252
DATAS VGV_GREEN_MAN 252
DATAS VGV_BLUE_MAN 252
DATAS VGV_WHITE_MAN 252
DATAF VGV_WATER_STATE
DATAF VGV_FIRE_COUNT
DATAF VGV_MEN_COUNT
DATAS VGV_CHEM 252
DATAS VGV_TAKE_CHEM_IN_YELLOW 252
DATAF VLV_ERR_2
DATAF VLV_DIFF_2
DATAF VLV_DELTA_2
DATAF VLV_LEFT_POWER_2
DATAF VLV_RIGHT_POWER_2
DATAF VLV_ERR_3
DATAF VLV_DIFF_3
DATAF VLV_DELTA_3
DATAF VLV_LEFT_POWER_3
DATAF VLV_RIGHT_POWER_3
DATAF VLV_L_4
DATAF VLV_ERR_4
DATAF VLV_DIFF_4
DATAF VLV_DELTA_4
DATAF VLV_LEFT_POWER_4
DATAF VLV_RIGHT_POWER_4
DATAF VLV_L_9
DATAF VLV_P_9
DATAF VLV_POWER_9
DATAF VLV_R_9
DATAF VLV_DELTA_9
DATAF VLV_LEFT_POWER_9
DATAF VLV_RIGHT_POWER_9
DATAF VLV_L_10
DATAF VLV_R_10
DATAF VLV_ERR_10
DATAF VLV_DIFF_10
DATAF VLV_DELTA_10
DATAF VLV_LEFT_POWER_10
DATAF VLV_RIGHT_POWER_10
DATAF VLV_L_11
DATAF VLV_NORMAL_DEG_12
DATAF VLV_ACCELERATION_DEG_12
DATAF VLV_ZAME_DEG_12
DATAF VLV_M_12
DATAF VLV_P_12
DATAF VLV_POWER_12
DATAF VLV_L_13
DATAF VLV_P_13
DATAF VLV_R_13
DATAF VLV_DELTA_13
DATAF VLV_POWER_13
DATAF VLV_LEFT_POWER_13
DATAF VLV_RIGHT_POWER_13
DATAF VLV_MILLISECOND_15
DATAF VLV_SECONDS_15
DATAF VLV_MINUTES_15
DATAS VLV_TEXT_15 252

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VLV_BASE_POWER_9
    MOVEF_F 0.0 VLV_MIN_POWER_9
    MOVEF_F 0.0 VLV_DEG_9
    MOVEF_F 0.0 VLV_COEF_9
    MOVEF_F 0.0 VLV_BASE_POWER_13
    MOVEF_F 0.0 VLV_MIN_POWER_13
    MOVEF_F 0.0 VLV_DEG_13
    MOVEF_F 0.0 VLV_COEF_13
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_FORWARD_12
    MOVEF_F 0.0 VLV_DEG_12
    MOVEF_F 0.0 VLV_MAX_POWER_12
    STRINGS DUPLICATE '' VLV_ACCELERATION_12
    STRINGS DUPLICATE '' VLV_ZAME_12
    STRINGS DUPLICATE '' VLV_TO_STOP_12
    MOVEF_F 0.0 VLV_TIME_6
    MOVEF_F 0.0 VLV_PERCENT_14
    MOVEF_F 0.0 VLV_POWER_1
    MOVEF_F 0.0 VLV_A_4
    MOVEF_F 0.0 VLV_DEG_11
    MOVEF_F 0.0 VLV_POWER_11
    MOVEF_F 0.0 VLV_POWER_10
    MOVEF_F 0.0 VLV_L_3
    STRINGS DUPLICATE '' VLV_TO_DELAY_15
    MOVEF_F 0.0 VLV_L_2
    MOVEF_F 0.0 VGV_P
    MOVEF_F 0.0 VGV_LINE
    MOVEF_F 0.0 VGV_LEFT_SENSOR
    MOVEF_F 0.0 VGV_RIGHT_SENSOR
    MOVEF_F 0.0 VGV_ULTRASONIC
    STRINGS DUPLICATE '' VGV_LEFT_MOTOR
    STRINGS DUPLICATE '' VGV_RIGHT_MOTOR
    STRINGS DUPLICATE '' VGV_NOT_INVERTED_MOTOR
    STRINGS DUPLICATE '' VGV_MOTORS
    MOVEF_F 0.0 VGV_LEFT_FORWARD
    MOVEF_F 0.0 VGV_RIGHT_FORWARD
    STRINGS DUPLICATE '' VGV_GRABBER_MOTOR
    STRINGS DUPLICATE '' VGV_WATER_MOTOR
    MOVEF_F 0.0 VGV_LEFT_MAX
    MOVEF_F 0.0 VGV_LEFT_MIN
    MOVEF_F 0.0 VGV_LAST_ERR
    MOVEF_F 0.0 VGV_LAST_MOTOR_ERR
    STRINGS DUPLICATE '' VGV_BROWN
    STRINGS DUPLICATE '' VGV_RED
    STRINGS DUPLICATE '' VGV_YELLOW
    STRINGS DUPLICATE '' VGV_GREEN
    STRINGS DUPLICATE '' VGV_BLUE
    STRINGS DUPLICATE '' VGV_WHITE
    STRINGS DUPLICATE '' VGV_BROWN_MAN
    STRINGS DUPLICATE '' VGV_RED_MAN
    STRINGS DUPLICATE '' VGV_YELLOW_MAN
    STRINGS DUPLICATE '' VGV_GREEN_MAN
    STRINGS DUPLICATE '' VGV_BLUE_MAN
    STRINGS DUPLICATE '' VGV_WHITE_MAN
    MOVEF_F 0.0 VGV_WATER_STATE
    MOVEF_F 0.0 VGV_FIRE_COUNT
    MOVEF_F 0.0 VGV_MEN_COUNT
    STRINGS DUPLICATE '' VGV_CHEM
    STRINGS DUPLICATE '' VGV_TAKE_CHEM_IN_YELLOW
    MOVEF_F 0.0 VLV_ERR_2
    MOVEF_F 0.0 VLV_DIFF_2
    MOVEF_F 0.0 VLV_DELTA_2
    MOVEF_F 0.0 VLV_LEFT_POWER_2
    MOVEF_F 0.0 VLV_RIGHT_POWER_2
    MOVEF_F 0.0 VLV_ERR_3
    MOVEF_F 0.0 VLV_DIFF_3
    MOVEF_F 0.0 VLV_DELTA_3
    MOVEF_F 0.0 VLV_LEFT_POWER_3
    MOVEF_F 0.0 VLV_RIGHT_POWER_3
    MOVEF_F 0.0 VLV_L_4
    MOVEF_F 0.0 VLV_ERR_4
    MOVEF_F 0.0 VLV_DIFF_4
    MOVEF_F 0.0 VLV_DELTA_4
    MOVEF_F 0.0 VLV_LEFT_POWER_4
    MOVEF_F 0.0 VLV_RIGHT_POWER_4
    MOVEF_F 0.0 VLV_L_9
    MOVEF_F 0.0 VLV_P_9
    MOVEF_F 0.0 VLV_POWER_9
    MOVEF_F 0.0 VLV_R_9
    MOVEF_F 0.0 VLV_DELTA_9
    MOVEF_F 0.0 VLV_LEFT_POWER_9
    MOVEF_F 0.0 VLV_RIGHT_POWER_9
    MOVEF_F 0.0 VLV_L_10
    MOVEF_F 0.0 VLV_R_10
    MOVEF_F 0.0 VLV_ERR_10
    MOVEF_F 0.0 VLV_DIFF_10
    MOVEF_F 0.0 VLV_DELTA_10
    MOVEF_F 0.0 VLV_LEFT_POWER_10
    MOVEF_F 0.0 VLV_RIGHT_POWER_10
    MOVEF_F 0.0 VLV_L_11
    MOVEF_F 0.0 VLV_NORMAL_DEG_12
    MOVEF_F 0.0 VLV_ACCELERATION_DEG_12
    MOVEF_F 0.0 VLV_ZAME_DEG_12
    MOVEF_F 0.0 VLV_M_12
    MOVEF_F 0.0 VLV_P_12
    MOVEF_F 0.0 VLV_POWER_12
    MOVEF_F 0.0 VLV_L_13
    MOVEF_F 0.0 VLV_P_13
    MOVEF_F 0.0 VLV_R_13
    MOVEF_F 0.0 VLV_DELTA_13
    MOVEF_F 0.0 VLV_POWER_13
    MOVEF_F 0.0 VLV_LEFT_POWER_13
    MOVEF_F 0.0 VLV_RIGHT_POWER_13
    MOVEF_F 0.0 VLV_MILLISECOND_15
    MOVEF_F 0.0 VLV_SECONDS_15
    MOVEF_F 0.0 VLV_MINUTES_15
    STRINGS DUPLICATE '' VLV_TEXT_15
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VLV_BASE_POWER_9
    MOVEF_F 0.0 VLV_MIN_POWER_9
    MOVEF_F 0.0 VLV_DEG_9
    MOVEF_F 0.0 VLV_COEF_9
    MOVEF_F 0.0 VLV_BASE_POWER_13
    MOVEF_F 0.0 VLV_MIN_POWER_13
    MOVEF_F 0.0 VLV_DEG_13
    MOVEF_F 0.0 VLV_COEF_13
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_FORWARD_12
    MOVEF_F 0.0 VLV_DEG_12
    MOVEF_F 0.0 VLV_MAX_POWER_12
    STRINGS DUPLICATE '' VLV_ACCELERATION_12
    STRINGS DUPLICATE '' VLV_ZAME_12
    STRINGS DUPLICATE '' VLV_TO_STOP_12
    MOVEF_F 0.0 VLV_TIME_6
    MOVEF_F 0.0 VLV_PERCENT_14
    MOVEF_F 0.0 VLV_POWER_1
    MOVEF_F 0.0 VLV_A_4
    MOVEF_F 0.0 VLV_DEG_11
    MOVEF_F 0.0 VLV_POWER_11
    MOVEF_F 0.0 VLV_POWER_10
    MOVEF_F 0.0 VLV_L_3
    STRINGS DUPLICATE '' VLV_TO_DELAY_15
    MOVEF_F 0.0 VLV_L_2
    MOVEF_F 0.0 VGV_P
    MOVEF_F 0.0 VGV_LINE
    MOVEF_F 0.0 VGV_LEFT_SENSOR
    MOVEF_F 0.0 VGV_RIGHT_SENSOR
    MOVEF_F 0.0 VGV_ULTRASONIC
    STRINGS DUPLICATE '' VGV_LEFT_MOTOR
    STRINGS DUPLICATE '' VGV_RIGHT_MOTOR
    STRINGS DUPLICATE '' VGV_NOT_INVERTED_MOTOR
    STRINGS DUPLICATE '' VGV_MOTORS
    MOVEF_F 0.0 VGV_LEFT_FORWARD
    MOVEF_F 0.0 VGV_RIGHT_FORWARD
    STRINGS DUPLICATE '' VGV_GRABBER_MOTOR
    STRINGS DUPLICATE '' VGV_WATER_MOTOR
    MOVEF_F 0.0 VGV_LEFT_MAX
    MOVEF_F 0.0 VGV_LEFT_MIN
    MOVEF_F 0.0 VGV_LAST_ERR
    MOVEF_F 0.0 VGV_LAST_MOTOR_ERR
    STRINGS DUPLICATE '' VGV_BROWN
    STRINGS DUPLICATE '' VGV_RED
    STRINGS DUPLICATE '' VGV_YELLOW
    STRINGS DUPLICATE '' VGV_GREEN
    STRINGS DUPLICATE '' VGV_BLUE
    STRINGS DUPLICATE '' VGV_WHITE
    STRINGS DUPLICATE '' VGV_BROWN_MAN
    STRINGS DUPLICATE '' VGV_RED_MAN
    STRINGS DUPLICATE '' VGV_YELLOW_MAN
    STRINGS DUPLICATE '' VGV_GREEN_MAN
    STRINGS DUPLICATE '' VGV_BLUE_MAN
    STRINGS DUPLICATE '' VGV_WHITE_MAN
    MOVEF_F 0.0 VGV_WATER_STATE
    MOVEF_F 0.0 VGV_FIRE_COUNT
    MOVEF_F 0.0 VGV_MEN_COUNT
    STRINGS DUPLICATE '' VGV_CHEM
    STRINGS DUPLICATE '' VGV_TAKE_CHEM_IN_YELLOW
    MOVEF_F 1.0 VGV_LINE
    MOVEF_F 2.0 VGV_LEFT_SENSOR
    MOVEF_F 3.0 VGV_RIGHT_SENSOR
    MOVEF_F 4.0 VGV_ULTRASONIC
    STRINGS DUPLICATE 'A' VGV_LEFT_MOTOR
    STRINGS DUPLICATE 'B' VGV_RIGHT_MOTOR
    STRINGS DUPLICATE 'B' VGV_NOT_INVERTED_MOTOR
    CALL TEXT.APPEND VGV_LEFT_MOTOR VGV_RIGHT_MOTOR VGV_MOTORS
    MOVEF_F -1.0 VGV_LEFT_FORWARD
    MOVEF_F 1.0 VGV_RIGHT_FORWARD
    STRINGS DUPLICATE 'C' VGV_GRABBER_MOTOR
    STRINGS DUPLICATE 'D' VGV_WATER_MOTOR
    MOVEF_F 40.0 VGV_LEFT_MAX
    MOVEF_F 5.0 VGV_LEFT_MIN
    MOVEF_F 0.0 VGV_LAST_ERR
    MOVEF_F 0.0 VGV_LAST_MOTOR_ERR
    STRINGS DUPLICATE 'False' VGV_BROWN
    STRINGS DUPLICATE 'False' VGV_RED
    STRINGS DUPLICATE 'False' VGV_YELLOW
    STRINGS DUPLICATE 'False' VGV_GREEN
    STRINGS DUPLICATE 'False' VGV_BLUE
    STRINGS DUPLICATE 'False' VGV_WHITE
    STRINGS DUPLICATE 'False' VGV_BROWN_MAN
    STRINGS DUPLICATE 'False' VGV_RED_MAN
    STRINGS DUPLICATE 'False' VGV_YELLOW_MAN
    STRINGS DUPLICATE 'False' VGV_GREEN_MAN
    STRINGS DUPLICATE 'False' VGV_BLUE_MAN
    STRINGS DUPLICATE 'False' VGV_WHITE_MAN
    MOVEF_F 0.0 VGV_WATER_STATE
    MOVEF_F 0.0 VGV_FIRE_COUNT
    MOVEF_F 0.0 VGV_MEN_COUNT
    STRINGS DUPLICATE 'False' VGV_CHEM
    STRINGS DUPLICATE 'False' VGV_TAKE_CHEM_IN_YELLOW
    DATA8 layer1
	DATA8 no1
	DATA8 mode81
	
	MOVEF_8 VGV_LINE no1
	SUB8 no1 1 no1
	DIV8 no1 4 layer1
	MATH MOD8 no1 4 no1

	MOVEF_8 0.0 mode81
	
	INPUT_DEVICE READY_RAW layer1 no1 0 mode81 0
    DATA8 layer2
	DATA8 no2
	DATA8 mode82
	
	MOVEF_8 VGV_LEFT_SENSOR no2
	SUB8 no2 1 no2
	DIV8 no2 4 layer2
	MATH MOD8 no2 4 no2

	MOVEF_8 1.0 mode82
	
	INPUT_DEVICE READY_RAW layer2 no2 0 mode82 0
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 VGV_RIGHT_SENSOR no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 1.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 VGV_ULTRASONIC no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    CALL EV3.BATTERYVOLTAGE F.0
    JR_GTEQF F.0 8.0 else5_1
    WRITE32 ENDSUB_F_BEEP_0:CALLSUB7 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BEEP_0
CALLSUB7:
    SOUND_READY
    WRITE32 ENDSUB_F_BEEP_0:CALLSUB9 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BEEP_0
CALLSUB9:
  else5_1:
  endif5:
    CALL MOTOR.START VGV_WATER_MOTOR 50.0
    DATA32 milliseconds11
	MOVEF_32 700.0 milliseconds11
	DATA32 timer11
	TIMER_WAIT milliseconds11 timer11
	TIMER_READY timer11
    CALL MOTOR.STOP VGV_WATER_MOTOR 'True'
    MOVEF_F 30.0 VLV_BASE_POWER_9
    MOVEF_F 30.0 VLV_MIN_POWER_9
    MOVEF_F 40.0 VLV_DEG_9
    MOVEF_F -1.0 VLV_COEF_9
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB13 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB13:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB14 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB14:
    CALL MOTOR.SCHEDULE VGV_WATER_MOTOR -50.0 0.0 90.0 0.0 'True' 

	DATA8 layer15
	DATA8 nos15
	DATA8 busy15
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_WATER_MOTOR layer15 nos15
	JR_EQ8 0 nos15 motornotbusy15
  motorwaiting15:
	OUTPUT_TEST layer15 nos15 busy15
	JR_EQ8 busy15 0 motornotbusy15
	SLEEP
	JR motorwaiting15
  motornotbusy15:
    MOVEF_F 30.0 VLV_BASE_POWER_9
    MOVEF_F 30.0 VLV_MIN_POWER_9
    MOVEF_F 100.0 VLV_DEG_9
    MOVEF_F -1.0 VLV_COEF_9
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB16 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB16:
ENDTHREAD:
    RETURN
SUB_F_BEEP_0:
    CALL SPEAKER.TONE 100.0 500.0 200.0
RETSUB_F_BEEP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BEEP_0:
SUB_F_KICK_WATER_0:
    JR_NEQF VGV_WATER_STATE 0.0 else18_1
    CALL MOTOR.START VGV_WATER_MOTOR 50.0
    DATA32 milliseconds20
	MOVEF_32 500.0 milliseconds20
	DATA32 timer20
	TIMER_WAIT milliseconds20 timer20
	TIMER_READY timer20
    CALL MOTOR.STOP VGV_WATER_MOTOR 'True'
    CALL MOTOR.SCHEDULE VGV_WATER_MOTOR -50.0 0.0 20.0 0.0 'True' 

	DATA8 layer22
	DATA8 nos22
	DATA8 busy22
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_WATER_MOTOR layer22 nos22
	JR_EQ8 0 nos22 motornotbusy22
  motorwaiting22:
	OUTPUT_TEST layer22 nos22 busy22
	JR_EQ8 busy22 0 motornotbusy22
	SLEEP
	JR motorwaiting22
  motornotbusy22:
    MOVEF_F 1.0 VGV_WATER_STATE
    JR endif18
  else18_1:
    CALL MOTOR.START VGV_WATER_MOTOR -50.0
    DATA32 milliseconds24
	MOVEF_32 500.0 milliseconds24
	DATA32 timer24
	TIMER_WAIT milliseconds24 timer24
	TIMER_READY timer24
    CALL MOTOR.STOP VGV_WATER_MOTOR 'True'
    CALL MOTOR.SCHEDULE VGV_WATER_MOTOR 50.0 0.0 20.0 0.0 'True' 

	DATA8 layer26
	DATA8 nos26
	DATA8 busy26
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_WATER_MOTOR layer26 nos26
	JR_EQ8 0 nos26 motornotbusy26
  motorwaiting26:
	OUTPUT_TEST layer26 nos26 busy26
	JR_EQ8 busy26 0 motornotbusy26
	SLEEP
	JR motorwaiting26
  motornotbusy26:
  else18_2:
  endif18:
RETSUB_F_KICK_WATER_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_KICK_WATER_0:
SUB_F_TAKE_CHEM_ON_RIGHT_0:
    MOVEF_F 30.0 VLV_BASE_POWER_9
    MOVEF_F 20.0 VLV_MIN_POWER_9
    MOVEF_F 50.0 VLV_DEG_9
    MOVEF_F -1.0 VLV_COEF_9
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB27 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB27:
    MOVEF_F 30.0 VLV_BASE_POWER_13
    MOVEF_F 20.0 VLV_MIN_POWER_13
    MOVEF_F 50.0 VLV_DEG_13
    MOVEF_F -1.0 VLV_COEF_13
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB28 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB28:
    OUTPUT_POWER 0 1 0
	OUTPUT_STOP 0 1 1
    STRINGS DUPLICATE VGV_RIGHT_MOTOR VLV_MOTOR_12
    MULF VGV_RIGHT_FORWARD -1.0 VLV_FORWARD_12
    MOVEF_F 100.0 VLV_DEG_12
    MOVEF_F 30.0 VLV_MAX_POWER_12
    STRINGS DUPLICATE 'False' VLV_ACCELERATION_12
    STRINGS DUPLICATE 'True' VLV_ZAME_12
    STRINGS DUPLICATE 'True' VLV_TO_STOP_12
    WRITE32 ENDSUB_F_MOVE_MOTOR_7:CALLSUB31 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_7
CALLSUB31:
    CALL MOTOR.SCHEDULE VGV_GRABBER_MOTOR 50.0 0.0 170.0 0.0 'True' 

	DATA8 layer32
	DATA8 nos32
	DATA8 busy32
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_GRABBER_MOTOR layer32 nos32
	JR_EQ8 0 nos32 motornotbusy32
  motorwaiting32:
	OUTPUT_TEST layer32 nos32 busy32
	JR_EQ8 busy32 0 motornotbusy32
	SLEEP
	JR motorwaiting32
  motornotbusy32:
    MOVEF_F 30.0 VLV_BASE_POWER_9
    MOVEF_F 20.0 VLV_MIN_POWER_9
    MOVEF_F 50.0 VLV_DEG_9
    MOVEF_F 1.0 VLV_COEF_9
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB33 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB33:
    MOVEF_F 30.0 VLV_BASE_POWER_13
    MOVEF_F 20.0 VLV_MIN_POWER_13
    MOVEF_F 50.0 VLV_DEG_13
    MOVEF_F 1.0 VLV_COEF_13
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB34 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB34:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB35 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB35:
    CALL MOTOR.SCHEDULE VGV_GRABBER_MOTOR 50.0 0.0 110.0 0.0 'True' 

	DATA8 layer36
	DATA8 nos36
	DATA8 busy36
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_GRABBER_MOTOR layer36 nos36
	JR_EQ8 0 nos36 motornotbusy36
  motorwaiting36:
	OUTPUT_TEST layer36 nos36 busy36
	JR_EQ8 busy36 0 motornotbusy36
	SLEEP
	JR motorwaiting36
  motornotbusy36:
    MOVEF_F 30.0 VLV_BASE_POWER_9
    MOVEF_F 20.0 VLV_MIN_POWER_9
    MOVEF_F 60.0 VLV_DEG_9
    MOVEF_F -1.0 VLV_COEF_9
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB37 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB37:
    MOVEF_F 30.0 VLV_BASE_POWER_13
    MOVEF_F 15.0 VLV_MIN_POWER_13
    MOVEF_F 60.0 VLV_DEG_13
    MOVEF_F -1.0 VLV_COEF_13
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB38 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB38:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB39 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB39:
    MOVEF_F 300.0 VLV_TIME_6
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB40 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB40:
    STRINGS DUPLICATE VGV_RIGHT_MOTOR VLV_MOTOR_12
    MOVEF_F VGV_RIGHT_FORWARD VLV_FORWARD_12
    MOVEF_F 85.0 VLV_DEG_12
    MOVEF_F 30.0 VLV_MAX_POWER_12
    STRINGS DUPLICATE 'True' VLV_ACCELERATION_12
    STRINGS DUPLICATE 'True' VLV_ZAME_12
    STRINGS DUPLICATE 'True' VLV_TO_STOP_12
    WRITE32 ENDSUB_F_MOVE_MOTOR_7:CALLSUB41 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_7
CALLSUB41:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB42 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB42:
    MOVEF_F 300.0 VLV_TIME_6
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB43 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB43:
    MOVEF_F 30.0 VLV_BASE_POWER_9
    MOVEF_F 20.0 VLV_MIN_POWER_9
    MOVEF_F 100.0 VLV_DEG_9
    MOVEF_F 1.0 VLV_COEF_9
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB44 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB44:
    STRINGS DUPLICATE 'True' VGV_CHEM
RETSUB_F_TAKE_CHEM_ON_RIGHT_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TAKE_CHEM_ON_RIGHT_0:
SUB_F_TAKE_CHEM_ON_LEFT_0:
    MOVEF_F 30.0 VLV_BASE_POWER_9
    MOVEF_F 20.0 VLV_MIN_POWER_9
    MOVEF_F 50.0 VLV_DEG_9
    MOVEF_F -1.0 VLV_COEF_9
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB45 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB45:
    MOVEF_F 30.0 VLV_BASE_POWER_13
    MOVEF_F 20.0 VLV_MIN_POWER_13
    MOVEF_F 50.0 VLV_DEG_13
    MOVEF_F -1.0 VLV_COEF_13
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB46 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB46:
    OUTPUT_POWER 0 2 0
	OUTPUT_STOP 0 2 1
    STRINGS DUPLICATE VGV_LEFT_MOTOR VLV_MOTOR_12
    MULF VGV_LEFT_FORWARD -1.0 VLV_FORWARD_12
    MOVEF_F 100.0 VLV_DEG_12
    MOVEF_F 30.0 VLV_MAX_POWER_12
    STRINGS DUPLICATE 'False' VLV_ACCELERATION_12
    STRINGS DUPLICATE 'True' VLV_ZAME_12
    STRINGS DUPLICATE 'True' VLV_TO_STOP_12
    WRITE32 ENDSUB_F_MOVE_MOTOR_7:CALLSUB49 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_7
CALLSUB49:
    CALL MOTOR.SCHEDULE VGV_GRABBER_MOTOR 50.0 0.0 170.0 0.0 'True' 

	DATA8 layer50
	DATA8 nos50
	DATA8 busy50
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_GRABBER_MOTOR layer50 nos50
	JR_EQ8 0 nos50 motornotbusy50
  motorwaiting50:
	OUTPUT_TEST layer50 nos50 busy50
	JR_EQ8 busy50 0 motornotbusy50
	SLEEP
	JR motorwaiting50
  motornotbusy50:
    MOVEF_F 30.0 VLV_BASE_POWER_9
    MOVEF_F 20.0 VLV_MIN_POWER_9
    MOVEF_F 50.0 VLV_DEG_9
    MOVEF_F 1.0 VLV_COEF_9
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB51 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB51:
    MOVEF_F 30.0 VLV_BASE_POWER_13
    MOVEF_F 20.0 VLV_MIN_POWER_13
    MOVEF_F 50.0 VLV_DEG_13
    MOVEF_F 1.0 VLV_COEF_13
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB52 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB52:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB53 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB53:
    CALL MOTOR.SCHEDULE VGV_GRABBER_MOTOR 50.0 0.0 110.0 0.0 'True' 

	DATA8 layer54
	DATA8 nos54
	DATA8 busy54
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_GRABBER_MOTOR layer54 nos54
	JR_EQ8 0 nos54 motornotbusy54
  motorwaiting54:
	OUTPUT_TEST layer54 nos54 busy54
	JR_EQ8 busy54 0 motornotbusy54
	SLEEP
	JR motorwaiting54
  motornotbusy54:
    MOVEF_F 30.0 VLV_BASE_POWER_9
    MOVEF_F 20.0 VLV_MIN_POWER_9
    MOVEF_F 60.0 VLV_DEG_9
    MOVEF_F -1.0 VLV_COEF_9
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB55 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB55:
    MOVEF_F 30.0 VLV_BASE_POWER_13
    MOVEF_F 15.0 VLV_MIN_POWER_13
    MOVEF_F 60.0 VLV_DEG_13
    MOVEF_F -1.0 VLV_COEF_13
    WRITE32 ENDSUB_F_ZAME_4:CALLSUB56 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_4
CALLSUB56:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB57 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB57:
    MOVEF_F 300.0 VLV_TIME_6
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB58 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB58:
    STRINGS DUPLICATE VGV_LEFT_MOTOR VLV_MOTOR_12
    MOVEF_F VGV_LEFT_FORWARD VLV_FORWARD_12
    MOVEF_F 85.0 VLV_DEG_12
    MOVEF_F 30.0 VLV_MAX_POWER_12
    STRINGS DUPLICATE 'True' VLV_ACCELERATION_12
    STRINGS DUPLICATE 'True' VLV_ZAME_12
    STRINGS DUPLICATE 'True' VLV_TO_STOP_12
    WRITE32 ENDSUB_F_MOVE_MOTOR_7:CALLSUB59 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_7
CALLSUB59:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB60 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB60:
    MOVEF_F 300.0 VLV_TIME_6
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB61 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB61:
    MOVEF_F 30.0 VLV_BASE_POWER_9
    MOVEF_F 20.0 VLV_MIN_POWER_9
    MOVEF_F 100.0 VLV_DEG_9
    MOVEF_F 1.0 VLV_COEF_9
    WRITE32 ENDSUB_F_SPEEDUP_4:CALLSUB62 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_4
CALLSUB62:
    STRINGS DUPLICATE 'True' VGV_CHEM
RETSUB_F_TAKE_CHEM_ON_LEFT_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_TAKE_CHEM_ON_LEFT_0:
SUB_F_MOVEMENT_INIT_1:
    MULF VLV_POWER_1 VGV_LEFT_FORWARD F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
	OUTPUT_START 0 1
    MULF VLV_POWER_1 VGV_RIGHT_FORWARD F.0
    MOVEF_8 F.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
	OUTPUT_START 0 2
RETSUB_F_MOVEMENT_INIT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MOVEMENT_INIT_1:
SUB_F_LINE_1:
    JR_NEQF VLV_L_2 -100.0 else67_1
    CALL SENSOR.READPERCENT VGV_LINE F.2
    SUBF F.2 VGV_LEFT_MIN F.1
    SUBF VGV_LEFT_MAX VGV_LEFT_MIN F.2
    DATAF tmpf71
    DATA8 flag71
    DIVF F.1 F.2 tmpf71
    CP_EQF 0.0 F.2 flag71
    SELECTF flag71 0.0 tmpf71 F.0

    MULF F.0 150.0 VLV_L_2
  else67_1:
  endif67:
    SUBF VLV_L_2 50.0 VLV_ERR_2
    SUBF VLV_ERR_2 VGV_LAST_ERR VLV_DIFF_2
    MULF VLV_ERR_2 1.0 F.0
    MULF VLV_DIFF_2 7.0 F.1
    ADDF F.0 F.1 VLV_DELTA_2
    SUBF 80.0 VLV_DELTA_2 VLV_LEFT_POWER_2
    ADDF 80.0 VLV_DELTA_2 VLV_RIGHT_POWER_2
    MULF VLV_LEFT_POWER_2 VGV_LEFT_FORWARD F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
    MULF VLV_RIGHT_POWER_2 VGV_RIGHT_FORWARD F.0
    MOVEF_8 F.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
    MOVEF_F VLV_ERR_2 VGV_LAST_ERR
    DATA32 milliseconds84
	MOVEF_32 5.0 milliseconds84
	DATA32 timer84
	TIMER_WAIT milliseconds84 timer84
	TIMER_READY timer84
RETSUB_F_LINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE_1:
SUB_F_LINE_SLOW_1:
    JR_NEQF VLV_L_3 -100.0 else85_1
    CALL SENSOR.READPERCENT VGV_LINE F.2
    SUBF F.2 VGV_LEFT_MIN F.1
    SUBF VGV_LEFT_MAX VGV_LEFT_MIN F.2
    DATAF tmpf89
    DATA8 flag89
    DIVF F.1 F.2 tmpf89
    CP_EQF 0.0 F.2 flag89
    SELECTF flag89 0.0 tmpf89 F.0

    MULF F.0 150.0 VLV_L_3
  else85_1:
  endif85:
    SUBF VLV_L_3 50.0 VLV_ERR_3
    SUBF VLV_ERR_3 VGV_LAST_ERR VLV_DIFF_3
    MULF VLV_ERR_3 0.5 F.0
    MULF VLV_DIFF_3 0.0 F.1
    ADDF F.0 F.1 VLV_DELTA_3
    SUBF 30.0 VLV_DELTA_3 VLV_LEFT_POWER_3
    ADDF 30.0 VLV_DELTA_3 VLV_RIGHT_POWER_3
    MULF VLV_LEFT_POWER_3 VGV_LEFT_FORWARD F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
    MULF VLV_RIGHT_POWER_3 VGV_RIGHT_FORWARD F.0
    MOVEF_8 F.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
    MOVEF_F VLV_ERR_3 VGV_LAST_ERR
    DATA32 milliseconds102
	MOVEF_32 5.0 milliseconds102
	DATA32 timer102
	TIMER_WAIT milliseconds102 timer102
	TIMER_READY timer102
RETSUB_F_LINE_SLOW_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE_SLOW_1:
SUB_F_ULTRA_LINE_1:
    CALL SENSOR.READRAWVALUE VGV_ULTRASONIC 0.0 VLV_L_4
    SUBF VLV_L_4 VLV_A_4 VLV_ERR_4
    SUBF VLV_ERR_4 VGV_LAST_ERR VLV_DIFF_4
    MULF VLV_ERR_4 0.8 F.0
    MULF VLV_DIFF_4 0.0 F.1
    ADDF F.0 F.1 VLV_DELTA_4
    SUBF 40.0 VLV_DELTA_4 VLV_LEFT_POWER_4
    ADDF 40.0 VLV_DELTA_4 VLV_RIGHT_POWER_4
    MULF VLV_LEFT_POWER_4 VGV_LEFT_FORWARD F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
    MULF VLV_RIGHT_POWER_4 VGV_RIGHT_FORWARD F.0
    MOVEF_8 F.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
    MOVEF_F VLV_ERR_4 VGV_LAST_ERR
RETSUB_F_ULTRA_LINE_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ULTRA_LINE_1:
SUB_F_DELAY_1:
    DATA32 milliseconds115
	MOVEF_32 VLV_TIME_6 milliseconds115
	DATA32 timer115
	TIMER_WAIT milliseconds115 timer115
	TIMER_READY timer115
RETSUB_F_DELAY_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DELAY_1:
SUB_F_RESET_0:
    OUTPUT_CLR_COUNT 0 1
    OUTPUT_CLR_COUNT 0 2
RETSUB_F_RESET_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RESET_0:
SUB_F_STOP_0:
    OUTPUT_POWER 0 3 0
	OUTPUT_STOP 0 3 1
RETSUB_F_STOP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_STOP_0:
SUB_F_SPEEDUP_4:
    MOVEF_F 15.0 VLV_POWER_1
    WRITE32 ENDSUB_F_MOVEMENT_INIT_1:CALLSUB119 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVEMENT_INIT_1
CALLSUB119:
    WRITE32 ENDSUB_F_RESET_0:CALLSUB120 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RESET_0
CALLSUB120:
    MOVEF_F 0.0 VLV_L_9
  while121:
    JR_GTEQF VLV_L_9 VLV_DEG_9 endwhile121
  whilebody121:
    DATAF tmpf122
    DATA8 flag122
    DIVF VLV_L_9 VLV_DEG_9 tmpf122
    CP_EQF 0.0 VLV_DEG_9 flag122
    SELECTF flag122 0.0 tmpf122 VLV_P_9

    SUBF VLV_BASE_POWER_9 VLV_MIN_POWER_9 F.1
    MULF F.1 VLV_P_9 F.0
    ADDF F.0 VLV_MIN_POWER_9 VLV_POWER_9
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.1
    MULF F.1 VGV_LEFT_FORWARD F.0
    MULF F.0 VLV_COEF_9 VLV_L_9
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.1
    MULF F.1 VGV_RIGHT_FORWARD F.0
    MULF F.0 VLV_COEF_9 VLV_R_9
    SUBF VLV_L_9 VLV_R_9 F.0
    MULF F.0 VLV_P_9 VLV_DELTA_9
    SUBF VLV_POWER_9 VLV_DELTA_9 VLV_LEFT_POWER_9
    ADDF VLV_POWER_9 VLV_DELTA_9 VLV_RIGHT_POWER_9
    MULF VLV_LEFT_POWER_9 VGV_LEFT_FORWARD F.1
    MULF F.1 VLV_COEF_9 F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
    MULF VLV_RIGHT_POWER_9 VGV_RIGHT_FORWARD F.1
    MULF F.1 VLV_COEF_9 F.0
    MOVEF_8 F.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
    JR_LTF VLV_L_9 VLV_DEG_9 whilebody121
  endwhile121:
RETSUB_F_SPEEDUP_4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SPEEDUP_4:
SUB_F_SYNC_1:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    MULF F.0 VGV_LEFT_FORWARD VLV_L_10
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.0
    MULF F.0 VGV_RIGHT_FORWARD VLV_R_10
    SUBF VLV_L_10 VLV_R_10 VLV_ERR_10
    SUBF VLV_ERR_10 VGV_LAST_ERR VLV_DIFF_10
    MULF VLV_ERR_10 1.0 F.0
    MULF VLV_DIFF_10 0.0 F.1
    ADDF F.0 F.1 VLV_DELTA_10
    SUBF VLV_POWER_10 VLV_DELTA_10 VLV_LEFT_POWER_10
    ADDF VLV_POWER_10 VLV_DELTA_10 VLV_RIGHT_POWER_10
    MULF VLV_LEFT_POWER_10 VGV_LEFT_FORWARD F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
    MULF VLV_RIGHT_POWER_10 VGV_RIGHT_FORWARD F.0
    MOVEF_8 F.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
    MOVEF_F VLV_ERR_10 VGV_LAST_ERR
RETSUB_F_SYNC_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SYNC_1:
SUB_F_FORWARD_DEG_2:
    MOVEF_F VLV_POWER_11 VLV_POWER_1
    WRITE32 ENDSUB_F_MOVEMENT_INIT_1:CALLSUB157 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVEMENT_INIT_1
CALLSUB157:
    WRITE32 ENDSUB_F_RESET_0:CALLSUB158 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RESET_0
CALLSUB158:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    MULF F.0 VGV_LEFT_FORWARD VLV_L_11
  while161:
    MATH ABS VLV_L_11 F.0
    MATH ABS VLV_DEG_11 F.1
    JR_GTEQF F.0 F.1 endwhile161
  whilebody161:
    MOVEF_F VLV_POWER_11 VLV_POWER_10
    WRITE32 ENDSUB_F_SYNC_1:CALLSUB164 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SYNC_1
CALLSUB164:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    MULF F.0 VGV_LEFT_FORWARD VLV_L_11
    MATH ABS VLV_L_11 F.0
    MATH ABS VLV_DEG_11 F.1
    JR_LTF F.0 F.1 whilebody161
  endwhile161:
RETSUB_F_FORWARD_DEG_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_FORWARD_DEG_2:
SUB_F_MOVE_MOTOR_7:
    MOVEF_F VLV_DEG_12 VLV_NORMAL_DEG_12
    MOVEF_F 0.0 VLV_ACCELERATION_DEG_12
    MOVEF_F 0.0 VLV_ZAME_DEG_12
    CALL EQ_STRING VLV_ACCELERATION_12 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else169_1
    DATAF tmpf171
    DATA8 flag171
    DIVF VLV_DEG_12 2.0 tmpf171
    CP_EQF 0.0 2.0 flag171
    SELECTF flag171 0.0 tmpf171 F.1

    MATH FLOOR F.1 F.0
    DATA8 flag173
	CP_LTF F.0 120.0 flag173
	SELECTF flag173 F.0 120.0 VLV_ACCELERATION_DEG_12
    SUBF VLV_NORMAL_DEG_12 VLV_ACCELERATION_DEG_12 VLV_NORMAL_DEG_12
  else169_1:
  endif169:
    CALL EQ_STRING VLV_ZAME_12 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else175_1
    DATAF tmpf177
    DATA8 flag177
    DIVF VLV_DEG_12 2.0 tmpf177
    CP_EQF 0.0 2.0 flag177
    SELECTF flag177 0.0 tmpf177 F.1

    MATH FLOOR F.1 F.0
    DATA8 flag179
	CP_LTF F.0 120.0 flag179
	SELECTF flag179 F.0 120.0 VLV_ZAME_DEG_12
    SUBF VLV_NORMAL_DEG_12 VLV_ZAME_DEG_12 VLV_NORMAL_DEG_12
  else175_1:
  endif175:
    CALL EQ_STRING VLV_ACCELERATION_12 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else181_1
    CALL MOTOR.RESETCOUNT VLV_MOTOR_12
    MOVEF_F 0.0 VLV_M_12
  while184:
    JR_GTEQF VLV_M_12 VLV_ACCELERATION_DEG_12 endwhile184
  whilebody184:
    DATAF tmpf185
    DATA8 flag185
    DIVF VLV_M_12 VLV_ACCELERATION_DEG_12 tmpf185
    CP_EQF 0.0 VLV_ACCELERATION_DEG_12 flag185
    SELECTF flag185 0.0 tmpf185 VLV_P_12

    SUBF VLV_MAX_POWER_12 10.0 F.1
    MULF F.1 VLV_P_12 F.0
    ADDF F.0 10.0 VLV_POWER_12
    MULF VLV_POWER_12 VLV_FORWARD_12 F.0
    CALL MOTOR.START VLV_MOTOR_12 F.0
    CALL MOTOR.GETCOUNT VLV_MOTOR_12 F.0
    MULF F.0 VLV_FORWARD_12 VLV_M_12
    DATA32 milliseconds193
	MOVEF_32 10.0 milliseconds193
	DATA32 timer193
	TIMER_WAIT milliseconds193 timer193
	TIMER_READY timer193
    JR_LTF VLV_M_12 VLV_ACCELERATION_DEG_12 whilebody184
  endwhile184:
  else181_1:
  endif181:
    JR_LTEQF VLV_NORMAL_DEG_12 0.0 else194_1
    MULF VLV_MAX_POWER_12 VLV_FORWARD_12 F.0
    CALL MOTOR.SCHEDULE VLV_MOTOR_12 F.0 0.0 VLV_NORMAL_DEG_12 0.0 'False' 

	DATA8 layer196
	DATA8 nos196
	DATA8 busy196
	CALL MOTORDECODEPORTSDESCRIPTOR VLV_MOTOR_12 layer196 nos196
	JR_EQ8 0 nos196 motornotbusy196
  motorwaiting196:
	OUTPUT_TEST layer196 nos196 busy196
	JR_EQ8 busy196 0 motornotbusy196
	SLEEP
	JR motorwaiting196
  motornotbusy196:
  else194_1:
  endif194:
    CALL EQ_STRING VLV_ZAME_12 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else197_1
    CALL MOTOR.RESETCOUNT VLV_MOTOR_12
    MOVEF_F 0.0 VLV_M_12
  while200:
    JR_GTEQF VLV_M_12 VLV_ZAME_DEG_12 endwhile200
  whilebody200:
    DATAF tmpf201
    DATA8 flag201
    DIVF VLV_M_12 VLV_ZAME_DEG_12 tmpf201
    CP_EQF 0.0 VLV_ZAME_DEG_12 flag201
    SELECTF flag201 0.0 tmpf201 F.0

    SUBF 1.0 F.0 VLV_P_12
    SUBF VLV_MAX_POWER_12 10.0 F.1
    MULF F.1 VLV_P_12 F.0
    ADDF F.0 10.0 VLV_POWER_12
    MULF VLV_POWER_12 VLV_FORWARD_12 F.0
    CALL MOTOR.START VLV_MOTOR_12 F.0
    CALL MOTOR.GETCOUNT VLV_MOTOR_12 F.0
    MULF F.0 VLV_FORWARD_12 VLV_M_12
    DATA32 milliseconds210
	MOVEF_32 10.0 milliseconds210
	DATA32 timer210
	TIMER_WAIT milliseconds210 timer210
	TIMER_READY timer210
    JR_LTF VLV_M_12 VLV_ZAME_DEG_12 whilebody200
  endwhile200:
  else197_1:
  endif197:
    CALL EQ_STRING VLV_TO_STOP_12 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else211_1
    CALL MOTOR.STOP VLV_MOTOR_12 'True'
  else211_1:
  endif211:
RETSUB_F_MOVE_MOTOR_7:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MOVE_MOTOR_7:
SUB_F_ZAME_4:
    MOVEF_F VLV_BASE_POWER_13 VLV_POWER_1
    WRITE32 ENDSUB_F_MOVEMENT_INIT_1:CALLSUB214 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVEMENT_INIT_1
CALLSUB214:
    WRITE32 ENDSUB_F_RESET_0:CALLSUB215 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RESET_0
CALLSUB215:
    MOVEF_F 0.0 VLV_L_13
  while216:
    JR_GTEQF VLV_L_13 VLV_DEG_13 endwhile216
  whilebody216:
    DATAF tmpf217
    DATA8 flag217
    DIVF VLV_L_13 VLV_DEG_13 tmpf217
    CP_EQF 0.0 VLV_DEG_13 flag217
    SELECTF flag217 0.0 tmpf217 VLV_P_13

    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.1
    MULF F.1 VGV_LEFT_FORWARD F.0
    MULF F.0 VLV_COEF_13 VLV_L_13
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.1
    MULF F.1 VGV_RIGHT_FORWARD F.0
    MULF F.0 VLV_COEF_13 VLV_R_13
    SUBF VLV_L_13 VLV_R_13 F.0
    SUBF 1.0 VLV_P_13 F.1
    MULF F.0 F.1 VLV_DELTA_13
    SUBF VLV_BASE_POWER_13 VLV_MIN_POWER_13 F.1
    SUBF 1.0 VLV_P_13 F.2
    MULF F.1 F.2 F.0
    ADDF F.0 VLV_MIN_POWER_13 VLV_POWER_13
    SUBF VLV_POWER_13 VLV_DELTA_13 VLV_LEFT_POWER_13
    ADDF VLV_POWER_13 VLV_DELTA_13 VLV_RIGHT_POWER_13
    MULF VLV_LEFT_POWER_13 VGV_LEFT_FORWARD F.1
    MULF F.1 VLV_COEF_13 F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
    MULF VLV_RIGHT_POWER_13 VGV_RIGHT_FORWARD F.1
    MULF F.1 VLV_COEF_13 F.0
    MOVEF_8 F.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
    DATA32 milliseconds239
	MOVEF_32 10.0 milliseconds239
	DATA32 timer239
	TIMER_WAIT milliseconds239 timer239
	TIMER_READY timer239
    JR_LTF VLV_L_13 VLV_DEG_13 whilebody216
  endwhile216:
RETSUB_F_ZAME_4:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ZAME_4:
SUB_F_READ_PERCENT_1:
    CALL SENSOR.READPERCENT VGV_LINE F.2
    SUBF F.2 VGV_LEFT_MIN F.1
    SUBF VGV_LEFT_MAX VGV_LEFT_MIN F.2
    DATAF tmpf243
    DATA8 flag243
    DIVF F.1 F.2 tmpf243
    CP_EQF 0.0 F.2 flag243
    SELECTF flag243 0.0 tmpf243 F.0

    MULF F.0 100.0 VLV_PERCENT_14
RETSUB_F_READ_PERCENT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_READ_PERCENT_1:
SUB_F_SHOW_TIME_1:
    TIMER_READ timeMC9tmp
	SUB32 timeMC9tmp timeMC9 timeMC9tmp
	MOVE32_F timeMC9tmp VLV_MILLISECOND_15
    DATAF tmpf246
    DATA8 flag246
    DIVF VLV_MILLISECOND_15 1000.0 tmpf246
    CP_EQF 0.0 1000.0 flag246
    SELECTF flag246 0.0 tmpf246 F.0

    MATH FLOOR F.0 VLV_SECONDS_15
    DATAF tmpf248
    DATA8 flag248
    DIVF VLV_SECONDS_15 60.0 tmpf248
    CP_EQF 0.0 60.0 flag248
    SELECTF flag248 0.0 tmpf248 F.0

    MATH FLOOR F.0 VLV_MINUTES_15
    MATH MOD VLV_SECONDS_15 60.0 VLV_SECONDS_15
    STRINGS VALUE_FORMATTED VLV_MINUTES_15 '%g' 99 S.1
    CALL TEXT.APPEND S.1 ':' S.0
    STRINGS VALUE_FORMATTED VLV_SECONDS_15 '%g' 99 S.1
    CALL TEXT.APPEND S.0 S.1 VLV_TEXT_15
    CALL LCD.CLEAR
    CALL LCD.TEXT 1.0 0.0 0.0 2.0 VLV_TEXT_15
    CALL EQ_STRING VLV_TO_DELAY_15 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else257_1
    MOVEF_F 100000.0 VLV_TIME_6
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB259 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB259:
  else257_1:
  endif257:
RETSUB_F_SHOW_TIME_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SHOW_TIME_1:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall EV3.BATTERYVOLTAGE  // F
{
	OUT_F voltage
	UI_READ GET_VBATT voltage
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall EQ_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 FLAG 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
isequal:
	STRINGS DUPLICATE 'True' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'False' result
	RETURN
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
