lv_base_power_7 = 0
lv_min_power_7 = 0
lv_deg_7 = 0
lv_acceleration_7 = 0
lv_zame_7 = 0
lv_base_power_5 = 0
lv_min_power_5 = 0
lv_deg_5 = 0
lv_acceleration_5 = 0
lv_zame_5 = 0
lv_motor_10 = ""
lv_forward_10 = 0
lv_base_power_10 = 0
lv_min_power_10 = 0
lv_deg_10 = 0
lv_acceleration_10 = 0
lv_zame_10 = 0
lv_base_power_8 = 0
lv_min_power_8 = 0
lv_deg_8 = 0
lv_acceleration_8 = 0
lv_zame_8 = 0
lv_motor_9 = ""
lv_forward_9 = 0
lv_base_power_9 = 0
lv_min_power_9 = 0
lv_deg_9 = 0
lv_acceleration_9 = 0
lv_zame_9 = 0
lv_u_3 = 0
lv_base_power_3 = 0
lv_min_power_3 = 0
lv_degrees_3 = 0
lv_zamed_degrees_3 = 0
lv_power_1 = 0
lv_u_1 = 0
gv_left_motor = ""
gv_right_motor = ""
gv_right_forward = 0
gv_left_forward = 0
gv_not_inversed_motor = ""
gv_grabber_motor = ""
gv_motors = ""
gv_water_motor = ""
gv_left_sensor = 0
gv_right_sensor = 0
gv_line_sensor = 0
gv_ultrasonic = 0
gv_a = 0
gv_p = 0
gv_d = 0
gv_lasterror = 0
gv_integral = 0
gv_p_u = 0
gv_d_u = 0
gv_deg = 0
gv_b = 0
gv_w = 0
gv_brown = ""
gv_red = ""
gv_yellow = ""
gv_green = ""
gv_blue = ""
gv_white = ""
gv_brown_man = ""
gv_red_man = ""
gv_yellow_man = ""
gv_green_man = ""
gv_blue_man = ""
gv_white_man = ""
gv_men_count = 0
gv_chem = ""
gv_fire_count = 0
gv_is_chem_on_right = ""
gv_is_chem_on_left = ""
gv_cubes_count = 0
gv_water_state = 0
gv_object = ""
gv_up_water = ""
gv_1_water = ""
gv_2_water = ""
gv_left_motor = "A"
gv_right_motor = "B"
gv_right_forward = 1
gv_left_forward = - 1
gv_not_inversed_motor = "B"
gv_grabber_motor = "C"
gv_motors = gv_left_motor + gv_right_motor
gv_water_motor = "D"
gv_left_sensor = 2
gv_right_sensor = 3
gv_line_sensor = 1
gv_ultrasonic = 4
gv_a = 0
gv_p = 1
gv_d = 6
gv_lasterror = 0
gv_integral = 0
gv_p_u = 1
gv_d_u = 0
gv_deg = 0
gv_b = 0
gv_w = 0
gv_brown = "False"
gv_red = "False"
gv_yellow = "False"
gv_green = "False"
gv_blue = "False"
gv_white = "False"
gv_brown_man = "False"
gv_red_man = "False"
gv_yellow_man = "False"
gv_green_man = "False"
gv_blue_man = "False"
gv_white_man = "False"
gv_men_count = 0
gv_chem = "False"
gv_fire_count = 0
gv_is_chem_on_right = "False"
gv_is_chem_on_left = "False"
gv_cubes_count = 2
gv_water_state = 0
gv_object = ""
gv_up_water = "True"
gv_1_water = "True"
gv_2_water = "True"
Sensor.SetMode ( gv_line_sensor , 0 )
Sensor.SetMode ( gv_right_sensor , 1 )
Sensor.SetMode ( gv_left_sensor , 1 )
Sensor.SetMode ( gv_ultrasonic , 0 )
If EV3.BatteryVoltage < 8 Then
LCD.Clear ()
LCD.Text ( 1 , 0 , 0 , 1 , "Low battery" )
f_beep_0 ()
f_delay_0 ()
f_beep_0 ()
EndIf
lv_base_power_7 = 30
lv_min_power_7 = 10
lv_deg_7 = 360
lv_acceleration_7 = 100
lv_zame_7 = 100
f_rotate_left_acceleration_5 ()
Sub f_line_0
gv_nowerror = 20 - Sensor.ReadPercent ( 1 )
gv_dif = gv_lasterror - gv_nowerror
gv_integral = ( gv_integral + gv_nowerror ) / 10
gv_derivative = gv_nowerror - gv_lasterror
gv_up = ( ( gv_nowerror * gv_p ) + ( gv_integral * gv_d ) )
Motor.StartPower ( "B" , 40 - gv_up )
Motor.StartPower ( "A" , - 40 - gv_up )
gv_lasterror = gv_nowerror
EndSub
Sub f_ultrasonic_slow_0
gv_nowerror = Sensor.ReadRawValue ( gv_ultrasonic , 0 ) - gv_a
gv_dif = gv_lasterror - gv_nowerror
gv_integral = ( gv_integral + gv_nowerror ) / 10
gv_derivative = gv_nowerror - gv_lasterror
gv_up = ( ( gv_nowerror * gv_p_u ) + ( gv_integral * gv_d_u ) )
Motor.StartPower ( gv_right_motor , ( 20 + gv_up ) * gv_right_forward )
Motor.StartPower ( gv_left_motor , ( 20 - gv_up ) * gv_left_forward )
gv_lasterror = gv_nowerror
EndSub
Sub f_ultrasonic_fast_0
gv_nowerror = Sensor.ReadRawValue ( gv_ultrasonic , 0 ) - gv_a
gv_dif = gv_lasterror - gv_nowerror
gv_integral = ( gv_integral + gv_nowerror ) / 10
gv_derivative = gv_nowerror - gv_lasterror
gv_up = ( ( gv_nowerror * gv_p_u ) + ( gv_integral * gv_d_u ) )
Motor.StartPower ( gv_right_motor , ( 30 + gv_up ) * gv_right_forward )
Motor.StartPower ( gv_left_motor , ( 30 - gv_up ) * gv_left_forward )
gv_lasterror = gv_nowerror
EndSub
Sub f_ultrasonic_superfast_0
gv_nowerror = Sensor.ReadRawValue ( gv_ultrasonic , 0 ) - gv_a
gv_dif = gv_lasterror - gv_nowerror
gv_integral = ( gv_integral + gv_nowerror ) / 10
gv_derivative = gv_nowerror - gv_lasterror
gv_up = ( ( gv_nowerror * gv_p_u ) + ( gv_integral * gv_d_u ) )
Motor.StartPower ( gv_right_motor , ( 80 + gv_up ) * gv_right_forward )
Motor.StartPower ( gv_left_motor , ( 80 - gv_up ) * gv_left_forward )
gv_lasterror = gv_nowerror
EndSub
Sub f_stop_0
Motor.Stop ( gv_motors , "True" )
EndSub
Sub f_stop_right_0
Motor.Stop ( gv_right_motor , "True" )
EndSub
Sub f_delay_0
Program.Delay ( 300 )
EndSub
Sub f_beep_0
Speaker.Tone ( 100 , 500 , 200 )
EndSub
Sub f_take_chem_on_left_0
gv_is_chem_on_left = "True"
lv_base_power_5 = 20
lv_min_power_5 = 10
lv_deg_5 = 280
lv_acceleration_5 = 100
lv_zame_5 = 100
f_move_forward_acceleration_5 ()
f_after_action_0 ()
lv_motor_10 = gv_left_motor
lv_forward_10 = gv_left_forward
lv_base_power_10 = 20
lv_min_power_10 = 10
lv_deg_10 = 370
lv_acceleration_10 = 100
lv_zame_10 = 100
f_motor_backward_acceleration_7 ()
f_after_action_0 ()
Motor.Move ( gv_grabber_motor , 100 , 165 , "True" )
lv_base_power_5 = 20
lv_min_power_5 = 10
lv_deg_5 = 70
lv_acceleration_5 = 0
lv_zame_5 = 70
f_move_forward_acceleration_5 ()
f_after_action_0 ()
Motor.Move ( gv_grabber_motor , 100 , 100 , "True" )
f_after_action_0 ()
lv_base_power_8 = 20
lv_min_power_8 = 10
lv_deg_8 = 90
lv_acceleration_8 = 0
lv_zame_8 = 70
f_move_backward_acceleration_5 ()
f_after_action_0 ()
lv_motor_9 = gv_left_motor
lv_forward_9 = gv_left_forward
lv_base_power_9 = 20
lv_min_power_9 = 10
lv_deg_9 = 370
lv_acceleration_9 = 100
lv_zame_9 = 100
f_motor_forward_acceleration_7 ()
f_after_action_0 ()
lv_base_power_8 = 20
lv_min_power_8 = 10
lv_deg_8 = 280
lv_acceleration_8 = 100
lv_zame_8 = 100
f_move_backward_acceleration_5 ()
f_after_action_0 ()
EndSub
Sub f_take_chem_on_left_accurate_0
gv_is_chem_on_left = "True"
lv_base_power_8 = 20
lv_min_power_8 = 10
lv_deg_8 = 170
lv_acceleration_8 = 70
lv_zame_8 = 70
f_move_backward_acceleration_5 ()
f_stop_0 ()
Motor.Move ( gv_grabber_motor , 50 , 165 , "True" )
lv_motor_9 = gv_right_motor
lv_forward_9 = gv_right_forward
lv_base_power_9 = 20
lv_min_power_9 = 10
lv_deg_9 = 160
lv_acceleration_9 = 70
lv_zame_9 = 70
f_motor_forward_acceleration_7 ()
f_stop_0 ()
Motor.Move ( gv_grabber_motor , 50 , 100 , "True" )
f_delay_0 ()
lv_motor_10 = gv_right_motor
lv_forward_10 = gv_right_forward
lv_base_power_10 = 20
lv_min_power_10 = 10
lv_deg_10 = 160
lv_acceleration_10 = 70
lv_zame_10 = 70
f_motor_backward_acceleration_7 ()
f_after_action_0 ()
lv_base_power_5 = 20
lv_min_power_5 = 10
lv_deg_5 = 170
lv_acceleration_5 = 70
lv_zame_5 = 70
f_move_forward_acceleration_5 ()
f_stop_0 ()
EndSub
Sub f_take_chem_on_right_0
gv_is_chem_on_right = "True"
lv_base_power_8 = 20
lv_min_power_8 = 10
lv_deg_8 = 170
lv_acceleration_8 = 70
lv_zame_8 = 70
f_move_backward_acceleration_5 ()
f_stop_0 ()
Motor.Move ( gv_grabber_motor , 50 , 165 , "True" )
lv_motor_9 = gv_left_motor
lv_forward_9 = gv_left_forward
lv_base_power_9 = 20
lv_min_power_9 = 10
lv_deg_9 = 160
lv_acceleration_9 = 70
lv_zame_9 = 70
f_motor_forward_acceleration_7 ()
f_stop_0 ()
Motor.Move ( gv_grabber_motor , 50 , 100 , "True" )
f_delay_0 ()
lv_motor_10 = gv_left_motor
lv_forward_10 = gv_left_forward
lv_base_power_10 = 20
lv_min_power_10 = 10
lv_deg_10 = 160
lv_acceleration_10 = 70
lv_zame_10 = 70
f_motor_backward_acceleration_7 ()
f_after_action_0 ()
lv_base_power_5 = 20
lv_min_power_5 = 10
lv_deg_5 = 170
lv_acceleration_5 = 70
lv_zame_5 = 70
f_move_forward_acceleration_5 ()
f_stop_0 ()
EndSub
Sub f_kick_water_0
If gv_water_state = 0 Then
Motor.Start ( gv_water_motor , - 30 )
Program.Delay ( 1500 )
Motor.Stop ( gv_water_motor , "True" )
Motor.Move ( gv_water_motor , 30 , 40 , "True" )
gv_water_state = 1
Else
Motor.Start ( gv_water_motor , 30 )
Program.Delay ( 2000 )
Motor.Stop ( gv_water_motor , "False" )
Motor.Move ( gv_water_motor , - 30 , 40 , "True" )
EndIf
EndSub
Sub f_update_display_0
LCD.StopUpdate ()
LCD.Clear ()
LCD.Text ( 1 , 10 , 10 , 2 , gv_object )
LCD.Text ( 1 , 10 , 50 , 2 , "Red: " + gv_b )
LCD.Text ( 1 , 10 , 75 , 2 , "White: " + gv_w )
LCD.Update ()
EndSub
Sub f_reset_values_0
gv_object = "None"
gv_b = 0
gv_w = 0
EndSub
Sub f_close_cubes_0
Motor.Move ( gv_water_motor , - 10 , 70 , "True" )
EndSub
Sub f_open_cubes_0
Motor.Move ( gv_water_motor , 10 , 70 , "True" )
EndSub
Sub f_take_cubes_0
Motor.Start ( gv_water_motor , 30 )
Program.Delay ( 500 )
Motor.Stop ( gv_water_motor , "True" )
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 150 , "True" )
Motor.Move ( gv_right_motor , - 20 , 360 , "True" )
Motor.StartSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 )
Program.Delay ( 700 )
f_stop_0 ()
lv_u_3 = 229
lv_base_power_3 = 50
lv_min_power_3 = 20
lv_degrees_3 = 930
lv_zamed_degrees_3 = 200
f_ultrasonic_zamed_5 ()
Motor.Move ( gv_water_motor , - 50 , 20 , "True" )
f_close_cubes_0 ()
EndSub
Sub f_take_cubes_inversed_0
Motor.Start ( gv_water_motor , 30 )
Program.Delay ( 500 )
Motor.Stop ( gv_water_motor , "True" )
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 140 , "True" )
Motor.Start ( gv_left_motor , - 100 * gv_left_forward )
Program.Delay ( 3000 )
f_stop_0 ()
Motor.StartSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 )
Program.Delay ( 1000 )
f_stop_0 ()
Motor.ResetCount ( gv_not_inversed_motor )
lv_base_power_5 = 20
lv_min_power_5 = 20
lv_deg_5 = 930
lv_acceleration_5 = 0
lv_zame_5 = 200
f_move_forward_acceleration_5 ()
f_stop_0 ()
Motor.Move ( gv_water_motor , - 50 , 20 , "True" )
f_close_cubes_0 ()
EndSub
Sub f_take_long_0
Motor.Move ( gv_right_motor , gv_right_forward * 20 , 360 , "True" )
Motor.StartSync ( gv_motors , gv_left_forward * 20 , gv_right_forward * 20 )
Program.Delay ( 1000 )
f_stop_0 ()
f_open_cubes_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 60 , "True" )
If gv_cubes_count = 2 Then
f_close_cubes_0 ()
EndIf
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 160 - 60 , "True" )
Motor.Move ( gv_right_motor , gv_right_forward * - 20 , 360 , "True" )
gv_cubes_count = 1
EndSub
Sub f_take_long_inversed_0
Motor.Move ( gv_left_motor , gv_left_forward * 20 , 360 , "True" )
Motor.StartSync ( gv_motors , gv_left_forward * 20 , gv_right_forward * 20 )
Program.Delay ( 1000 )
f_stop_0 ()
f_open_cubes_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 60 , "True" )
If gv_cubes_count = 2 Then
f_close_cubes_0 ()
EndIf
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 155 - 60 , "True" )
Motor.Move ( gv_left_motor , gv_left_forward * - 20 , 365 , "True" )
gv_cubes_count = 1
EndSub
Sub f_take_near_0
Motor.Move ( gv_right_motor , - 20 * gv_right_forward , 250 , "True" )
Motor.Move ( gv_left_motor , - 20 * gv_left_forward , 250 , "True" )
f_delay_0 ()
Motor.MoveSync ( gv_motors , 20 * gv_left_forward , 20 * gv_right_forward , 230 , "True" )
f_open_cubes_0 ()
Motor.MoveSync ( gv_motors , - 20 * gv_left_forward , - 20 * gv_right_forward , 52 , "True" )
If gv_cubes_count = 2 Then
f_close_cubes_0 ()
EndIf
Motor.MoveSync ( gv_motors , - 20 * gv_left_forward , - 20 * gv_right_forward , 230 - 52 , "True" )
Motor.Move ( gv_left_motor , gv_left_forward * - 20 , 250 , "True" )
Motor.Move ( gv_right_motor , gv_right_forward * - 20 , 250 , "True" )
f_delay_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * 20 , gv_right_forward * 20 , 200 , "True" )
gv_cubes_count = 1
EndSub
Sub f_take_near_inversed_0
Motor.Move ( gv_left_motor , - 20 * gv_left_forward , 250 , "True" )
Motor.Move ( gv_right_motor , - 20 * gv_right_forward , 250 , "True" )
f_delay_0 ()
Motor.MoveSync ( gv_motors , 20 * gv_left_forward , 20 * gv_right_forward , 230 , "True" )
f_open_cubes_0 ()
Motor.MoveSync ( gv_motors , - 20 * gv_left_forward , - 20 * gv_right_forward , 52 , "True" )
If gv_cubes_count = 2 Then
f_close_cubes_0 ()
EndIf
Motor.MoveSync ( gv_motors , - 20 * gv_left_forward , - 20 * gv_right_forward , 230 - 52 , "True" )
Motor.Move ( gv_right_motor , gv_right_forward * - 20 , 250 , "True" )
Motor.Move ( gv_left_motor , gv_left_forward * - 20 , 250 , "True" )
f_delay_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * 20 , gv_right_forward * 20 , 200 , "True" )
gv_cubes_count = 1
EndSub
Sub f_take_both_0
Motor.Move ( gv_right_motor , gv_right_forward * 20 , 360 , "True" )
Motor.MoveSync ( gv_motors , gv_left_forward * 20 , gv_right_forward * 20 , 90 , "True" )
f_open_cubes_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 52 , "True" )
f_close_cubes_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 180 - 52 , "True" )
Motor.Move ( gv_left_motor , gv_left_forward * 20 , 360 , "True" )
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 240 , "True" )
f_open_cubes_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 50 , "True" )
Motor.Move ( gv_left_motor , gv_left_forward * - 20 , 280 , "True" )
Motor.Move ( gv_right_motor , gv_right_forward * - 20 , 280 , "True" )
Motor.MoveSync ( gv_motors , gv_left_forward * 20 , gv_right_forward * 20 , 60 , "True" )
gv_cubes_count = 0
EndSub
Sub f_take_both_inversed_0
Motor.Move ( gv_left_motor , gv_left_forward * 20 , 360 , "True" )
Motor.MoveSync ( gv_motors , gv_left_forward * 20 , gv_right_forward * 20 , 90 , "True" )
f_open_cubes_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 52 , "True" )
f_close_cubes_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 180 - 52 , "True" )
Motor.Move ( gv_right_motor , gv_right_forward * 20 , 360 , "True" )
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 240 , "True" )
f_open_cubes_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 50 , "True" )
Motor.Move ( gv_right_motor , gv_right_forward * - 20 , 280 , "True" )
Motor.Move ( gv_left_motor , gv_left_forward * - 20 , 280 , "True" )
Motor.MoveSync ( gv_motors , gv_left_forward * 20 , gv_right_forward * 20 , 60 , "True" )
gv_cubes_count = 0
EndSub
Sub f_take_near_double_0
Motor.Move ( gv_right_motor , gv_right_forward * - 20 , 250 , "True" )
Motor.Move ( gv_left_motor , gv_left_forward * - 20 , 250 , "True" )
Motor.MoveSync ( gv_motors , gv_left_forward * 20 , gv_right_forward * 20 , 200 , "True" )
f_open_cubes_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 52 , "True" )
f_close_cubes_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 210 - 52 , "True" )
f_open_cubes_0 ()
EndSub
Sub f_take_near_double_inversed_0
Motor.Move ( gv_left_motor , gv_left_forward * - 20 , 250 , "True" )
Motor.Move ( gv_right_motor , gv_right_forward * - 20 , 250 , "True" )
Motor.MoveSync ( gv_motors , gv_left_forward * 20 , gv_right_forward * 20 , 200 , "True" )
f_open_cubes_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 52 , "True" )
f_close_cubes_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 210 - 52 , "True" )
f_open_cubes_0 ()
EndSub
Sub f_take_near_double_long_0
Motor.Move ( gv_right_motor , gv_right_forward * - 20 , 250 , "True" )
Motor.Move ( gv_left_motor , gv_left_forward * - 20 , 250 , "True" )
Motor.MoveSync ( gv_motors , gv_left_forward * 20 , gv_right_forward * 20 , 200 , "True" )
f_open_cubes_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 52 , "True" )
f_close_cubes_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 390 - 52 , "True" )
f_open_cubes_0 ()
EndSub
Sub f_take_near_double_long_inversed_0
Motor.Move ( gv_left_motor , gv_left_forward * - 20 , 250 , "True" )
Motor.Move ( gv_right_motor , gv_right_forward * - 20 , 250 , "True" )
Motor.MoveSync ( gv_motors , gv_left_forward * 20 , gv_right_forward * 20 , 200 , "True" )
f_open_cubes_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 52 , "True" )
f_close_cubes_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 390 - 52 , "True" )
f_open_cubes_0 ()
EndSub
Sub f_finish_after_near_0
Motor.StartSync ( gv_motors , gv_left_forward * - 30 , gv_right_forward * - 30 )
Program.Delay ( 1500 )
f_stop_0 ()
Motor.Move ( gv_left_motor , gv_left_forward * 20 , 220 , "True" )
Motor.Move ( gv_right_motor , gv_right_forward * - 20 , 150 , "True" )
Motor.StartSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 )
Program.Delay ( 1500 )
f_stop_0 ()
EndSub
Sub f_finish_after_near_inversed_0
Motor.StartSync ( gv_motors , gv_left_forward * - 30 , gv_right_forward * - 30 )
Program.Delay ( 1500 )
f_stop_0 ()
Motor.Move ( gv_right_motor , gv_right_forward * 20 , 220 , "True" )
Motor.Move ( gv_left_motor , gv_left_forward * - 20 , 150 , "True" )
Motor.StartSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 )
Program.Delay ( 3000 )
f_stop_0 ()
EndSub
Sub f_takes_inversed_0
f_take_cubes_inversed_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * - 15 , gv_right_forward * - 15 , 140 , "True" )
If gv_green_man = "True" And gv_yellow_man = "True" Then
f_take_near_double_inversed_0 ()
f_finish_after_near_inversed_0 ()
ElseIf gv_yellow_man = "True" And gv_red_man = "True" Then
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 180 , "True" )
f_take_near_double_inversed_0 ()
f_finish_after_near_inversed_0 ()
ElseIf gv_red_man = "True" And gv_green_man = "True" Then
f_take_near_double_long_inversed_0 ()
f_finish_after_near_inversed_0 ()
Else
If gv_green_man = "True" And gv_blue_man = "True" Then
f_take_both_inversed_0 ()
ElseIf gv_green_man = "True" Then
f_take_near_inversed_0 ()
ElseIf gv_blue_man = "True" Then
f_take_long_inversed_0 ()
Motor.MoveSync ( gv_motors , - 15 * gv_left_forward , - 15 * gv_right_forward , 210 , "True" )
Else
Motor.MoveSync ( gv_motors , - 15 * gv_left_forward , - 15 * gv_right_forward , 210 , "True" )
EndIf
If gv_yellow_man = "True" And gv_white_man = "True" Then
f_take_both_inversed_0 ()
ElseIf gv_yellow_man = "True" Then
f_take_near_inversed_0 ()
ElseIf gv_white_man = "True" Then
f_take_long_inversed_0 ()
Motor.MoveSync ( gv_motors , - 15 * gv_left_forward , - 15 * gv_right_forward , 210 , "True" )
Else
Motor.MoveSync ( gv_motors , - 15 * gv_left_forward , - 15 * gv_right_forward , 210 , "True" )
EndIf
If gv_red_man = "True" And gv_brown_man = "True" Then
f_take_both_inversed_0 ()
ElseIf gv_red_man = "True" Then
f_take_near_inversed_0 ()
ElseIf gv_brown_man = "True" Then
f_take_long_inversed_0 ()
Motor.MoveSync ( gv_motors , - 15 * gv_left_forward , - 15 * gv_right_forward , 210 , "True" )
Else
Motor.MoveSync ( gv_motors , - 15 * gv_left_forward , - 15 * gv_right_forward , 210 , "True" )
EndIf
f_finish_after_near_inversed_0 ()
EndIf
EndSub
Sub f_takes_normal_0
f_take_cubes_0 ()
Motor.MoveSync ( gv_motors , gv_left_forward * - 15 , gv_right_forward * - 15 , 140 , "True" )
If gv_red_man = "True" And gv_yellow_man = "True" Then
f_take_near_double_0 ()
f_finish_after_near_0 ()
ElseIf gv_yellow_man = "True" And gv_green_man = "True" Then
Motor.MoveSync ( gv_motors , gv_left_forward * - 20 , gv_right_forward * - 20 , 180 , "True" )
f_take_near_double_0 ()
f_finish_after_near_0 ()
ElseIf gv_red_man = "True" And gv_green_man = "True" Then
f_take_near_double_long_0 ()
f_finish_after_near_0 ()
Else
If gv_red_man = "True" And gv_brown_man = "True" Then
f_take_both_0 ()
ElseIf gv_red_man = "True" Then
f_take_near_0 ()
ElseIf gv_brown_man = "True" Then
f_take_long_0 ()
Motor.MoveSync ( gv_motors , - 15 * gv_left_forward , - 15 * gv_right_forward , 210 , "True" )
Else
Motor.MoveSync ( gv_motors , - 15 * gv_left_forward , - 15 * gv_right_forward , 210 , "True" )
EndIf
If gv_yellow_man = "True" And gv_white_man = "True" Then
f_take_both_0 ()
ElseIf gv_yellow_man = "True" Then
f_take_near_0 ()
ElseIf gv_white_man = "True" Then
f_take_long_0 ()
Motor.MoveSync ( gv_motors , - 15 * gv_left_forward , - 15 * gv_right_forward , 210 , "True" )
Else
Motor.MoveSync ( gv_motors , - 15 * gv_left_forward , - 15 * gv_right_forward , 210 , "True" )
EndIf
If gv_green_man = "True" And gv_blue_man = "True" Then
f_take_both_0 ()
ElseIf gv_green_man = "True" Then
f_take_near_0 ()
ElseIf gv_blue_man = "True" Then
f_take_long_0 ()
Motor.MoveSync ( gv_motors , - 15 * gv_left_forward , - 15 * gv_right_forward , 210 , "True" )
Else
Motor.MoveSync ( gv_motors , - 15 * gv_left_forward , - 15 * gv_right_forward , 210 , "True" )
EndIf
f_finish_after_near_0 ()
EndIf
EndSub
Sub f_go_forward_0
gv_r_c = Motor.GetCount ( gv_right_motor ) * gv_right_forward
gv_l_c = Motor.GetCount ( gv_left_motor ) * gv_left_forward
gv_diff = ( gv_r_c - gv_l_c ) * 1
gv_r_p = ( 25 - gv_diff ) * gv_right_forward
gv_l_p = ( 25 + gv_diff ) * gv_left_forward
Motor.StartPower ( gv_right_motor , gv_r_p )
Motor.StartPower ( gv_left_motor , gv_l_p )
EndSub
Sub f_go_backward_0
gv_r_c = Motor.GetCount ( gv_right_motor ) * gv_right_forward
gv_l_c = Motor.GetCount ( gv_left_motor ) * gv_left_forward
gv_diff = ( gv_r_c - gv_l_c ) * 0.5
gv_r_p = ( - 25 - gv_diff ) * gv_right_forward
gv_l_p = ( - 25 + gv_diff ) * gv_left_forward
Motor.StartPower ( gv_right_motor , gv_r_p )
Motor.StartPower ( gv_left_motor , gv_l_p )
EndSub
Sub f_move_forward_0
Motor.ResetCount ( gv_left_motor )
Motor.ResetCount ( gv_right_motor )
While Motor.GetCount ( gv_not_inversed_motor ) < gv_deg
f_go_forward_0 ()
EndWhile
f_stop_0 ()
EndSub
Sub f_move_backward_0
Motor.ResetCount ( gv_left_motor )
Motor.ResetCount ( gv_right_motor )
While Motor.GetCount ( gv_not_inversed_motor ) > ( - 1 * gv_deg )
f_go_backward_0 ()
EndWhile
f_stop_0 ()
EndSub
Sub f_ultrasonic_power_2
lv_v_1 = Sensor.ReadRawValue ( gv_ultrasonic , 0 )
lv_nowerror_1 = lv_v_1 - lv_u_1
lv_dif_1 = gv_lasterror - lv_nowerror_1
lv_integral_1 = ( gv_integral + lv_nowerror_1 ) / 10
lv_derivative_1 = lv_nowerror_1 - gv_lasterror
lv_up_1 = ( ( lv_nowerror_1 * gv_p_u ) + ( lv_integral_1 * gv_d_u ) )
Motor.StartPower ( gv_right_motor , ( lv_power_1 + lv_up_1 ) * gv_right_forward )
Motor.StartPower ( gv_left_motor , ( lv_power_1 - lv_up_1 ) * gv_left_forward )
lv_lasterror_1 = lv_nowerror_1
EndSub
Sub f_after_action_0
f_stop_0 ()
Program.Delay ( 300 )
EndSub
Sub f_ultrasonic_zamed_5
lv_normal_degrees_3 = lv_degrees_3 - lv_zamed_degrees_3
Motor.ResetCount ( gv_not_inversed_motor )
While Motor.GetCount ( gv_not_inversed_motor ) < lv_normal_degrees_3
lv_power_1 = lv_base_power_3
lv_u_1 = lv_u_3
f_ultrasonic_power_2 ()
EndWhile
Motor.ResetCount ( gv_not_inversed_motor )
lv_c_3 = Motor.GetCount ( gv_not_inversed_motor )
While lv_c_3 < lv_zamed_degrees_3
lv_minus_3 = Motor.GetCount ( gv_not_inversed_motor ) / lv_zamed_degrees_3 * lv_base_power_3
lv_power_3 = lv_base_power_3 - lv_minus_3
If lv_power_3 < lv_min_power_3 Then
lv_power_3 = lv_min_power_3
EndIf
lv_power_1 = lv_power_3
lv_u_1 = lv_u_3
f_ultrasonic_power_2 ()
lv_c_3 = Motor.GetCount ( gv_not_inversed_motor )
EndWhile
f_stop_0 ()
EndSub
Sub f_reset_0
Motor.ResetCount ( gv_right_motor )
Motor.ResetCount ( gv_left_motor )
EndSub
Sub f_move_forward_acceleration_5
lv_normal_degrees_5 = lv_deg_5 - lv_acceleration_5 - lv_zame_5
f_reset_0 ()
lv_c_5 = Motor.GetCount ( gv_not_inversed_motor )
While lv_c_5 < lv_acceleration_5
lv_p_5 = ( lv_c_5 / lv_acceleration_5 )
lv_power_5 = lv_p_5 * ( lv_base_power_5 - lv_min_power_5 ) + lv_min_power_5
lv_delta_5 = ( Motor.GetCount ( gv_left_motor ) * gv_left_forward - Motor.GetCount ( gv_right_motor ) * gv_right_forward ) * lv_p_5
lv_left_power_5 = lv_power_5 - lv_delta_5
lv_right_power_5 = lv_power_5 + lv_delta_5
Motor.StartSync ( gv_motors , gv_left_forward * lv_left_power_5 , gv_right_forward * lv_right_power_5 )
lv_c_5 = Motor.GetCount ( gv_not_inversed_motor )
EndWhile
f_reset_0 ()
lv_c_5 = 0
While lv_c_5 < lv_normal_degrees_5
lv_delta_5 = ( Motor.GetCount ( gv_left_motor ) * gv_left_forward - Motor.GetCount ( gv_right_motor ) * gv_right_forward ) * 1
lv_left_power_5 = lv_base_power_5 - lv_delta_5
lv_right_power_5 = lv_base_power_5 + lv_delta_5
Motor.StartSync ( gv_motors , gv_left_forward * lv_left_power_5 , gv_right_forward * lv_right_power_5 )
lv_c_5 = Motor.GetCount ( gv_not_inversed_motor )
EndWhile
f_reset_0 ()
lv_c_5 = 0
While lv_c_5 < lv_zame_5
lv_p_5 = lv_c_5 / lv_zame_5
lv_power_5 = ( lv_base_power_5 - lv_min_power_5 ) * ( 1 - lv_p_5 ) + lv_min_power_5
lv_delta_5 = ( Motor.GetCount ( gv_left_motor ) * gv_left_forward - Motor.GetCount ( gv_right_motor ) * gv_right_forward ) * ( 1 - lv_p_5 )
lv_left_power_5 = lv_power_5 - lv_delta_5
lv_right_power_5 = lv_power_5 + lv_delta_5
Motor.StartSync ( gv_motors , gv_left_forward * lv_left_power_5 , gv_right_forward * lv_right_power_5 )
lv_c_5 = Motor.GetCount ( gv_not_inversed_motor )
EndWhile
EndSub
Sub f_rotate_left_acceleration_5
f_reset_0 ()
lv_normal_deg_7 = lv_deg_7 - lv_acceleration_7 - lv_zame_7
lv_r_7 = 0
While lv_r_7 < lv_acceleration_7
lv_p_7 = lv_r_7 / lv_acceleration_7
lv_power_7 = lv_p_7 * ( lv_base_power_7 - lv_min_power_7 ) + lv_min_power_7
lv_l_7 = Motor.GetCount ( gv_left_motor ) * gv_left_forward * - 1
lv_delta_7 = ( lv_r_7 - lv_l_7 ) * lv_p_7
lv_right_power_7 = lv_power_7 - lv_delta_7
lv_left_power_7 = lv_power_7 + lv_delta_7
Motor.StartSync ( gv_motors , gv_left_forward * lv_left_power_7 * - 1 , gv_right_forward * lv_right_power_7 )
Program.Delay ( 10 )
lv_r_7 = Motor.GetCount ( gv_right_motor ) * gv_right_forward
EndWhile
f_reset_0 ()
lv_r_7 = 0
While lv_r_7 < lv_normal_deg_7
lv_l_7 = Motor.GetCount ( gv_left_motor ) * gv_left_forward * - 1
lv_delta_7 = ( lv_r_7 - lv_l_7 ) * 1
lv_right_power_7 = lv_base_power_7 - lv_delta_7
lv_left_power_7 = lv_base_power_7 + lv_delta_7
Motor.StartSync ( gv_motors , gv_left_forward * lv_left_power_7 * - 1 , gv_right_forward * lv_right_power_7 )
lv_r_7 = Motor.GetCount ( gv_right_motor ) * gv_right_forward
EndWhile
f_reset_0 ()
lv_r_7 = 0
While lv_r_7 < lv_zame_7
lv_l_7 = Motor.GetCount ( gv_left_motor ) * gv_left_forward * - 1
lv_p_7 = lv_r_7 / lv_zame_7
lv_delta_7 = ( lv_r_7 - lv_l_7 ) * ( 1 - lv_p_7 )
lv_power_7 = ( 1 - lv_p_7 ) * ( lv_base_power_7 - lv_min_power_7 ) + lv_min_power_7
lv_right_power_7 = lv_power_7 - lv_delta_7
lv_left_power_7 = lv_power_7 + lv_delta_7
Motor.StartSync ( gv_motors , gv_left_forward * lv_left_power_7 * - 1 , gv_right_forward * lv_right_power_7 )
Program.Delay ( 10 )
lv_r_7 = Motor.GetCount ( gv_right_motor ) * gv_right_forward
EndWhile
f_stop_0 ()
EndSub
Sub f_move_backward_acceleration_5
lv_normal_degrees_8 = lv_deg_8 - lv_acceleration_8 - lv_zame_8
f_reset_0 ()
lv_c_8 = 0
While lv_c_8 < lv_acceleration_8
lv_p_8 = lv_c_8 / lv_acceleration_8
lv_power_8 = lv_p_8 * ( lv_base_power_8 - lv_min_power_8 ) + lv_min_power_8
lv_delta_8 = ( Motor.GetCount ( gv_left_motor ) * gv_left_forward - Motor.GetCount ( gv_right_motor ) * gv_right_forward ) * lv_p_8 * - 1
lv_left_power_8 = lv_power_8 - lv_delta_8
lv_right_power_8 = lv_power_8 + lv_delta_8
Motor.StartSync ( gv_motors , gv_left_forward * lv_left_power_8 * - 1 , gv_right_forward * lv_right_power_8 * - 1 )
lv_c_8 = Motor.GetCount ( gv_not_inversed_motor ) * - 1
EndWhile
f_reset_0 ()
lv_c_8 = 0
While lv_c_8 < lv_normal_degrees_8
lv_delta_8 = ( Motor.GetCount ( gv_left_motor ) * gv_left_forward - Motor.GetCount ( gv_right_motor ) * gv_right_forward ) * - 1
lv_left_power_8 = lv_base_power_8 - lv_delta_8
lv_right_power_8 = lv_base_power_8 + lv_delta_8
Motor.StartSync ( gv_motors , gv_left_forward * lv_left_power_8 * - 1 , gv_right_forward * lv_right_power_8 * - 1 )
lv_c_8 = Motor.GetCount ( gv_not_inversed_motor ) * - 1
EndWhile
f_reset_0 ()
lv_c_8 = 0
While lv_c_8 < lv_zame_8
lv_p_8 = lv_c_8 / lv_zame_8
lv_power_8 = ( lv_base_power_8 - lv_min_power_8 ) * ( 1 - lv_p_8 ) + lv_min_power_8
lv_delta_8 = ( Motor.GetCount ( gv_left_motor ) * gv_left_forward - Motor.GetCount ( gv_right_motor ) * gv_right_forward ) * ( 1 - lv_p_8 ) * - 1
lv_left_power_8 = lv_power_8 - lv_delta_8
lv_right_power_8 = lv_power_8 + lv_delta_8
Motor.StartSync ( gv_motors , gv_left_forward * lv_left_power_8 * - 1 , gv_right_forward * lv_right_power_8 * - 1 )
lv_c_8 = Motor.GetCount ( gv_not_inversed_motor ) * - 1
EndWhile
EndSub
Sub f_motor_forward_acceleration_7
lv_normal_deg_9 = lv_deg_9 - lv_acceleration_9 - lv_zame_9
Motor.ResetCount ( lv_motor_9 )
lv_c_9 = 0
While lv_c_9 < lv_acceleration_9
lv_p_9 = lv_c_9 / lv_acceleration_9
lv_power_9 = ( lv_base_power_9 - lv_min_power_9 ) * lv_p_9 + lv_min_power_9
lv_power_9 = Math.Floor ( lv_power_9 ) * lv_forward_9
LCD.StopUpdate ()
LCD.Clear ()
LCD.Text ( 1 , 0 , 0 , 2 , lv_power_9 )
LCD.Update ()
Motor.Start ( lv_motor_9 , lv_power_9 )
lv_c_9 = Motor.GetCount ( lv_motor_9 ) * lv_forward_9
Program.Delay ( 10 )
EndWhile
Motor.Move ( lv_motor_9 , lv_base_power_9 * lv_forward_9 , lv_normal_deg_9 , "False" )
Motor.ResetCount ( lv_motor_9 )
lv_c_9 = 0
While lv_c_9 < lv_zame_9
lv_p_9 = lv_c_9 / lv_zame_9
lv_power_9 = ( ( lv_base_power_9 - lv_min_power_9 ) * ( 1 - lv_p_9 ) ) + lv_min_power_9
LCD.StopUpdate ()
LCD.Clear ()
LCD.Text ( 1 , 0 , 0 , 2 , lv_power_9 )
LCD.Update ()
Motor.Start ( lv_motor_9 , lv_power_9 * lv_forward_9 )
lv_c_9 = Motor.GetCount ( lv_motor_9 ) * lv_forward_9
Program.Delay ( 10 )
EndWhile
EndSub
Sub f_motor_backward_acceleration_7
lv_normal_deg_10 = lv_deg_10 - lv_acceleration_10 - lv_zame_10
Motor.ResetCount ( lv_motor_10 )
lv_c_10 = 0
While lv_c_10 < lv_acceleration_10
lv_power_10 = ( ( lv_c_10 / lv_acceleration_10 ) * ( lv_base_power_10 - lv_min_power_10 ) ) + lv_min_power_10
Motor.Start ( lv_motor_10 , lv_forward_10 * lv_power_10 * - 1 )
lv_c_10 = Motor.GetCount ( lv_motor_10 ) * lv_forward_10 * - 1
Program.Delay ( 10 )
EndWhile
Motor.Move ( lv_motor_10 , lv_forward_10 * lv_base_power_10 * - 1 , lv_normal_deg_10 , "False" )
Motor.ResetCount ( lv_motor_10 )
lv_c_10 = 0
While lv_c_10 < lv_zame_10
lv_p_10 = lv_c_10 / lv_zame_10
lv_power_10 = ( ( lv_base_power_10 - lv_min_power_10 ) * ( 1 - lv_p_10 ) ) + lv_min_power_10
Motor.Start ( lv_motor_10 , lv_forward_10 * lv_power_10 * - 1 )
lv_c_10 = Motor.GetCount ( lv_motor_10 ) * lv_forward_10 * - 1
Program.Delay ( 10 )
EndWhile
EndSub
