' Подготовка ко второй попытке

' Порты
left_motor = "A"
right_motor = "B"
' Неинвертированный мотор. Нужен, чтобы положительно мерить градусы
not_inversed_motor = "B"
grabber_motor = "C"
motors = left_motor + right_motor
water_motor = "D"
left_sensor = 2
right_sensor = 3
line_sensor = 1
ultrasonic = 4

' Переменные среды
right_forward = 1
left_forward = -1
a = 0
p = 1
d = 6
LastError = 0
NowError = 0
dif = 0
integral = 0
derivative = 0
up = 0
p_u = 1
d_u = 0
deg = 0

is_chem_on_right = "False"
is_chem_on_left = "False"

' Данные, полученные во время выполнения
brown = "False"
red = "False"
yellow = "False"
green = "False"
blue = "False"
white = "False"

brown_man = "False"
red_man = "False"
yellow_man = "False"
green_man = "False"
blue_man = "False"
white_man = "False"

men_count = 0
chem = "False"
fire_count = 0

' Текущее состояние
cubes_count = 2

water_state = 0

object = ""
b = 0
w = 0

' Перевод сенсоров в нужный режим
Sensor.SetMode(line_sensor, 0)
Sensor.SetMode(right_sensor, 1)
Sensor.SetMode(left_sensor, 1)
Sensor.SetMode(ultrasonic, 0)

' Если низкий уровень заряда, уведомить оператора
If EV3.BatteryVoltage < 8 Then
  LCD.Clear()
  LCD.Text(1, 0, 0, 1, "Low battery")
  beep()
  delay()
  beep()
EndIf

' --- Движения с выравниванием ---
Sub line
  NowError = 20 - Sensor.ReadPercent(1)
  dif = LastError - NowError
  integral = (integral + NowError) / 10
  derivative = NowError - LastError
  up = ((NowError * p) + (integral * d))
  Motor.StartPower("B", 40 - up)
  Motor.StartPower("A", -40 - up)
  LastError = NowError
EndSub

Sub endless_line
  While "True"
    line()
  EndWhile
EndSub

Sub Ultrasonic_slow
  NowError = Sensor.ReadRawValue(ultrasonic, 0) - a
  dif = LastError - NowError
  integral = (integral + NowError) / 10
  derivative = NowError - LastError
  up = ((NowError * p_u) + (integral * d_u))
  Motor.StartPower(right_motor, (20 + up) * right_forward)
  Motor.StartPower(left_motor, (20 - up) * left_forward)
  LastError = NowError
EndSub

Function Ultrasonic_power(in number power, in number u)
  v = Sensor.ReadRawValue(@ultrasonic, 0)
  NowError = v - u
  dif = @LastError - NowError
  integral = (@integral + NowError) / 10
  derivative = NowError - @LastError
  up = ((NowError * @p_u) + (integral * @d_u))
  Motor.StartPower(@right_motor, (power + up) * @right_forward)
  Motor.StartPower(@left_motor, (power - up) * @left_forward)
  LastError = NowError
EndFunction

'Sub Ultrasonic_none
'NowError = Sensor.ReadRawValue(ultrasonic, 0) - a
'dif = LastError - NowError
'integral = (integral + NowError) / 10
'derivative = NowError - LastError
'up = ((NowError * 0.1) + (integral * 0))
'Motor.StartPower(right_motor, (20 + up) * right_forward)
'Motor.StartPower(left_motor, (20 - up) * left_forward)
'LastError = NowError
'EndSub

Sub Ultrasonic_fast
  NowError = Sensor.ReadRawValue(ultrasonic, 0) - a
  dif = LastError - NowError
  integral = (integral + NowError) / 10
  derivative = NowError - LastError
  up = ((NowError * p_u) + (integral * d_u))
  Motor.StartPower(right_motor, (30 + up) * right_forward)
  Motor.StartPower(left_motor, (30 - up) * left_forward)
  LastError = NowError
EndSub

Sub Ultrasonic_take_cubes
  NowError = Sensor.ReadRawValue(ultrasonic, 0) - a
  dif = LastError - NowError
  integral = (integral + NowError) / 10
  derivative = NowError - LastError
  up = ((NowError * p_u) + (integral * d_u))
  Motor.StartPower(right_motor, (50 + up) * right_forward)
  Motor.StartPower(left_motor, (50 - up) * left_forward)
  LastError = NowError
EndSub

Sub ultrasonic_superfast
  NowError = Sensor.ReadRawValue(ultrasonic, 0) - a
  dif = LastError - NowError
  integral = (integral + NowError) / 10
  derivative = NowError - LastError
  up = ((NowError * p_u) + (integral * d_u))
  Motor.StartPower(right_motor, (80 + up) * right_forward)
  Motor.StartPower(left_motor, (80 - up) * left_forward)
  LastError = NowError
EndSub

' --- Базовые действия ---

Sub stop
  Motor.Stop(motors, "True")
EndSub

Sub stop_right
  Motor.Stop(right_motor, "True")
EndSub

Sub stop_left
  Motor.Stop(left_motor, "True")
EndSub

Sub delay
  Program.Delay(300)
EndSub

Sub beep
  Speaker.Tone(100, 500, 200)
EndSub

' --- Заборы химиката ---

Sub take_chem_on_left
  'deg = 280
  'move_forward()
  move_forward_acceleration(20, 10, 280, 100, 100)
  stop()
  delay()
  Motor.ResetCount(left_motor)
  For i = 1 To 20
    Motor.Start(left_motor, left_forward * i * -1)
    Program.Delay(10)
  EndFor
  Motor.Move(left_motor, -20 * left_forward, 370 + (Motor.GetCount(left_motor) * left_forward), "True")
  
  Motor.Move(grabber_motor, 100, 165, "True")
  deg = 70
  move_forward()
  Motor.Move(grabber_motor, 100, 100, "True")
  
  delay()
  move_backward()
  
  Motor.ResetCount(left_motor)
  For i = 1 To 20
    Motor.Start(left_motor, left_forward * i)
    Program.Delay(10)
  EndFor
  Motor.Move(left_motor, 20 * left_forward, 360 - (Motor.GetCount(left_motor) * left_forward), "True")
  stop()
  delay()
  
  deg = 280
  move_backward()
  stop()
  delay()
EndSub

Sub take_chem_on_left_accurate
  'Motor.ResetCount(not_inversed_motor)
  'For i = 1 To 20
  'Motor.StartSync(motors, left_forward * -1 * i, right_forward * -1 * i)
  'Program.Delay(30)
  'EndFor
  'Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 170 + Motor.GetCount(not_inversed_motor), "True")
  move_backward_acceleration(20, 10, 170, 70, 70)
  stop()
  
  Motor.Move(grabber_motor, 50, 165, "True")
  
  Motor.ResetCount(right_motor)
  For i = 1 To 20
    Motor.Start(right_motor, i * right_forward)
    Program.Delay(10)
  EndFor
  Motor.Move(right_motor, 20 * right_forward, 160 - (Motor.GetCount(right_motor) * right_forward), "True")
  'motor_forward_acceleration(right_motor, right_forward, 20, 10, 160, 60, 60)
  stop()
  delay()
  
  Motor.Move(grabber_motor, 50, 100, "True")
  stop()
  delay()
  
  Motor.ResetCount(right_motor)
  For i = 1 To 20
    Motor.Start(right_motor, right_forward * i * -1)
    Program.Delay(10)
  EndFor
  Motor.Move(right_motor, right_forward * -20, 160 + (Motor.GetCount(right_motor) * right_forward), "True")
  'motor_backward_acceleration(right_motor, right_forward, 20, 10, 160, 60, 60)
  stop()
  delay()
  
  Motor.ResetCount(not_inversed_motor)
  For i = 1 To 20
    Motor.StartSync(motors, left_forward * i, right_forward * i)
    Program.Delay(30)
  EndFor
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 170 - Motor.GetCount(not_inversed_motor), "True")
  'move_forward_acceleration(20, 10, 170, 70, 70)
EndSub

Sub take_chem_on_right
  Motor.ResetCount(not_inversed_motor)
  For i = 1 To 20
    Motor.StartSync(motors, left_forward * -1 * i, right_forward * -1 * i)
    Program.Delay(30)
  EndFor
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 160 + Motor.GetCount(not_inversed_motor), "True")
  stop()
  
  Motor.Move(grabber_motor, 50, 165, "True")
  
  Motor.ResetCount(left_motor)
  For i = 1 To 20
    Motor.Start(left_motor, i * left_forward)
    Program.Delay(10)
  EndFor
  Motor.Move(left_motor, 20 * left_forward, 160 - (Motor.GetCount(left_motor) * left_forward), "True")
  delay()
  
  Motor.Move(grabber_motor, 50, 100, "True")
  stop()
  delay()
  
  Motor.ResetCount(left_motor)
  For i = 1 To 20
    Motor.Start(left_motor, left_forward * i * -1)
    Program.Delay(10)
  EndFor
  Motor.Move(left_motor, left_forward * -20, 160 + (Motor.GetCount(left_motor) * left_forward), "True")
  stop()
  delay()
  
  Motor.ResetCount(not_inversed_motor)
  For i = 1 To 20
    Motor.StartSync(motors, left_forward * i, right_forward * i)
    Program.Delay(30)
  EndFor
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 160 - Motor.GetCount(not_inversed_motor), "True")
EndSub

' Выброс воды
Sub kick_water
  ' 30
  If water_state = 0 Then
    Motor.Start(water_motor, -30)
    Program.Delay(1500)
    Motor.Stop(water_motor, "True")
    Motor.Move(water_motor, 30, 40, "True")
    water_state = 1
  Else
    Motor.Start(water_motor, 30)
    ' 1500
    Program.Delay(2000)
    Motor.Stop(water_motor, "False")
    Motor.Move(water_motor, -30, 40, "True")
  EndIf
EndSub

' Движеня около чёрной линии
Sub turn_right_by_sensor
  Motor.ResetCount(left_motor)
  For i = 1 To 20
    Motor.StartSync(motors, left_forward * i, right_forward * i * -1)
    Program.Delay(10)
  EndFor
  Motor.MoveSync(motors, left_forward * 20, right_forward * -20, 100 - (Motor.GetCount(left_motor) * left_forward), "True")
  Motor.StartSync(motors, left_forward * 20, right_forward * i * -20)
  While Sensor.ReadPercent(line_sensor) > 10
  EndWhile
  stop()
  Motor.MoveSync(motors, left_forward * 20, right_forward * -20, 15, "True")
EndSub

Sub line_to_crossroad
  While Sensor.ReadPercent(line_sensor) > 10
    line()
  EndWhile
  stop()
EndSub

' --- Работа с экраном

Sub update_display
  LCD.StopUpdate()
  LCD.Clear()
  LCD.Text(1, 10, 10, 2, object)
  LCD.Text(1, 10, 50, 2, "Red: " + b)
  LCD.Text(1, 10, 75, 2, "White: " + w)
  LCD.Update()
EndSub

Sub reset_values
  object = "None"
  b = 0
  w = 0
EndSub

' --- Развозы ---

Sub close_cubes
  Motor.Move(water_motor, -10, 70, "True")
EndSub

Sub open_cubes
  Motor.Move(water_motor, 10, 70, "True")
EndSub

Function ultrasonic_zamed(in number u, in number base_power, in number min_power, in number degrees, in number zamed_degrees)
  normal_degrees = degrees - zamed_degrees
  Motor.ResetCount(@not_inversed_motor)
  While Motor.GetCount(@not_inversed_motor) < normal_degrees
    Ultrasonic_power(base_power, u)
  EndWhile
  Motor.ResetCount(@not_inversed_motor)
  c = Motor.GetCount(@not_inversed_motor)
  While c < zamed_degrees
    minus = Motor.GetCount(@not_inversed_motor) / zamed_degrees * base_power
    power = base_power - minus
    If power < min_power Then
      power = min_power
    EndIf
    Ultrasonic_power(power, u)
    c = Motor.GetCount(@not_inversed_motor)
  EndWhile
  stop()
EndFunction

Sub take_cubes
  Motor.Start(water_motor, 30)
  Program.Delay(500)
  Motor.Stop(water_motor, "True")
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 150, "True")
  
  'Motor.Start(right_motor, right_forward * -30)
  'Program.Delay(1500)
  'stop()
  'delay()
  Motor.Move(right_motor, -20, 360, "True")
  Motor.StartSync(motors, left_forward * -20, right_forward * -20)
  Program.Delay(700)
  stop()
  Motor.ResetCount(not_inversed_motor)
  ' 227
  ultrasonic_zamed(229, 50, 20, 930, 200)
  'a = 227
  '' 930
  'While Motor.GetCount(not_inversed_motor) < 730
  'NowError = Sensor.ReadRawValue(ultrasonic, 0) - a
  'dif = LastError - NowError
  'integral = (integral + NowError) / 10
  'derivative = NowError - LastError
  'up = ((NowError * p_u) + (integral * d_u))
  'Motor.StartPower(right_motor, (50 + up) * right_forward)
  'Motor.StartPower(left_motor, (50 - up) * left_forward)
  'LastError = NowError
  'EndWhile
  'base_power = 50
  'Motor.ResetCount(not_inversed_motor)
  'While Motor.GetCount(not_inversed_motor) < 200
  'minus = Motor.GetCount(not_inversed_motor) / 4
  'power = base_power - minus
  'If power < 20 Then
  'power = 20
  'EndIf
  
  'NowError = Sensor.ReadRawValue(ultrasonic, 0) - a
  'dif = LastError - NowError
  'integral = (integral + NowError) / 10
  'derivative = NowError - LastError
  'up = ((NowError * p_u) + (integral * d_u))
  'Motor.StartPower(right_motor, (power + up) * right_forward)
  'Motor.StartPower(left_motor, (power - up) * left_forward)
  'LastError = NowError
  'EndWhile
  'stop()
  Motor.Move(right_motor, right_forward * 20, 180, "True")
  Motor.Move(left_motor, left_forward * 20, 180, "True")
  Motor.StartSync(motors, left_forward * 30, right_forward * 30)
  Program.Delay(1000)
  stop()
  Motor.Move(water_motor, -50, 20, "True")
  close_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 300, "True")
  beep()
  Motor.Move(left_motor, left_forward * -20, 180, "True")
  Motor.Move(right_motor, right_forward * -20, 180, "True")
EndSub

Sub take_cubes_inversed
  Motor.Start(water_motor, 30)
  Program.Delay(500)
  Motor.Stop(water_motor, "True")
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 140, "True")
  
  'Motor.Move(left_motor, -20 * left_forward, 360, "True")
  Motor.Start(left_motor, -30 * left_forward)
  Program.Delay(4000)
  stop()
  Motor.StartSync(motors, left_forward * -20, right_forward * -20)
  Program.Delay(1000)
  stop()
  Motor.ResetCount(not_inversed_motor)
  move_forward_acceleration(20, 20, 930, 0, 200)
  Motor.Move(left_motor, left_forward * 20, 200, "True")
  Motor.Move(right_motor, right_forward * 20, 180, "True")
  Motor.StartSync(motors, left_forward * 30, right_forward * 30)
  Program.Delay(1000)
  stop()
  Motor.Move(water_motor, -50, 20, "True")
  close_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 300, "True")
  beep()
  Motor.Move(right_motor, right_forward * -20, 140, "True")
  Motor.Move(left_motor, left_forward * -20, 140, "True")
EndSub

Sub take_long
  Motor.Move(right_motor, right_forward * 20, 360, "True")
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 90, "True")
  open_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 52, "True")
  If cubes_count = 2 Then
    close_cubes()
  EndIf
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 90 - 52, "True")
  Motor.Move(right_motor, right_forward * -20, 360, "True")
  cubes_count = 1
EndSub

Sub take_long_inversed
  Motor.Move(left_motor, left_forward * 20, 360, "True")
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 90, "True")
  open_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 52, "True")
  If cubes_count = 2 Then
    close_cubes()
  EndIf
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 90 - 52, "True")
  Motor.Move(left_motor, left_forward * -20, 360, "True")
  cubes_count = 1
EndSub

Sub take_near
  Motor.Move(right_motor, -20 * right_forward, 250, "True")
  Motor.Move(left_motor, -20 * left_forward, 250, "True")
  delay()
  Motor.MoveSync(motors, 20 * left_forward, 20 * right_forward, 230, "True")
  open_cubes()
  Motor.MoveSync(motors, -20 * left_forward, -20 * right_forward, 52, "True")
  If cubes_count = 2 Then
    close_cubes()
  EndIf
  Motor.MoveSync(motors, -20 * left_forward, -20 * right_forward, 230 - 52, "True")
  Motor.Move(left_motor, left_forward * -20, 250, "True")
  Motor.Move(right_motor, right_forward * -20, 250, "True")
  delay()
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 200, "True")
  cubes_count = 1
EndSub

Sub take_near_inversed
  Motor.Move(left_motor, -20 * left_forward, 250, "True")
  Motor.Move(right_motor, -20 * right_forward, 250, "True")
  delay()
  Motor.MoveSync(motors, 20 * left_forward, 20 * right_forward, 230, "True")
  open_cubes()
  Motor.MoveSync(motors, -20 * left_forward, -20 * right_forward, 52, "True")
  If cubes_count = 2 Then
    close_cubes()
  EndIf
  Motor.MoveSync(motors, -20 * left_forward, -20 * right_forward, 230 - 52, "True")
  Motor.Move(right_motor, right_forward * -20, 250, "True")
  Motor.Move(left_motor, left_forward * -20, 250, "True")
  delay()
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 200, "True")
  cubes_count = 1
EndSub

Sub take_both
  Motor.Move(right_motor, right_forward * 20, 360, "True")
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 90, "True")
  open_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 52, "True")
  close_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 180 - 52, "True")
  Motor.Move(left_motor, left_forward * 20, 360, "True")
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 240, "True")
  open_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 50, "True")
  Motor.Move(left_motor, left_forward * -20, 280, "True")
  Motor.Move(right_motor, right_forward * -20, 280, "True")
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 60, "True")
  cubes_count = 0
EndSub

Sub take_both_inversed
  Motor.Move(left_motor, left_forward * 20, 360, "True")
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 90, "True")
  open_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 52, "True")
  close_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 180 - 52, "True")
  Motor.Move(right_motor, right_forward * 20, 360, "True")
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 240, "True")
  open_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 50, "True")
  Motor.Move(right_motor, right_forward * -20, 280, "True")
  Motor.Move(left_motor, left_forward * -20, 280, "True")
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 60, "True")
  cubes_count = 0
EndSub

Sub take_near_double
  Motor.Move(right_motor, right_forward * -20, 250, "True")
  Motor.Move(left_motor, left_forward * -20, 250, "True")
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 200, "True")
  open_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 52, "True")
  close_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 210 - 52, "True")
  open_cubes()
EndSub

Sub take_near_double_inversed
  Motor.Move(left_motor, left_forward * -20, 250, "True")
  Motor.Move(right_motor, right_forward * -20, 250, "True")
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 200, "True")
  open_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 52, "True")
  close_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 210 - 52, "True")
  open_cubes()
EndSub

Sub take_near_double_long
  Motor.Move(right_motor, right_forward * -20, 250, "True")
  Motor.Move(left_motor, left_forward * -20, 250, "True")
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 200, "True")
  open_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 52, "True")
  close_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 390 - 52, "True")
  open_cubes()
EndSub

Sub take_near_double_long_inversed
  Motor.Move(left_motor, left_forward * -20, 250, "True")
  Motor.Move(right_motor, right_forward * -20, 250, "True")
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 200, "True")
  open_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 52, "True")
  close_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 390 - 52, "True")
  open_cubes()
EndSub

Sub finish_after_near
  Motor.StartSync(motors, left_forward * -30, right_forward * -30)
  Program.Delay(1500)
  stop()
  Motor.Move(left_motor, left_forward * 20, 220, "True")
  Motor.Move(right_motor, right_forward * -20, 150, "True")
  Motor.StartSync(motors, left_forward * -20, right_forward * -20)
  Program.Delay(1000)
  stop()
EndSub

Sub finish_after_near_inversed
  Motor.StartSync(motors, left_forward * -30, right_forward * -30)
  Program.Delay(1500)
  stop()
  Motor.Move(right_motor, right_forward * 20, 220, "True")
  Motor.Move(left_motor, left_forward * -20, 150, "True")
  Motor.StartSync(motors, left_forward * -20, right_forward * -20)
  Program.Delay(1000)
  stop()
EndSub

' --- Езда с выравнием по энкодерам моторов ---
Sub go_forward
  r_c = Motor.GetCount(right_motor) * right_forward
  l_c = Motor.GetCount(left_motor) * left_forward
  diff = (r_c - l_c) * 1
  r_p = (25 - diff) * right_forward
  l_p = (25 + diff) * left_forward
  Motor.StartPower(right_motor, r_p)
  Motor.StartPower(left_motor, l_p)
EndSub

Sub go_forward_right
  r_c = Motor.GetCount(right_motor) * right_forward
  l_c = Motor.GetCount(left_motor) * left_forward
  ' 1
  diff = (r_c - l_c) * 0.5
  r_p = (20 - diff) * right_forward
  l_p = (21 + diff) * left_forward
  Motor.StartPower(right_motor, r_p)
  Motor.StartPower(left_motor, l_p)
EndSub

Sub go_backward
  r_c = Motor.GetCount(right_motor) * right_forward
  l_c = Motor.GetCount(left_motor) * left_forward
  ' 1
  diff = (r_c - l_c) * 0.5
  r_p = (-25 - diff) * right_forward
  l_p = (-25 + diff) * left_forward
  Motor.StartPower(right_motor, r_p)
  Motor.StartPower(left_motor, l_p)
EndSub

Sub move_forward
  Motor.ResetCount(left_motor)
  Motor.ResetCount(right_motor)
  While Motor.GetCount(not_inversed_motor) < deg
    go_forward()
  EndWhile
  stop()
EndSub

Sub move_forward_right
  Motor.ResetCount(left_motor)
  Motor.ResetCount(right_motor)
  While Motor.GetCount(not_inversed_motor) < deg
    go_forward_right()
  EndWhile
  stop()
EndSub

Sub move_backward
  Motor.ResetCount(left_motor)
  Motor.ResetCount(right_motor)
  While Motor.GetCount(not_inversed_motor) > (-1 * deg)
    go_backward()
  EndWhile
  stop()
EndSub

' Воспроизведение музыки
Sub play_music
  n = 1
  While "True"
    filename = "WRO_2022/files/bad_piggies_" + n
    Speaker.Play(100, filename)
    While Speaker.IsBusy()
    EndWhile
    n = n + 1
    If n = 23 Then
      n = 1
      Program.Delay(1000)
    EndIf
  EndWhile
EndSub

Function reset()
  Motor.ResetCount(@right_motor)
  Motor.ResetCount(@left_motor)
EndFunction

Function move_forward_acceleration(in number base_power, in number min_power, in number deg, in number acceleration, in number zame)
  normal_degrees = deg - acceleration - zame
  reset()
  c = Motor.GetCount(@not_inversed_motor)
  While c < acceleration
    p = (c / acceleration)
    power = p * base_power
    If power < min_power Then
      power = min_power
    EndIf
    LCD.StopUpdate()
    LCD.Clear()
    LCD.Text(1, 0, 0, 2, power + " " + c)
    LCD.Update()
    delta = (Motor.GetCount(@left_motor) * @left_forward - Motor.GetCount(@right_motor) * @right_forward) * p
    left_power = power - delta
    right_power = power + delta
    Motor.StartSync(@motors, @left_forward * left_power, @right_forward * right_power)
    c = Motor.GetCount(@not_inversed_motor)
  EndWhile
  reset()
  c = 0
  While c < normal_degrees
    delta = (Motor.GetCount(@left_motor) * @left_forward - Motor.GetCount(@right_motor) * @right_forward) * 1
    left_power = base_power - delta
    right_power = base_power + delta
    Motor.StartSync(@motors, @left_forward * left_power, @right_forward * right_power)
    c = Motor.GetCount(@not_inversed_motor)
  EndWhile
  reset()
  c = 0
  While c < zame
    p = c / zame
    power = base_power * (1 - p)
    If power < min_power Then
      power = min_power
    EndIf
    delta = (Motor.GetCount(@left_motor) * @left_forward - Motor.GetCount(@right_motor) * @right_forward) * (1 - p)
    left_power = power - delta
    right_power = power + delta
    Motor.StartSync(@motors, @left_forward * left_power, @right_forward * right_power)
    c = Motor.GetCount(@not_inversed_motor)
  EndWhile
EndFunction

Function move_backward_acceleration(in number base_power, in number min_power, in number deg, in number acceleration, in number zame)
  normal_degrees = deg - acceleration - zame
  reset()
  c = Motor.GetCount(@not_inversed_motor) * -1
  While c < acceleration
    p = (c / acceleration)
    If p > 1 Then
      p = 1
    EndIf
    power = p * base_power
    If power < min_power Then
      power = min_power
    EndIf
    LCD.StopUpdate()
    LCD.Clear()
    LCD.Text(1, 0, 0, 2, power + " " + c)
    LCD.Update()
    delta = (Motor.GetCount(@left_motor) * @left_forward - Motor.GetCount(@right_motor) * @right_forward) * p * -1
    left_power = power - delta
    right_power = power + delta
    Motor.StartSync(@motors, @left_forward * left_power * -1, @right_forward * right_power * -1)
    c = Motor.GetCount(@not_inversed_motor) * -1
  EndWhile
  reset()
  c = 0
  While c < normal_degrees
    delta = (Motor.GetCount(@left_motor) * @left_forward - Motor.GetCount(@right_motor) * @right_forward) * -1
    left_power = base_power - delta
    right_power = base_power + delta
    Motor.StartSync(@motors, @left_forward * left_power * -1, @right_forward * right_power * -1)
    c = Motor.GetCount(@not_inversed_motor) * -1
  EndWhile
  reset()
  c = 0
  While c < zame
    p = c / zame
    power = base_power * (1 - p)
    If power < min_power Then
      power = min_power
    EndIf
    delta = (Motor.GetCount(@left_motor) * @left_forward - Motor.GetCount(@right_motor) * @right_forward) * (1 - p) * -1
    left_power = power - delta
    right_power = power + delta
    Motor.StartSync(@motors, @left_forward * left_power * -1, @right_forward * right_power * -1)
    c = Motor.GetCount(@not_inversed_motor) * -1
  EndWhile
EndFunction

Function motor_forward_acceleration(in string motor, in number forward, in number base_power, in number min_power, in number deg, in number acceleration, in number zame)
  normal_deg = deg - acceleration - zame
  Motor.ResetCount(motor)
  c = 0
  While c < acceleration
    power = c / acceleration * (base_power - min_power) + min_power
    LCD.Clear()
    LCD.Text(1, 0, 0, 2, power)
    Motor.Start(motor, power * forward)
    c = Motor.GetCount(motor) * forward
  EndWhile
  Motor.Move(motor, base_power * forward, normal_deg, "False")
  Motor.ResetCount(motor)
  c = 0
  While c < zame
    p = c / zame
    power = ((base_power - min_power) * (1 - p)) + min_power
    LCD.Clear()
    LCD.Text(1, 0, 0, 2, "p" + power)
    Motor.Start(motor, power * forward)
    c = Motor.GetCount(motor) * forward
  EndWhile
EndFunction

Function motor_backward_acceleration(in string motor, in number forward, in number base_power, in number min_power, in number deg, in number acceleration, in number zame)
  normal_deg = deg - acceleration - zame
  Motor.ResetCount(motor)
  c = 0
  While c < acceleration
    power = (c / acceleration * (base_power - min_power)) + min_power
    Motor.Start(motor, forward * power * -1)
    c = Motor.GetCount(motor) * forward * -1
  EndWhile
  Motor.Move(motor, forward * base_power * -1, normal_deg, "False")
  Motor.ResetCount(motor)
  c = 0
  While c < zame
    p = c / zame
    power = ((base_power - min_power) * (1 - p)) + min_power
    Motor.Start(motor, forward * power * -1)
    c = Motor.GetCount(motor) * forward * -1
  EndWhile
EndFunction

' ---- Основная номинация ----
Sub main
  Time.Reset9()
  ' --- Проезд из правой зоны старта в левую ---
  is_left_open = "True"
  
  Sensor.SetMode(right_sensor, 0)
  col = Sensor.ReadRawValue(right_sensor, 0)
  Sensor.SetMode(right_sensor, 1)
  a = 97
  If col <> 0 Then
    is_left_open = "True"
    Motor.StartSync(motors, left_forward * 30, right_forward * 30)
    Program.Delay(1500)
    Motor.Move(right_motor, right_forward * -20, 300, "True")
    
    reset_values()
    
    Motor.ResetCount(not_inversed_motor)
    Motor.StartSync(motors, left_forward * 80, right_forward * 90)
    deg = 1200
    While Motor.GetCount(not_inversed_motor) < deg
    EndWhile
    Motor.StartSync(motors, left_forward * 50, right_forward * 55)
    While Sensor.ReadPercent(line_sensor) < 23
    EndWhile
    While Sensor.ReadPercent(line_sensor) > 10
    EndWhile
    stop_right()
    
    ' 290, 240
    ' 260, 230
    'a = 97
    delay()
    Motor.Move(left_motor, left_forward * 20, 270, "True")
    delay()
    Motor.Move(right_motor, right_forward * 20, 235, "True")
    Motor.ResetCount(not_inversed_motor)
    While Motor.GetCount(not_inversed_motor) < 290
      Ultrasonic_slow()
    EndWhile
    stop()
  Else
    is_left_open = "False"
    Motor.StartSync(motors, left_forward * -40, right_forward * -40)
    Program.Delay(2000)
    stop()
    'Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 100, "True")
    'Motor.Move(left_motor, left_forward * 20, 360, "True")
    Motor.Move(left_motor, 20 * left_forward, 420, "True")
    Motor.StartSync(motors, left_forward * 100, right_forward * 90)
    
    deg = 100
    While Motor.GetCount(not_inversed_motor) < deg
    EndWhile
    Motor.StartSync(motors, left_forward * 60, right_forward * 50)
    While Sensor.ReadPercent(line_sensor) < 23
    EndWhile
    While Sensor.ReadPercent(line_sensor) > 15
    EndWhile
    stop()
    Motor.Move(right_motor, right_forward * 20, 460, "True")
    Motor.StartSync(motors, left_forward * -40, right_forward * -40)
    Program.Delay(1000)
    stop()
    Motor.StartSync(motors, left_forward * 50, right_forward * 50)
    Program.Delay(2500)
    stop()
    Motor.Move(right_motor, right_forward * -20, 250, "True")
    Motor.Move(left_motor, left_forward * 20, 125, "True")
    Program.Delay(1000)
    Motor.StartSync(motors, left_forward * -20, right_forward * -20)
    While Sensor.ReadPercent(line_sensor) > 10
    EndWhile
    Motor.ResetCount(not_inversed_motor)
    While Motor.GetCount(not_inversed_motor) < 500
      Ultrasonic_power(20, a)
    EndWhile
    stop()
  EndIf
  
  ' Коричневая зона, первый элемент
  
  delay()
  b = Sensor.ReadRawValue(right_sensor, 0)
  c = 500
  update_display()
  
  If b > 80 Then
    Sensor.SetMode(right_sensor, 2)
    g = Sensor.ReadRawValue(right_sensor, 0)
    Sensor.SetMode(right_sensor, 1)
    If g > 100 Then
      ' Человек
      object = "Human"
      update_display()
      
      brown = "True"
      brown_man = "True"
      men_count = men_count + 1
    Else
      ' Огонь
      object = "Fire"
      update_display()
      brown = "True"
      
      'deg = 95
      'move_backward()
      kick_water()
      'move_forward()
      fire_count = fire_count + 1
    EndIf
    ' b < 16
  ElseIf b > 5 And chem = "False" Then
    ' Отличаем химикат от пустоты в режиме белого
    
    Sensor.SetMode(right_sensor, 4)
    w = Sensor.ReadRawValue(right_sensor, 0)
    Sensor.SetMode(right_sensor, 1)
    object = "None"
    update_display()
    
    ' 30
    'If w > 50 Or w < 15 Then
    If w > 29 Then
      ' Химикат
      object = "Chemical"
      update_display()
      chem = "True"
      brown = "True"
      is_chem_on_right = "True"
      
      take_chem_on_right()
    EndIf
  EndIf
  reset_values()
  
  Sensor.SetMode(line_sensor, 2)
  Motor.ResetCount(not_inversed_motor)
  stop()
  While Motor.GetCount(not_inversed_motor) < c Or Sensor.ReadRawValue(line_sensor, 0) <> 5
    Ultrasonic_slow()
  EndWhile
  stop()
  
  ' Коричневая зона, второй элемент
  reset_values()
  update_display()
  c = 350
  If brown = "False" Then
    delay()
    
    deg = 90
    move_backward()
    c = c + 110
    
    delay()
    b = Sensor.ReadRawValue(right_sensor, 0)
    update_display()
    
    If b > 80 Then
      Sensor.SetMode(right_sensor, 2)
      g = Sensor.ReadRawValue(right_sensor, 0)
      Sensor.SetMode(right_sensor, 1)
      If g > 100 Then
        ' Человек
        object = "Human"
        update_display()
        
        brown = "True"
        brown_man = "True"
        men_count = men_count + 1
      Else
        ' Огонь
        object = "Fire"
        update_display()
        
        brown = "True"
        ' 40
        'deg = 80
        'move_backward()
        'kick_water()
        'move_forward()
        move_backward_acceleration(20, 10, 80, 40, 40)
        stop()
        kick_water()
        move_forward_acceleration(20, 10, 80, 40, 40)
        stop()
        fire_count = fire_count + 1
      EndIf
      'ElseIf b > 12 Or b < 16 Then
      'Else
    ElseIf b > 17 And chem = "False" Then
      'Sensor.SetMode(right_sensor, 4)
      'w = Sensor.ReadRawValue(right_sensor, 0)
      'update_display()
      'Sensor.SetMode(right_sensor, 1)
      
      '  55, 30
      'If w > 55 Or w < 15 Then
      ' 50
      'If w > 50 Then
      ' Химикат
      object = "Chemical"
      update_display()
      chem = "True"
      brown = "True"
      is_chem_on_right = "True"
      
      take_chem_on_right()
      'EndIf
    EndIf
  EndIf
  reset_values()
  
  Motor.ResetCount(not_inversed_motor)
  While Motor.GetCount(not_inversed_motor) < c
    Ultrasonic_slow()
  EndWhile
  p_u = 1
  
  If chem = "False" Then
    Motor.StartSync(motors, left_forward * 20, right_forward * 20)
  Else
    Motor.StartSync(motors, left_forward * 30, right_forward * 30)
  EndIf
  Program.Delay(1000)
  stop()
  
  ' Красная зона
  take_red_right = "False"
  take_red_left = "False"
  
  ' Красная зона, справа
  delay()
  b = Sensor.ReadRawValue(right_sensor, 0)
  update_display()
  If b > 85 Then
    Sensor.SetMode(right_sensor, 2)
    delay()
    g = Sensor.ReadRawValue(right_sensor, 0)
    Sensor.SetMode(right_sensor, 1)
    If g > 100 Then
      ' Человек
      object = "R: Human"
      update_display()
      
      red = "True"
      red_man = "True"
      men_count = men_count + 1
    Else
      ' Огонь
      red = "True"
      object = "R: Fire"
      update_display()
      
      kick_water()
      fire_count = fire_count + 1
    EndIf
  ElseIf b > 10 And chem = "False" Then
    ' Химикат
    chem = "True"
    red = "True"
    object = "R: Chem"
    is_chem_on_right = "True"
    update_display()
    
    take_red_right = "True"
  EndIf
  reset_values()
  
  ' Красная зона, слева
  
  If red = "False" Then
    delay()
    b = Sensor.ReadRawValue(left_sensor, 0)
    update_display()
    
    ' 120
    If b > 90 Then
      Sensor.SetMode(left_sensor, 2)
      delay()
      g = Sensor.ReadRawValue(left_sensor, 0)
      Sensor.SetMode(left_sensor, 1)
      If g > 100 Then
        ' Человек
        object = "L: Human"
        update_display()
        
        red = "True"
        red_man = "True"
        men_count = men_count + 1
      Else
        ' Огонь
        red = "True"
        object = "L: Fire"
        update_display()
        
        kick_water()
        fire_count = fire_count + 1
      EndIf
    Else
      'Sensor.SetMode(left_sensor, 2)
      'g = Sensor.ReadRawValue(left_sensor, 0)
      'Sensor.SetMode(left_sensor, 1)
      'If g > 25 Or g < 18 Then
      Motor.Move(right_motor, right_forward * -20, 30, "True")
      Program.Delay(500)
      b = Sensor.ReadRawValue(left_sensor, 0)
      LCD.Clear()
      LCD.Text(1, 0, 0, 2, b)
      Motor.Start(right_motor, right_forward * 20)
      Program.Delay(500)
      If b > 28 And chem = "False" Then
        stop()
        ' Химикат
        chem = "True"
        red = "True"
        object = "L: Chem"
        is_chem_on_left = "True"
        update_display()
        
        take_red_left = "True"
      EndIf
    EndIf
  EndIf
  reset_values()
  ' 140, 140, 120, 120
  chem_back =  140
  no_back = 130
  If take_red_right = "True" Then
    ' Забор химиката справа
    
    Motor.ResetCount(not_inversed_motor)
    For i = 1 To 20
      Motor.StartSync(motors, left_forward * -1 * i, right_forward * -1 * i)
      Program.Delay(30)
    EndFor
    Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 280 + Motor.GetCount(not_inversed_motor), "True")
    delay()
    
    Motor.Move(left_motor, left_forward * 20, 70, "True")
    delay()
    
    Motor.Move(grabber_motor, 100, 175, "True")
    
    Motor.ResetCount(not_inversed_motor)
    For i = 1 To 20
      Motor.StartSync(motors, left_forward * i, right_forward * i)
      Program.Delay(20)
    EndFor
    Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 150 - Motor.GetCount(not_inversed_motor), "True")
    stop()
    
    Motor.Move(grabber_motor, 100, 100, "True")
    delay()
    
    Motor.ResetCount(not_inversed_motor)
    For i = 1 To 20
      Motor.StartSync(motors, left_forward * -1 * i, right_forward * -1 * i)
      Program.Delay(20)
    EndFor
    Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 150 + Motor.GetCount(not_inversed_motor), "True")
    stop()
    delay()
    
    Motor.Move(left_motor, left_forward * -20, 70, "True")
    delay()
    
    Motor.StartSync(motors, left_forward * 40, right_forward * 40)
    Program.Delay(1500)
    stop()
    delay()
    
    Motor.ResetCount(not_inversed_motor)
    For i = 1 To 20
      Motor.StartSync(motors, left_forward * -1 * i, right_forward * -1 * i)
      Program.Delay(20)
    EndFor
    Motor.MoveSync(motors, left_forward * -20, right_forward * -20, chem_back + Motor.GetCount(not_inversed_motor), "True")
    stop()
    delay()
  ElseIf take_red_left = "True" Then
    ' Забор химиката слева
    Motor.ResetCount(not_inversed_motor)
    For i = 1 To 20
      Motor.StartSync(motors, left_forward * -1 * i, right_forward * -1 * i)
      Program.Delay(30)
    EndFor
    Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 280 + Motor.GetCount(not_inversed_motor), "True")
    delay()
    
    Motor.Move(right_motor, right_forward * 20, 70, "True")
    delay()
    
    Motor.Move(grabber_motor, 100, 175, "True")
    
    Motor.ResetCount(not_inversed_motor)
    For i = 1 To 20
      Motor.StartSync(motors, left_forward * i, right_forward * i)
      Program.Delay(20)
    EndFor
    Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 150 - Motor.GetCount(not_inversed_motor), "True")
    stop()
    
    Motor.Move(grabber_motor, 100, 100, "True")
    delay()
    
    Motor.ResetCount(not_inversed_motor)
    For i = 1 To 20
      Motor.StartSync(motors, left_forward * -1 * i, right_forward * -1 * i)
      Program.Delay(20)
    EndFor
    Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 150 + Motor.GetCount(not_inversed_motor), "True")
    stop()
    delay()
    
    Motor.Move(right_motor, right_forward * -20, 70, "True")
    delay()
    
    Motor.StartSync(motors, left_forward * 40, right_forward * 40)
    Program.Delay(1000)
    stop()
    delay()
    
    Motor.ResetCount(not_inversed_motor)
    For i = 1 To 20
      Motor.StartSync(motors, left_forward * -1 * i, right_forward * -1 * i)
      Program.Delay(20)
    EndFor
    Motor.MoveSync(motors, left_forward * -20, right_forward * -20, chem_back + Motor.GetCount(not_inversed_motor), "True")
    delay()
  Else
    ' Если химиката нет, просто отъезд
    
    deg = no_back
    move_backward()
  EndIf
  
  Motor.MoveSync(motors, left_forward * 20, right_forward * -20, 180, "True")
  stop()
  delay()
  
  Motor.StartSync(motors, left_forward * -30, right_forward * -30)
  Program.Delay(700)
  stop()
  
  a = Sensor.ReadRawValue(ultrasonic, 0) + 5
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 430, "True")
  Motor.ResetCount(not_inversed_motor)
  While Motor.GetCount(not_inversed_motor) < 200
    Ultrasonic_fast()
  EndWhile
  
  Motor.ResetCount(not_inversed_motor)
  Motor.StartSync(motors, left_forward * 20, right_forward * 20)
  Sensor.SetMode(line_sensor, 0)
  While Sensor.ReadPercent(line_sensor) > 20 Or Motor.GetCount(not_inversed_motor) < 220
  EndWhile
  stop()
  delay()
  ' 95
  deg = 92
  move_backward()
  Sensor.SetMode(line_sensor, 0)
  
  ' Жёлтая зона, первый элемент
  
  delay()
  b = Sensor.ReadRawValue(left_sensor, 0)
  update_display()
  
  ' 55
  If b > 45 Then
    Sensor.SetMode(left_sensor, 2)
    delay()
    g = Sensor.ReadRawValue(left_sensor, 0)
    Sensor.SetMode(left_sensor, 1)
    If g > 100 Then
      ' Человек
      object = "Human"
      update_display()
      
      yellow = "True"
      yellow_man = "True"
      men_count = men_count + 1
    Else
      ' Огонь
      yellow = "True"
      object = "Fire"
      update_display()
      
      'deg = 100
      'move_backward()
      'kick_water()
      'move_forward()
      move_backward_acceleration(20, 10, 100, 50, 50)
      stop()
      kick_water()
      move_forward_acceleration(20, 10, 100, 100, 0)
      'stop()
      fire_count = fire_count + 1
    EndIf
  Else
    ultra = Sensor.ReadRawValue(ultrasonic, 0)
    LCD.Clear()
    LCD.Text(1, 0, 0, 2, ultra)
    Program.Delay(1000)
    If ultra < 85 And chem = "False" Then
      ' Химикат
      chem = "True"
      yellow = "True"
      object = "Chemical"
      is_chem_on_left = "True"
      update_display()
      
      take_chem_on_left_accurate()
    EndIf
  EndIf
  reset_values()
  
  If object = "Fire" Then
    move_forward_acceleration(30, 10, 115, 0, 0)
  Else
    move_forward_acceleration(30, 10, 115, 115, 0)
  EndIf
  'deg = 115
  'move_forward()
  ' - 5
  a = a - 0
  Motor.ResetCount(not_inversed_motor)
  While Motor.GetCount(not_inversed_motor) < 250
    Ultrasonic_fast()
  EndWhile
  Motor.StartSync(motors, left_forward * 20, right_forward * 20)
  Program.Delay(2000)
  stop()
  
  ' Зелёная зона, первый элемент
  
  delay()
  b = Sensor.ReadRawValue(left_sensor, 0)
  update_display()
  If b > 55 Then
    Sensor.SetMode(left_sensor, 2)
    delay()
    g = Sensor.ReadRawValue(left_sensor, 0)
    Sensor.SetMode(left_sensor, 1)
    
    If g > 70 Then
      ' Человек
      object = "Human"
      is_chem_on_right = "True"
      update_display()
      
      green = "True"
      green_man = "True"
      men_count = men_count + 1
    Else
      ' Огонь
      green = "True"
      object = "Fire"
      update_display()
      
      kick_water()
      fire_count = fire_count + 1
    EndIf
  ElseIf b > 15 Then
    'Sensor.SetMode(left_sensor, 4)
    'delay()
    'w = Sensor.ReadRawValue(left_sensor, 0)
    'Sensor.SetMode(left_sensor, 1)
    'update_display()
    ultra = Sensor.ReadRawValue(ultrasonic, 0)
    LCD.Clear()
    LCD.Text(1, 0, 0, 2, ultra)
    Program.Delay(1000)
    
    'If w > 60 Then
    If ultra < 85 And chem = "False" Then
      ' Химикат
      chem = "True"
      green = "True"
      object = "Chemical"
      is_chem_on_right = "True"
      update_display()
      
      stop()
      Motor.ResetCount(left_motor)
      For i = 1 To 20
        Motor.Start(left_motor, left_forward * -1 * i)
        Program.Delay(30)
      EndFor
      Motor.Move(left_motor, -20 * left_forward, 260 + (Motor.GetCount(left_motor) * left_forward), "True")
      stop()
      Motor.Move(grabber_motor, 50, 165, "True")
      Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 80, "True")
      delay()
      Motor.Move(grabber_motor, 50, 100, "True")
      delay()
      
      Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 80, "True")
      stop()
      Program.Delay(1000)
      
      Motor.ResetCount(left_motor)
      For i = 1 To 20
        Motor.Start(left_motor, left_forward * i)
        Program.Delay(30)
      EndFor
      Motor.Move(left_motor, 20 * left_forward, 260 - (Motor.GetCount(left_motor) * left_forward), "True")
      
      Motor.Start(right_motor, 30 * right_forward)
      Program.Delay(1000)
      stop()
    EndIf
  EndIf
  reset_values()
  
  Motor.Move(right_motor, -20 * right_forward, 270, "True")
  Motor.Move(left_motor, 20 * left_forward, 104, "True")
  
  'Sensor.SetMode(line_sensor, 2)
  Motor.ResetCount(not_inversed_motor)
  ' 105
  a = 102
  While Motor.GetCount(not_inversed_motor) < 100
    Ultrasonic_slow()
  EndWhile
  Motor.StartSync(motors, left_forward * 20, right_forward * 20)
  'While Sensor.ReadRawValue(line_sensor, 0) <> 1
  While Sensor.ReadPercent(line_sensor) > 6
  EndWhile
  stop()
  Sensor.SetMode(line_sensor, 0)
  
  ' Зелёная зона, второй элемент
  
  If green = "False" Then
    delay()
    ' 115
    deg = 110
    move_backward()
    delay()
    
    b = Sensor.ReadRawValue(left_sensor, 0)
    If b > 70 Then
      Sensor.SetMode(left_sensor, 2)
      delay()
      g = Sensor.ReadRawValue(left_sensor, 0)
      Sensor.SetMode(left_sensor, 1)
      If g > 100 Then
        ' Человек
        object = "Human"
        update_display()
        
        green = "True"
        green_man = "True"
        men_count = men_count + 1
      Else
        ' Огонь
        green = "True"
        object = "Fire"
        update_display()
        
        deg = 115
        move_backward()
        kick_water()
        move_forward()
        delay()
        fire_count = fire_count + 1
      EndIf
    Else
      ultra = Sensor.ReadRawValue(ultrasonic, 0)
      
      If ultra < 85 And chem = "False" Then
        ' Химикат
        chem = "True"
        green = "True"
        object = "Chemical"
        is_chem_on_left = "True"
        update_display()
        
        take_chem_on_left_accurate()
      EndIf
    EndIf
    update_display()
    
    stop()
    deg = 170
    move_forward()
  Else
    ' 55
    deg = 60
    move_forward()
  EndIf
  
  ' Синяя зона, первый элемент
  
  delay()
  b = Sensor.ReadRawValue(left_sensor, 0)
  If b > 70 Then
    Sensor.SetMode(left_sensor, 2)
    delay()
    g = Sensor.ReadRawValue(left_sensor, 0)
    Sensor.SetMode(left_sensor, 1)
    If g > 70 Then
      ' Человек
      object = "Human"
      update_display()
      
      blue = "True"
      blue_man = "True"
      men_count = men_count + 1
    Else
      ' Огонь
      blue = "True"
      object = "Fire"
      update_display()
      
      kick_water()
      fire_count = fire_count + 1
    EndIf
  Else
    ultra = Sensor.ReadRawValue(ultrasonic, 0)
    
    If ultra < 85 And chem = "False" Then
      ' Химикат
      chem = "True"
      blue = "True"
      object = "Chemical"
      is_chem_on_left = "True"
      update_display()
      
      take_chem_on_left()
    EndIf
  EndIf
  reset_values()
  
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 100, "True")
  a = a + 7
  Motor.ResetCount(not_inversed_motor)
  While Motor.GetCount(not_inversed_motor) < 310
    Ultrasonic_fast()
  EndWhile
  
  ' 115, 120, 110
  deg = 105
  move_forward()
  ' Синяя зона, второй элемент
  
  If blue = "False" Then
    Sensor.SetMode(left_sensor, 1)
    delay()
    b = Sensor.ReadRawValue(left_sensor, 0)
    update_display()
    
    If b > 55 Then
      Sensor.SetMode(left_sensor, 2)
      delay()
      g = Sensor.ReadRawValue(left_sensor, 0)
      Sensor.SetMode(left_sensor, 1)
      
      If g > 70 Then
        ' Человек
        object = "Human"
        update_display()
        
        blue = "True"
        blue_man = "True"
        men_count = men_count + 1
      Else
        ' Огонь
        blue = "True"
        object = "Fire"
        update_display()
        
        deg = 115
        move_backward()
        kick_water()
        move_forward()
        fire_count = fire_count + 1
      EndIf
    Else
      ultra = Sensor.ReadRawValue(ultrasonic, 0)
      
      If ultra < 85 And chem = "False" Then
        ' Химикат
        chem = "True"
        blue = "True"
        object = "Chemical"
        is_chem_on_left = "True"
        update_display()
        
        take_chem_on_left_accurate()
      EndIf
    EndIf
    reset_values()
  EndIf
  stop()
  Sensor.SetMode(line_sensor, 0)
  ' new
  'Motor.Move(left_motor, left_forward * 20, 15, "True")
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 200, "False")
  Motor.StartSync(motors, left_forward * 20, right_forward * 20)
  
  While Sensor.ReadPercent(line_sensor) > 8
  EndWhile
  stop()
  
  Motor.Move(left_motor, left_forward * 20, 200, "False")
  Motor.Start(left_motor, left_forward * 20)
  While Sensor.ReadPercent(line_sensor) > 8
  EndWhile
  Motor.Move(left_motor, left_forward * 20, 50, "True")
  stop()
  
  Motor.ResetCount(not_inversed_motor)
  While Motor.GetCount(not_inversed_motor) < 200
    line()
  EndWhile
  While Sensor.ReadPercent(line_sensor) > 5
    line()
  EndWhile
  stop()
  
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 80, "True")
  stop()
  delay()
  Motor.MoveSync(motors, left_forward * 20, right_forward * -20, 180, "True")
  stop()
  delay()
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 25, "False")
  Motor.ResetCount(not_inversed_motor)
  While Motor.GetCount(not_inversed_motor) < 290
    NowError = Sensor.ReadPercent(1) - 17
    dif = LastError - NowError
    integral = (integral + NowError) / 10
    derivative = NowError - LastError
    up = ((NowError * p) + (integral * d))
    Motor.StartPower("B", 20 - up)
    Motor.StartPower("A", -20 - up)
    LastError = NowError
  EndWhile
  'deg = 135
  'move_forward()
  move_forward_acceleration(20, 10, 135, 0, 135)
  stop()
  
  ' Белая зона, первый элемент
  delay()
  b = Sensor.ReadRawValue(left_sensor, 0)
  update_display()
  
  ' 140, 80
  If b > 60 Then
    Sensor.SetMode(left_sensor, 2)
    delay()
    g = Sensor.ReadRawValue(left_sensor, 0)
    Sensor.SetMode(left_sensor, 1)
    ' 100, 70
    If g > 80 Then
      ' Человек
      object = "Human"
      update_display()
      
      white = "True"
      white_man = "True"
      men_count = men_count + 1
    Else
      ' Огонь
      white = "True"
      object = "FIre"
      update_display()
      
      kick_water()
      fire_count = fire_count + 1
    EndIf
  Else
    ultra = Sensor.ReadRawValue(ultrasonic, 0)
    If ultra < 85 And chem = "False" Then
      ' Химикат
      white = "True"
      object = "Chemical"
      is_chem_on_left = "True"
      chem = "True"
      update_display()
      
      take_chem_on_left_accurate()
      Motor.Move(left_motor, 10 * left_forward, 10, "True")
    EndIf
  EndIf
  reset_values()
  
  ' Белая зона, второй элемент
  c = 710
  yellow_object = "unknown"
  If yellow = "False" And white = "True" Then
    yellow_object = "unknown"
    If men_count = 1 Then
      yellow_object = "man"
      yellow = "True"
      yellow_man = "True"
    ElseIf fire_count = 1 Then
      yellow_object = "fire"
    ElseIf chem = "False" Then
      yellow_object = "chem"
    ElseIf men_count = 2 And fire_count = 2 And chem = "True" THen
      yellow = "True"
      yellow_object = "none"
    EndIf
  EndIf
  If yellow = "False" Or white = "False" Then
    ''180
    'deg = 180
    'move_forward()
    ''491, 500, 503
    'a = 507
    'Motor.ResetCount(not_inversed_motor)
    ''170
    'While Motor.GetCount(not_inversed_motor) < 120
    'Ultrasonic_none()
    'EndWhile
    ''170
    'deg = 225
    'move_forward()
    ' 15
    
    'Motor.Move(left_motor, 10 * left_forward, 10, "True")
    'stop()
    'delay()
    
    'deg = 180 + 120 + 225
    ' 525
    
    'deg = 530
    'move_forward_right()
    ' 530, 20, 10, 200
    
    ' 530, 525, 520, 515
    move_forward_acceleration(20, 20, 515, 200, 200)
    stop()
    
    If white = "False" Then
      delay()
      b = Sensor.ReadRawValue(left_sensor, 0)
      update_display()
      
      ' 40
      If b > 50 Then
        Sensor.SetMode(left_sensor, 2)
        delay()
        g = Sensor.ReadRawValue(left_sensor, 0)
        Sensor.SetMode(left_sensor, 1)
        ' 100
        If g > 70 Then
          ' Человек
          object = "Human"
          update_display()
          
          white = "True"
          white_man = "True"
          men_count = men_count + 1
        Else
          ' Огонь
          white = "True"
          object = "Fire"
          update_display()
          
          deg = 115
          move_backward()
          kick_water()
          move_forward()
          fire_count = fire_count + 1
        EndIf
      Else
        ultra = Sensor.ReadRawValue(ultrasonic, 0)
        LCD.Clear()
        LCD.Text(1, 0, 0, 2, ultra)
        Program.Delay(3000)
        If ultra < 85 And chem = "False" Then
          ' Химикат
          white = "True"
          chem = "True"
          object = "Chemical"
          is_chem_on_left = "True"
          update_display()
          
          Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 160, "True")
          stop()
          
          Motor.Move(grabber_motor, 50, 165, "True")
          
          Motor.ResetCount(right_motor)
          For i = 1 To 20
            Motor.Start(right_motor, i * right_forward)
            Program.Delay(10)
          EndFor
          Motor.Move(right_motor, 20 * right_forward, 160 - (Motor.GetCount(right_motor) * right_forward), "True")
          delay()
          
          Motor.Move(grabber_motor, 50, 100, "True")
          stop()
          delay()
          
          Motor.ResetCount(right_motor)
          For i = 1 To 20
            Motor.Start(right_motor, right_forward * i * -1)
            Program.Delay(10)
          EndFor
          Motor.Move(right_motor, right_forward * -20, 160 + (Motor.GetCount(right_motor) * right_forward), "True")
          stop()
          delay()
          
          Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 160, "True")
        EndIf
      EndIf
      reset_values()
    EndIf
    If yellow = "False" Then
    yellow_object = "unknown"
    If men_count = 1 Then
      yellow_object = "man"
      yellow = "True"
      yellow_man = "True"
    ElseIf fire_count = 1 Then
      yellow_object = "fire"
    ElseIf chem = "False" Then
      yellow_object = "chem"
    ElseIf men_count = 2 And fire_count = 2 And chem = "True" Then
      yellow = "True"
      yellow_object = "none"
      EndIf
    EndIf
    If yellow = "False" Then
      If yellow_object = "fire" Then
        Motor.Move(left_motor, left_forward * 20, 30, "True")
        deg = 80
        move_forward()
        stop()
        kick_water()
        move_backward()
                Motor.Move(left_motor, left_forward * -20, 35, "True")
        stop()
      ElseIf yellow_object = "chem" Then
        deg = 160
        move_forward()
        stop()
        take_chem_on_left()
        move_backward()
        stop()
        chem = "True"
        c = c - 210
      ElseIf yellow_object = "man" Then
        yellow_man = "True"
      EndIf
      yellow = "True"
    EndIf
    'If yellow = "False" And yellow_object = "" Then
    'delay()
    ''deg = 160
    ''move_forward()
    'move_forward_acceleration(20, 10, 160, 80, 80)
    'stop()
    
    '' Жёлтая зона, второй элемент
    'Sensor.SetMode(left_sensor, 1)
    'delay()
    'b = Sensor.ReadRawValue(left_sensor, 0)
    'update_display()
    
    'If b > 40 Then
    'Sensor.SetMode(left_sensor, 2)
    'delay()
    'g = Sensor.ReadRawValue(left_sensor, 0)
    'Sensor.SetMode(left_sensor, 1)
    'If g > 50 Then
    '' Человек
    'object = "Human"
    'update_display()
    
    'yellow = "True"
    'yellow_man = "True"
    'men_count = men_count + 1
    'Else
    '' Огонь
    'object = "Fire"
    'update_display()
    
    'kick_water()
    'fire_count = fire_count + 1
    'EndIf
    'Else
    'ultra = Sensor.ReadRawValue(ultrasonic, 0)
    'If ultra < 85 And chem = "False" Then
    '' Химикат
    'yellow = "True"
    'chem = "True"
    'object = "Chemical"
    'is_chem_on_left = "True"
    'update_display()
    
    'take_chem_on_left()
    'EndIf
    'EndIf
    'reset_values()
    'deg = 160
    'move_backward()
    'EndIf
    
    Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 165, "True")
    stop()
    delay()
    
    Motor.MoveSync(motors, left_forward * -20, right_forward * 20, 380, "True")
    stop()
    delay()
    
    Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 300, "True")
  Else
    deg = 200
    move_backward()
    Motor.MoveSync(motors, left_forward * -20, right_forward * 20, 370, "True")
    c = c - 220
  EndIf
  
  ' 474, 480, 485
  
  a = 490
  Motor.ResetCount(not_inversed_motor)
  While Motor.GetCount(not_inversed_motor) < c
  Ultrasonic_fast()
  EndWhile
  'ultrasonic_zamed(490, 50, 20, c, 200)
  
  stop()
  delay()
  If chem = "True" Then
    Motor.Move(grabber_motor, -50, 115, "True")
  EndIf
  delay()
  
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 300, "True")
  stop()
  If chem = "True" Then
    Motor.Move(grabber_motor, -50, 120, "True")
  EndIf
  
  If is_left_open = "True" Then
    Motor.MoveSync(motors, left_forward * 20, right_forward * -20, 180, "True")
    Motor.StartSync(motors, left_forward * 40, right_forward * 40)
    Program.Delay(2000)
    stop()
    
    Motor.Move(left_motor, left_forward * -20, 190, "True")
    Motor.Move(right_motor, right_forward * 20, 140, "True")
    Motor.Move(left_motor, left_forward * 20, 50, "True")
    Motor.Move(right_motor, right_forward * 20, 50, "True")
    
    Motor.ResetCount(not_inversed_motor)
    Motor.StartSync(motors, left_forward * 93, right_forward * 90)
    While Motor.GetCount(not_inversed_motor) < 1050
    EndWhile
    Motor.StartSync(motors, left_forward * 60, right_forward * 50)
    Program.Delay(3000)
    stop()
    take_cubes_inversed()
    
    Motor.MoveSync(motors, left_forward * -15, right_forward * -15, 140, "True")
    
    If green_man = "True" And yellow_man = "True" Then
      take_near_double_inversed()
      finish_after_near_inversed()
    ElseIf yellow_man = "True" And red_man = "True" Then
      Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 180, "True")
      take_near_double_inversed()
      finish_after_near_inversed()
    ElseIf red_man = "True" And green_man = "True" Then
      take_near_double_long_inversed()
      finish_after_near_inversed()
    Else
      If green_man = "True" And blue_man = "True" Then
        take_both_inversed()
      ElseIf green_man = "True" Then
        take_near_inversed()
      ElseIf blue_man = "True" Then
        take_long_inversed()
        Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 210, "True")
      Else
        Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 210, "True")
      EndIf
      
      If yellow_man = "True" And white_man = "True" Then
        take_both_inversed()
      ElseIf yellow_man = "True" Then
        take_near_inversed()
      ElseIf white_man = "True" Then
        take_long_inversed()
        Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 210, "True")
      Else
        Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 210, "True")
      EndIf
      
      If red_man = "True" And brown_man = "True" Then
        take_both_inversed()
      ElseIf red_man = "True" Then
        take_near_inversed()
      ElseIf brown_man = "True" Then
        take_long_inversed()
        Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 210, "True")
      Else
        Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 210, "True")
      EndIf
      
      Motor.Move(left_motor, -15 * left_forward, 360, "True")
      Motor.StartSync(motors, left_forward * -25, right_forward * -25)
      Program.Delay(1500)
      stop()
    EndIf
  Else
    Motor.MoveSync(motors, left_forward * -20, right_forward * 20, 180, "True")
    Motor.StartSync(motors, left_forward * 40, right_forward * 40)
    Program.Delay(2000)
    stop()
    
    'Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 150, "True")
    'Motor.Move(left_motor, left_forward * 40, 280, "True")
    
    '' 90 95
    'Motor.StartSync(motors, left_forward * 90, right_forward * 93)
    'Program.Delay(4500)
    'stop()
    Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 220, "True")
    Motor.Move(left_motor, left_forward * 20, 360, "True")
    a = 107
    'Time.Reset1()
    Motor.ResetCount(not_inversed_motor)
    'While Time.Get1() < 4500
    While Motor.GetCount(not_inversed_motor) < 1000
      ultrasonic_superfast()
    EndWhile
    Motor.StartSync(motors, left_forward * 50, right_forward * 50)
    Program.Delay(3000)
    stop()
    
    take_cubes()
    Motor.MoveSync(motors, left_forward * -15, right_forward * -15, 140, "True")
    
    If red_man = "True" And yellow_man = "True" Then
      take_near_double()
      finish_after_near()
    ElseIf yellow_man = "True" And green_man = "True" Then
      Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 180, "True")
      take_near_double()
      finish_after_near()
    ElseIf red_man = "True" And green_man = "True" Then
      take_near_double_long()
      finish_after_near()
    Else
      If red_man = "True" And brown_man = "True" Then
        take_both()
      ElseIf red_man = "True" Then
        take_near()
      ElseIf brown_man = "True" Then
        take_long()
        Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 210, "True")
      Else
        Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 210, "True")
      EndIf
      
      If yellow_man = "True" And white_man = "True" Then
        take_both()
      ElseIf yellow_man = "True" Then
        take_near()
      ElseIf white_man = "True" Then
        take_long()
        Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 210, "True")
      Else
        Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 210, "True")
      EndIf
      
      If green_man = "True" And blue_man = "True" Then
        take_both()
      ElseIf green_man = "True" Then
        take_near()
      ElseIf blue_man = "True" Then
        take_long()
        Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 210, "True")
      Else
        Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 210, "True")
      EndIf
      
      Motor.Move(right_motor, -15 * right_forward, 360, "True")
      Motor.StartSync(motors, left_forward * -25, right_forward * -25)
      Program.Delay(1500)
      stop()
    EndIf
  EndIf
  
  'If start_from_right = "True" Then
  'Motor.ResetCount(not_inversed_motor)
  'Motor.StartSync(motors, left_forward * 55, right_forward * 50)
  'While Motor.GetCount(not_inversed_motor) < 1200
  'EndWhile
  'While Sensor.ReadPercent(line_sensor) < 25
  'EndWhile
  'While Sensor.ReadPercent(line_sensor) > 10
  'EndWhile
  'stop()
  'delay()
  
  'Motor.Move(right_motor, right_forward * 30, 365, "True")
  'Motor.StartSync(motors, left_forward * 50, right_forward * 50)
  'stop()
  'Motor.MoveSync(motors, left_forward * -30, right_forward * -30, 140, "True")
  'Motor.Move(right_motor, right_forward * 30, 300, "True")
  'Motor.StartSync(motors, left_forward * 55, right_forward * 50)
  'Program.Delay(4000)
  'stop()
  'Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 20, "True")
  'Else
  
  'stop()
  'EndIf
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 20, "True")
  t = Time.Get9()
  mins = Math.Floor(t / 60000)
  secs = Math.Floor(Math.Remainder(t, 60000) / 1000)
  LCD.Clear()
  str = mins + ":" + secs
  LCD.Text(1, 10, 10, 2, str)
  
  'play_music()
  Program.Delay(100000000)
EndSub

main()
'move_forward_acceleration(20, 15, 530, 200, 200)
'take_cubes_inversed()
'take_cubes_inversed()