' Порты
left_motor = "A"
right_motor = "B"
' Неинвертированный мотор. Нужен, чтобы положительно мерить градусы
not_inversed_motor = "B"
grabber_motor = "C"
motors = left_motor + right_motor
water_motor = "D"
left_sensor = 2
right_sensor = 3
line_sensor = 1
ultrasonic = 4

' Переменные среды
right_forward = 1
left_forward = -1
a = 0
p = 1
d = 6
LastError = 0
NowError = 0
dif = 0
integral = 0
derivative = 0
up = 0
p_u = 1
d_u = 0
deg = 0

is_chem_on_right = "False"
is_chem_on_left = "False"

' Данные, полученные во время выполнения
brown = "False"
red = "False"
yellow = "False"
green = "False"
blue = "False"
white = "False"
chem = "False"

brown_man = "False"
red_man = "False"
yellow_man = "False"
green_man = "False"
blue_man = "False"
white_man = "False"

' Текущее состояние
cubes_count = 2

water_state = 0

object = ""
b = 0
w = 0

' Перевод сенсоров в нужный режим
Sensor.SetMode(line_sensor, 0)
Sensor.SetMode(right_sensor, 1)
Sensor.SetMode(left_sensor, 1)
Sensor.SetMode(ultrasonic, 0)

' Если низкий уровень заряда, уведомить оператора
If EV3.BatteryVoltage < 8 Then
  LCD.Clear()
  LCD.Text(1, 0, 0, 1, "Low battery")
  beep()
  delay()
  beep()
EndIf

' --- Движения с выравниванием ---
Sub line
  NowError = 20 - Sensor.ReadPercent(1)
  dif = LastError - NowError
  integral = (integral + NowError) / 10
  derivative = NowError - LastError
  up = ((NowError * p) + (integral * d))
  Motor.StartPower("B", 40 - up)
  Motor.StartPower("A", -40 - up)
  LastError = NowError
EndSub

Sub endless_line
  While "True"
    line()
  EndWhile
EndSub

Sub Ultrasonic_slow
  NowError = Sensor.ReadRawValue(ultrasonic, 0) - a
  dif = LastError - NowError
  integral = (integral + NowError) / 10
  derivative = NowError - LastError
  up = ((NowError * p_u) + (integral * d_u))
  Motor.StartPower(right_motor, (20 + up) * right_forward)
  Motor.StartPower(left_motor, (20 - up) * left_forward)
  LastError = NowError
EndSub

Sub Ultrasonic_fast
  NowError = Sensor.ReadRawValue(ultrasonic, 0) - a
  dif = LastError - NowError
  integral = (integral + NowError) / 10
  derivative = NowError - LastError
  up = ((NowError * p_u) + (integral * d_u))
  Motor.StartPower(right_motor, (35 + up) * right_forward)
  Motor.StartPower(left_motor, (35 - up) * left_forward)
  LastError = NowError
EndSub

' --- Базовые действия ---

Sub stop
  Motor.Stop(motors, "True")
EndSub

Sub stop_right
  Motor.Stop(right_motor, "True")
EndSub

Sub stop_left
  Motor.Stop(left_motor, "True")
EndSub

Sub delay
  Program.Delay(500)
EndSub

Sub beep
  Speaker.Tone(100, 500, 200)
EndSub

' --- Заборы химиката ---

Sub take_chem_on_left
  deg = 280
  move_forward()
  delay()
  Motor.ResetCount(left_motor)
  For i = 1 To 20
    Motor.Start(left_motor, left_forward * i * -1)
    Program.Delay(10)
  EndFor
  Motor.Move(left_motor, -20 * left_forward, 360 + (Motor.GetCount(left_motor) * left_forward), "True")
  
  Motor.Move(grabber_motor, 100, 165, "True")
  deg = 70
  move_forward()
  Motor.Move(grabber_motor, 100, 100, "True")
  
  delay()
  move_backward()
  
  Motor.ResetCount(left_motor)
  For i = 1 To 20
    Motor.Start(left_motor, left_forward * i)
    Program.Delay(10)
  EndFor
  Motor.Move(left_motor, 20 * left_forward, 350 - (Motor.GetCount(left_motor) * left_forward), "True")
  stop()
  delay()
  
  deg = 280
  move_backward()
  stop()
  delay()
EndSub

Sub take_chem_on_left_accurate
  Motor.ResetCount(not_inversed_motor)
  For i = 1 To 20
    Motor.StartSync(motors, left_forward * -1 * i, right_forward * -1 * i)
    Program.Delay(30)
  EndFor
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 170 + Motor.GetCount(not_inversed_motor), "True")
  stop()
  
  Motor.Move(grabber_motor, 50, 165, "True")
  
  Motor.ResetCount(right_motor)
  For i = 1 To 20
    Motor.Start(right_motor, i * right_forward)
    Program.Delay(10)
  EndFor
  Motor.Move(right_motor, 20 * right_forward, 160 - (Motor.GetCount(right_motor) * right_forward), "True")
  delay()
  
  Motor.Move(grabber_motor, 50, 100, "True")
  stop()
  delay()
  
  Motor.ResetCount(right_motor)
  For i = 1 To 20
    Motor.Start(right_motor, right_forward * i * -1)
    Program.Delay(10)
  EndFor
  Motor.Move(right_motor, right_forward * -20, 160 + (Motor.GetCount(right_motor) * right_forward), "True")
  stop()
  delay()
  
  Motor.ResetCount(not_inversed_motor)
  For i = 1 To 20
    Motor.StartSync(motors, left_forward * i, right_forward * i)
    Program.Delay(30)
  EndFor
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 170 - Motor.GetCount(not_inversed_motor), "True")
EndSub

Sub take_chem_on_right
  Motor.ResetCount(not_inversed_motor)
  For i = 1 To 20
    Motor.StartSync(motors, left_forward * -1 * i, right_forward * -1 * i)
    Program.Delay(30)
  EndFor
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 160 + Motor.GetCount(not_inversed_motor), "True")
  stop()
  
  Motor.Move(grabber_motor, 50, 165, "True")
  
  Motor.ResetCount(left_motor)
  For i = 1 To 20
    Motor.Start(left_motor, i * left_forward)
    Program.Delay(10)
  EndFor
  Motor.Move(left_motor, 20 * left_forward, 160 - (Motor.GetCount(left_motor) * left_forward), "True")
  delay()
  
  Motor.Move(grabber_motor, 50, 100, "True")
  stop()
  delay()
  
  Motor.ResetCount(left_motor)
  For i = 1 To 20
    Motor.Start(left_motor, left_forward * i * -1)
    Program.Delay(10)
  EndFor
  Motor.Move(left_motor, left_forward * -20, 160 + (Motor.GetCount(left_motor) * left_forward), "True")
  stop()
  delay()
  
  Motor.ResetCount(not_inversed_motor)
  For i = 1 To 20
    Motor.StartSync(motors, left_forward * i, right_forward * i)
    Program.Delay(30)
  EndFor
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 160 - Motor.GetCount(not_inversed_motor), "True")
EndSub

' Выброс воды
Sub kick_water
  If water_state = 0 Then
    Motor.Start(water_motor, -30)
    Program.Delay(1500)
    Motor.Stop(water_motor, "False")
    water_state = 1
  Else
    Motor.Start(water_motor, 30)
    Program.Delay(1500)
    Motor.Stop(water_motor, "False")
  EndIf
EndSub

' Движеня около чёрной линии
Sub turn_right_by_sensor
  Motor.ResetCount(left_motor)
  For i = 1 To 20
    Motor.StartSync(motors, left_forward * i, right_forward * i * -1)
    Program.Delay(10)
  EndFor
  Motor.MoveSync(motors, left_forward * 20, right_forward * -20, 100 - (Motor.GetCount(left_motor) * left_forward), "True")
  Motor.StartSync(motors, left_forward * 20, right_forward * i * -20)
  While Sensor.ReadPercent(line_sensor) > 10
  EndWhile
  stop()
  Motor.MoveSync(motors, left_forward * 20, right_forward * -20, 15, "True")
EndSub

Sub line_to_crossroad
  While Sensor.ReadPercent(line_sensor) > 10
    line()
  EndWhile
  stop()
EndSub

' --- Работа с экраном

Sub update_display
  LCD.StopUpdate()
  LCD.Clear()
  LCD.Text(1, 10, 10, 2, object)
  LCD.Text(1, 10, 50, 2, "Red: " + b)
  LCD.Text(1, 10, 75, 2, "White: " + w)
  LCD.Update()
EndSub

Sub reset_values
  object = "None"
  b = 0
  w = 0
EndSub

' --- Развозы ---

Sub close_cubes
  Motor.Move(water_motor, -10, 70, "True")
EndSub

Sub open_cubes
  Motor.Move(water_motor, 10, 70, "True")
EndSub

Sub take_cubes
  stop()
  delay()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 150, "True")
  delay()
  Motor.Start(right_motor, right_forward * -30)
  Program.Delay(1500)
  stop()
  delay()
  Motor.ResetCount(not_inversed_motor)
  a = 227
  While Motor.GetCount(not_inversed_motor) < 930
    Ultrasonic_slow()
  EndWhile
  stop()
  close_cubes()
EndSub

Sub take_long
  Motor.Move(right_motor, right_forward * 15, 360, "True")
  Motor.MoveSync(motors, left_forward * 15, right_forward * 15, 90, "True")
  open_cubes()
  Motor.MoveSync(motors, left_forward * -15, right_forward * -15, 52, "True")
  If cubes_count = 2 Then
    close_cubes()
  EndIf
  Motor.MoveSync(motors, left_forward * -15, right_forward * -15, 90 - 52, "True")
  Motor.Move(right_motor, right_forward * -15, 360, "True")
  cubes_count = 1
EndSub

Sub take_near
  Motor.Move(right_motor, -15 * right_forward, 250, "True")
  Motor.Move(left_motor, -15 * left_forward, 250, "True")
  delay()
  Motor.MoveSync(motors, 15 * left_forward, 15 * right_forward, 230, "True")
  open_cubes()
  Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 52, "True")
  If cubes_count = 2 Then
    close_cubes()
  EndIf
  Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 230 - 52, "True")
  Motor.Move(left_motor, left_forward * -15, 250, "True")
  Motor.Move(right_motor, right_forward * -15, 250, "True")
  delay()
  Motor.MoveSync(motors, left_forward * 15, right_forward * 15, 200, "True")
  cubes_count = 1
EndSub

Sub take_both
  Motor.Move(right_motor, right_forward * 15, 360, "True")
  Motor.MoveSync(motors, left_forward * 15, right_forward * 15, 90, "True")
  open_cubes()
  Motor.MoveSync(motors, left_forward * -15, right_forward * -15, 52, "True")
  close_cubes()
  Motor.MoveSync(motors, left_forward * -15, right_forward * -15, 180 - 52, "True")
  Motor.Move(left_motor, left_forward * 20, 360, "True")
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 240, "True")
  open_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 50, "True")
  Motor.Move(left_motor, left_forward * -20, 280, "True")
  Motor.Move(right_motor, right_forward * -20, 280, "True")
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 60, "True")
  cubes_count = 0
EndSub

Sub take_near_double
  Motor.Move(right_motor, right_forward * -20, 250, "True")
  Motor.Move(left_motor, left_forward * -20, 250, "True")
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 200, "True")
  open_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 52, "True")
  close_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 210 - 52, "True")
  open_cubes()
EndSub

Sub take_near_double_long
  Motor.Move(right_motor, right_forward * -20, 250, "True")
  Motor.Move(left_motor, left_forward * -20, 250, "True")
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 200, "True")
  open_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 52, "True")
  close_cubes()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 390 - 52, "True")
  open_cubes()
EndSub

Sub finish_after_near
  Motor.StartSync(motors, left_forward * -30, right_forward * -30)
  Program.Delay(1500)
  stop()
  Motor.Move(left_motor, left_forward * 20, 220, "True")
  Motor.Move(right_motor, right_forward * -20, 150, "True")
  Motor.StartSync(motors, left_forward * -20, right_forward * -20)
  Program.Delay(1000)
  stop()
EndSub

' --- Езда с выравнием по энкодерам моторов ---
Sub go_forward
  r_c = Motor.GetCount(right_motor) * right_forward
  l_c = Motor.GetCount(left_motor) * left_forward
  diff = (r_c - l_c) * 1
  r_p = (20 - diff) * right_forward
  l_p = (20 + diff) * left_forward
  Motor.StartPower(right_motor, r_p)
  Motor.StartPower(left_motor, l_p)
EndSub

Sub go_backward
  r_c = Motor.GetCount(right_motor) * right_forward
  l_c = Motor.GetCount(left_motor) * left_forward
  diff = (r_c - l_c) * 1
  r_p = (-20 - diff) * right_forward
  l_p = (-20 + diff) * left_forward
  Motor.StartPower(right_motor, r_p)
  Motor.StartPower(left_motor, l_p)
EndSub

Sub move_forward
  Motor.ResetCount(left_motor)
  Motor.ResetCount(right_motor)
  While Motor.GetCount(not_inversed_motor) < deg
    go_forward()
  EndWhile
  stop()
EndSub

Sub move_backward
  Motor.ResetCount(left_motor)
  Motor.ResetCount(right_motor)
  While Motor.GetCount(not_inversed_motor) > (-1 * deg)
    go_backward()
  EndWhile
  stop()
EndSub

' ---- Основная номинация ----
Sub main
  ' --- Проезд из правой зоны старта в левую ---
  start_from_right = "False"
  
  If start_from_right = "True" Then
    Motor.StartSync(motors, left_forward * 50, right_forward * 53)
    Program.Delay(2000)
    stop()
    Motor.Start(right_motor, right_forward * -30)
    Program.Delay(1000)
    stop()
    delay()
    Motor.Move(right_motor, right_forward * 30, 200, "True")
    delay()
    Motor.Move(left_motor, left_forward * 30, 150, "True")
    delay()
  EndIf
  
  reset_values()
  
  Motor.ResetCount(not_inversed_motor)
  Motor.StartSync(motors, left_forward * 80, right_forward * 90)
  deg = 1200
  If start_from_right = "True" Then
    deg = 1100
  EndIf
  While Motor.GetCount(not_inversed_motor) < deg
  EndWhile
  Motor.StartSync(motors, left_forward * 50, right_forward * 55)
  While Sensor.ReadPercent(line_sensor) < 23
  EndWhile
  While Sensor.ReadPercent(line_sensor) > 10
  EndWhile
  stop_right()
  
  a = 105
  delay()
  Motor.Move(left_motor, left_forward * 20, 290, "True")
  delay()
  Motor.Move(right_motor, right_forward * 20, 240, "True")
  Motor.ResetCount(not_inversed_motor)
  While Motor.GetCount(not_inversed_motor) < 290
    Ultrasonic_slow()
  EndWhile
  stop()
  
  ' Коричневая зона, первый элемент
  
  delay()
  b = Sensor.ReadRawValue(right_sensor, 0)
  c = 500
  update_display()
  
  If b > 80 Then
    Sensor.SetMode(right_sensor, 2)
    g = Sensor.ReadRawValue(right_sensor, 0)
    Sensor.SetMode(right_sensor, 1)
    If g > 100 Then
      ' Человек
      object = "Human"
      update_display()
      
      brown = "True"
      brown_man = "True"
    Else
      ' Огонь
      object = "Fire"
      update_display()
      brown = "True"
      
      deg = 95
      move_backward()
      kick_water()
      move_forward()
    EndIf
  ElseIf b > 5 Then
    ' Отличаем химикат от пустоты в режиме белого
    
    Sensor.SetMode(right_sensor, 4)
    w = Sensor.ReadRawValue(right_sensor, 0)
    Sensor.SetMode(right_sensor, 1)
    object = "None"
    update_display()
    
    If w > 50 Then
      ' Химикат
      object = "Chemical"
      update_display()
      chem = "True"
      brown = "True"
      is_chem_on_right = "True"
      
      take_chem_on_right()
    EndIf
  EndIf
  reset_values()
  
  Sensor.SetMode(line_sensor, 2)
  Motor.ResetCount(not_inversed_motor)
  stop()
  While Motor.GetCount(not_inversed_motor) < c Or Sensor.ReadRawValue(line_sensor, 0) <> 5
    Ultrasonic_slow()
  EndWhile
  stop()
  
  ' Коричневая зона, второй элемент
  reset_values()
  update_display()
  c = 350
  If brown = "False" Then
    delay()
    
    deg = 90
    move_backward()
    c = c + 110
    
    delay()
    b = Sensor.ReadRawValue(right_sensor, 0)
    update_display()
    
    If b > 80 Then
      Sensor.SetMode(right_sensor, 2)
      g = Sensor.ReadRawValue(right_sensor, 0)
      Sensor.SetMode(right_sensor, 1)
      If g > 100 Then
        ' Человек
        object = "Human"
        update_display()
        
        brown = "True"
        brown_man = "True"
      Else
        ' Огонь
        object = "Fire"
        update_display()
        
        brown = "True"
        deg = 40
        move_backward()
        kick_water()
        move_forward()
      EndIf
    ElseIf b > 12 Then
      Sensor.SetMode(right_sensor, 4)
      w = Sensor.ReadRawValue(right_sensor, 0)
      update_display()
      Sensor.SetMode(right_sensor, 1)
      
      If w > 55 Then
        ' Химикат
        object = "Chemical"
        update_display()
        chem = "True"
        brown = "True"
        is_chem_on_right = "True"
        
        take_chem_on_right()
      EndIf
    EndIf
  EndIf
  reset_values()
  
  Motor.ResetCount(not_inversed_motor)
  While Motor.GetCount(not_inversed_motor) < c
    Ultrasonic_slow()
  EndWhile
  p_u = 1
  
  If chem = "False" Then
    Motor.StartSync(motors, left_forward * 20, right_forward * 20)
  Else
    Motor.StartSync(motors, left_forward * 30, right_forward * 30)
  EndIf
  Program.Delay(1000)
  stop()
  
  ' Красная зона
  take_red_right = "False"
  take_red_left = "False"
  
  ' Красная зона, справа
  delay()
  b = Sensor.ReadRawValue(right_sensor, 0)
  update_display()
  If b > 85 Then
    Sensor.SetMode(right_sensor, 2)
    delay()
    g = Sensor.ReadRawValue(right_sensor, 0)
    Sensor.SetMode(right_sensor, 1)
    If g > 100 Then
      ' Человек
      object = "R: Human"
      update_display()
      
      red = "True"
      red_man = "True"
    Else
      ' Огонь
      red = "True"
      object = "R: Fire"
      update_display()
      
      kick_water()
    EndIf
  ElseIf b > 10 Then
    ' Химикат
    chem = "True"
    red = "True"
    object = "R: Chem"
    is_chem_on_right = "True"
    update_display()
    
    take_red_right = "True"
  EndIf
  reset_values()
  
  ' Красная зона, слева
  
  If red = "False" Then
    delay()
    b = Sensor.ReadRawValue(left_sensor, 0)
    update_display()
    
    If b > 120 Then
      Sensor.SetMode(left_sensor, 2)
      delay()
      g = Sensor.ReadRawValue(left_sensor, 0)
      Sensor.SetMode(left_sensor, 1)
      If g > 100 Then
        ' Человек
        object = "L: Human"
        update_display()
        
        red = "True"
        red_man = "True"
      Else
        ' Огонь
        red = "True"
        object = "L: Fire"
        update_display()
        
        kick_water()
      EndIf
    Else
      Sensor.SetMode(left_sensor, 2)
      g = Sensor.ReadRawValue(left_sensor, 0)
      Sensor.SetMode(left_sensor, 1)
      If g > 25 Or g < 18 Then
        ' Химикат
        chem = "True"
        red = "True"
        object = "L: Chem"
        is_chem_on_left = "True"
        update_display()
        
        take_red_left = "True"
      EndIf
    EndIf
  EndIf
  reset_values()
  chem_back =  140
  no_back = 140
  If take_red_right = "True" Then
    ' Забор химиката справа
    
    Motor.ResetCount(not_inversed_motor)
    For i = 1 To 20
      Motor.StartSync(motors, left_forward * -1 * i, right_forward * -1 * i)
      Program.Delay(30)
    EndFor
    Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 280 + Motor.GetCount(not_inversed_motor), "True")
    delay()
    
    Motor.Move(left_motor, left_forward * 20, 70, "True")
    delay()
    
    Motor.Move(grabber_motor, 100, 175, "True")
    
    Motor.ResetCount(not_inversed_motor)
    For i = 1 To 20
      Motor.StartSync(motors, left_forward * i, right_forward * i)
      Program.Delay(20)
    EndFor
    Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 150 - Motor.GetCount(not_inversed_motor), "True")
    stop()
    
    Motor.Move(grabber_motor, 100, 100, "True")
    delay()
    
    Motor.ResetCount(not_inversed_motor)
    For i = 1 To 20
      Motor.StartSync(motors, left_forward * -1 * i, right_forward * -1 * i)
      Program.Delay(20)
    EndFor
    Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 150 + Motor.GetCount(not_inversed_motor), "True")
    stop()
    delay()
    
    Motor.Move(left_motor, left_forward * -20, 70, "True")
    delay()
    
    Motor.StartSync(motors, left_forward * 40, right_forward * 40)
    Program.Delay(1500)
    stop()
    delay()
    
    Motor.ResetCount(not_inversed_motor)
    For i = 1 To 20
      Motor.StartSync(motors, left_forward * -1 * i, right_forward * -1 * i)
      Program.Delay(20)
    EndFor
    Motor.MoveSync(motors, left_forward * -20, right_forward * -20, chem_back + Motor.GetCount(not_inversed_motor), "True")
    stop()
    delay()
  ElseIf take_red_left = "True" Then
    ' Забор химиката слева
    Motor.ResetCount(not_inversed_motor)
    For i = 1 To 20
      Motor.StartSync(motors, left_forward * -1 * i, right_forward * -1 * i)
      Program.Delay(30)
    EndFor
    Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 280 + Motor.GetCount(not_inversed_motor), "True")
    delay()
    
    Motor.Move(right_motor, right_forward * 20, 70, "True")
    delay()
    
    Motor.Move(grabber_motor, 100, 175, "True")
    
    Motor.ResetCount(not_inversed_motor)
    For i = 1 To 20
      Motor.StartSync(motors, left_forward * i, right_forward * i)
      Program.Delay(20)
    EndFor
    Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 150 - Motor.GetCount(not_inversed_motor), "True")
    stop()
    
    Motor.Move(grabber_motor, 100, 100, "True")
    delay()
    
    Motor.ResetCount(not_inversed_motor)
    For i = 1 To 20
      Motor.StartSync(motors, left_forward * -1 * i, right_forward * -1 * i)
      Program.Delay(20)
    EndFor
    Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 150 + Motor.GetCount(not_inversed_motor), "True")
    stop()
    delay()
    
    Motor.Move(right_motor, right_forward * -20, 70, "True")
    delay()
    
    Motor.StartSync(motors, left_forward * 40, right_forward * 40)
    Program.Delay(1000)
    stop()
    delay()
    
    Motor.ResetCount(not_inversed_motor)
    For i = 1 To 20
      Motor.StartSync(motors, left_forward * -1 * i, right_forward * -1 * i)
      Program.Delay(20)
    EndFor
    Motor.MoveSync(motors, left_forward * -20, right_forward * -20, chem_back + Motor.GetCount(not_inversed_motor), "True")
    delay()
  Else
    ' Если химиката нет, просто отъезд
    
    deg = no_back
    move_backward()
  EndIf
  
  Motor.MoveSync(motors, left_forward * 20, right_forward * -20, 180, "True")
  stop()
  delay()
  
  Motor.StartSync(motors, left_forward * -30, right_forward * -30)
  Program.Delay(700)
  stop()
  
  a = Sensor.ReadRawValue(ultrasonic, 0) + 5
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 430, "True")
  Motor.ResetCount(not_inversed_motor)
  While Motor.GetCount(not_inversed_motor) < 200
    Ultrasonic_slow()
  EndWhile
  
  Motor.ResetCount(not_inversed_motor)
  Motor.StartSync(motors, left_forward * 20, right_forward * 20)
  Sensor.SetMode(line_sensor, 0)
  While Sensor.ReadPercent(line_sensor) > 20 Or Motor.GetCount(not_inversed_motor) < 220
  EndWhile
  stop()
  delay()
  deg = 95
  move_backward()
  Sensor.SetMode(line_sensor, 0)
  
  ' Жёлтая зона, первый элемент
  
  delay()
  b = Sensor.ReadRawValue(left_sensor, 0)
  update_display()
  
  If b > 55 Then
    Sensor.SetMode(left_sensor, 2)
    delay()
    g = Sensor.ReadRawValue(left_sensor, 0)
    Sensor.SetMode(left_sensor, 1)
    If g > 100 Then
      ' Человек
      object = "Human"
      update_display()
      
      yellow = "True"
      yellow_man = "True"
    Else
      ' Огонь
      yellow = "True"
      object = "Fire"
      update_display()
      
      deg = 100
      move_backward()
      kick_water()
      move_forward()
    EndIf
  Else
    ultra = Sensor.ReadRawValue(ultrasonic, 0)
    
    If ultra < 85 Then
      ' Химикат
      chem = "True"
      yellow = "True"
      object = "Chemical"
      is_chem_on_left = "True"
      update_display()
      
      take_chem_on_left_accurate()
    EndIf
  EndIf
  reset_values()
  
  deg = 115
  move_forward()
  
  a = a - 5
  Motor.ResetCount(not_inversed_motor)
  While Motor.GetCount(not_inversed_motor) < 250
    Ultrasonic_slow()
  EndWhile
  Motor.StartSync(motors, left_forward * 20, right_forward * 20)
  Program.Delay(2000)
  stop()
  
  ' Зелёная зона, первый элемент
  
  delay()
  b = Sensor.ReadRawValue(left_sensor, 0)
  update_display()
  If b > 55 Then
    Sensor.SetMode(left_sensor, 2)
    delay()
    g = Sensor.ReadRawValue(left_sensor, 0)
    Sensor.SetMode(left_sensor, 1)
    
    If g > 70 Then
      ' Человек
      object = "Human"
      is_chem_on_right = "True"
      update_display()
      
      green = "True"
      green_man = "True"
    Else
      ' Огонь
      green = "True"
      object = "Fire"
      update_display()
      
      kick_water()
    EndIf
  ElseIf b > 15 Then
    Sensor.SetMode(left_sensor, 4)
    delay()
    w = Sensor.ReadRawValue(left_sensor, 0)
    Sensor.SetMode(left_sensor, 1)
    update_display()
    
    If w > 60 Then
      ' Химикат
      chem = "True"
      green = "True"
      object = "Chemical"
      is_chem_on_right = "True"
      update_display()
      
      stop()
      Motor.ResetCount(left_motor)
      For i = 1 To 20
        Motor.Start(left_motor, left_forward * -1 * i)
        Program.Delay(30)
      EndFor
      Motor.Move(left_motor, -20 * left_forward, 260 + (Motor.GetCount(left_motor) * left_forward), "True")
      stop()
      Motor.Move(grabber_motor, 50, 165, "True")
      Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 80, "True")
      delay()
      Motor.Move(grabber_motor, 50, 100, "True")
      delay()
      
      Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 80, "True")
      stop()
      Program.Delay(1000)
      
      Motor.ResetCount(left_motor)
      For i = 1 To 20
        Motor.Start(left_motor, left_forward * i)
        Program.Delay(30)
      EndFor
      Motor.Move(left_motor, 20 * left_forward, 260 - (Motor.GetCount(left_motor) * left_forward), "True")
      
      Motor.Start(right_motor, 30 * right_forward)
      Program.Delay(1000)
      stop()
    EndIf
  EndIf
  reset_values()
  
  Motor.Move(right_motor, -20 * right_forward, 270, "True")
  Motor.Move(left_motor, 20 * left_forward, 104, "True")
  
  Sensor.SetMode(line_sensor, 2)
  Motor.ResetCount(not_inversed_motor)
  a = 105
  While Motor.GetCount(not_inversed_motor) < 100
    Ultrasonic_slow()
  EndWhile
  Motor.StartSync(motors, left_forward * 20, right_forward * 20)
  While Sensor.ReadRawValue(line_sensor, 0) <> 2
  EndWhile
  stop()
  Sensor.SetMode(line_sensor, 0)
  
  ' Зелёная зона, второй элемент
  
  If green = "False" Then
    delay()
    deg = 115
    move_backward()
    delay()
    
    b = Sensor.ReadRawValue(left_sensor, 0)
    If b > 70 Then
      Sensor.SetMode(left_sensor, 2)
      delay()
      g = Sensor.ReadRawValue(left_sensor, 0)
      Sensor.SetMode(left_sensor, 1)
      If g > 100 Then
        ' Человек
        object = "Human"
        update_display()
        
        green = "True"
        green_man = "True"
      Else
        ' Огонь
        green = "True"
        object = "Fire"
        update_display()
        
        deg = 115
        move_backward()
        kick_water()
        move_forward()
        delay()
      EndIf
    Else
      ultra = Sensor.ReadRawValue(ultrasonic, 0)
      
      If ultra < 85 Then
        ' Химикат
        chem = "True"
        green = "True"
        object = "Chemical"
        is_chem_on_left = "True"
        update_display()
        
        take_chem_on_left_accurate()
      EndIf
    EndIf
    update_display()
    
    stop()
    deg = 170
    move_forward()
  Else
    deg = 55
    move_forward()
  EndIf
  
  ' Синяя зона, первый элемент
  
  delay()
  b = Sensor.ReadRawValue(left_sensor, 0)
  If b > 70 Then
    Sensor.SetMode(left_sensor, 2)
    delay()
    g = Sensor.ReadRawValue(left_sensor, 0)
    Sensor.SetMode(left_sensor, 1)
    If g > 70 Then
      ' Человек
      object = "Human"
      update_display()
      
      blue = "True"
      blue_man = "True"
    Else
      ' Огонь
      blue = "True"
      object = "Fire"
      update_display()
      
      kick_water()
    EndIf
  Else
    ultra = Sensor.ReadRawValue(ultrasonic, 0)
    
    If ultra < 85 Then
      ' Химикат
      chem = "True"
      blue = "True"
      object = "Chemical"
      is_chem_on_left = "True"
      update_display()
      
      take_chem_on_left()
    EndIf
  EndIf
  reset_values()
  
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 100, "True")
  a = a + 7
  Motor.ResetCount(not_inversed_motor)
  While Motor.GetCount(not_inversed_motor) < 310
    Ultrasonic_slow()
  EndWhile
  
  deg = 110
  move_forward()
  
  ' Синяя зона, второй элемент
  
  If blue = "False" Then
    Sensor.SetMode(left_sensor, 1)
    delay()
    b = Sensor.ReadRawValue(left_sensor, 0)
    update_display()
    
    If b > 55 Then
      Sensor.SetMode(left_sensor, 2)
      delay()
      g = Sensor.ReadRawValue(left_sensor, 0)
      Sensor.SetMode(left_sensor, 1)
      
      If g > 70 Then
        ' Человек
        object = "Human"
        update_display()
        
        blue = "True"
        blue_man = "True"
      Else
        ' Огонь
        blue = "True"
        object = "Fire"
        update_display()
        
        deg = 115
        move_backward()
        kick_water()
        move_forward()
      EndIf
    Else
      ultra = Sensor.ReadRawValue(ultrasonic, 0)
      
      If ultra < 85 Then
        ' Химикат
        chem = "True"
        blue = "True"
        object = "Chemical"
        is_chem_on_left = "True"
        update_display()
        
        take_chem_on_left_accurate()
      EndIf
    EndIf
    reset_values()
  EndIf
  
  stop()
  Sensor.SetMode(line_sensor, 0)
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 200, "False")
  Motor.StartSync(motors, left_forward * 20, right_forward * 20)
  While Sensor.ReadPercent(line_sensor) > 8
  EndWhile
  stop()
  
  Motor.Move(left_motor, left_forward * 20, 200, "False")
  Motor.Start(left_motor, left_forward * 20)
  While Sensor.ReadPercent(line_sensor) > 8
  EndWhile
  Motor.Move(left_motor, left_forward * 20, 50, "True")
  stop()
  
  Motor.ResetCount(not_inversed_motor)
  While Motor.GetCount(not_inversed_motor) < 200
    line()
  EndWhile
  While Sensor.ReadPercent(line_sensor) > 5
    line()
  EndWhile
  stop()
  
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 80, "True")
  stop()
  delay()
  Motor.MoveSync(motors, left_forward * 20, right_forward * -20, 180, "True")
  stop()
  delay()
  Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 25, "False")
  Motor.ResetCount(not_inversed_motor)
  While Motor.GetCount(not_inversed_motor) < 290
    NowError = Sensor.ReadPercent(1) - 17
    dif = LastError - NowError
    integral = (integral + NowError) / 10
    derivative = NowError - LastError
    up = ((NowError * p) + (integral * d))
    Motor.StartPower("B", 40 - up)
    Motor.StartPower("A", -40 - up)
    LastError = NowError
  EndWhile
  deg = 135
  move_forward()
  stop()
  
  ' Белая зона, первый элемент
  delay()
  b = Sensor.ReadRawValue(left_sensor, 0)
  update_display()
  
  If b > 140 Then
    ' Человек
    object = "Human"
    update_display()
    
    white = "True"
    white_man = "True"
  ElseIf b > 80 Then
    ' Огонь
    white = "True"
    object = "FIre"
    update_display()
    
    kick_water()
  Else
    ultra = Sensor.ReadRawValue(ultrasonic, 0)
    If ultra < 85 Then
      ' Химикат
      white = "True"
      object = "Chemical"
      is_chem_on_left = "True"
      chem = "True"
      update_display()
      
      take_chem_on_left_accurate()
    EndIf
  EndIf
  reset_values()
  
  ' Белая зона, второй элемент
  c = 710
  If white = "False" Or yellow = "False" Then
    deg = 180
    move_forward()
    a = 491
    Motor.ResetCount(not_inversed_motor)
    While Motor.GetCount(not_inversed_motor) < 170
      Ultrasonic_slow()
    EndWhile
    deg = 170
    move_forward()
    
    If white = "False" Then
      delay()
      b = Sensor.ReadRawValue(left_sensor, 0)
      update_display()
      
      ' 40
      If b > 50 Then
        Sensor.SetMode(left_sensor, 2)
        delay()
        g = Sensor.ReadRawValue(left_sensor, 0)
        Sensor.SetMode(left_sensor, 1)
        If g > 100 Then
          ' Человек
          object = "Human"
          update_display()
          
          white = "True"
          white_man = "True"
        Else
          ' Огонь
          white = "True"
          object = "Fire"
          update_display()
          
          deg = 115
          move_backward()
          kick_water()
          move_forward()
        EndIf
      Else
        ultra = Sensor.ReadRawValue(ultrasonic, 0)
        If ultra < 85 Then
          ' Химикат
          white = "True"
          chem = "True"
          object = "Chemical"
          is_chem_on_left = "True"
          update_display()
          
          Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 160, "True")
          stop()
          
          Motor.Move(grabber_motor, 50, 165, "True")
          
          Motor.ResetCount(right_motor)
          For i = 1 To 20
            Motor.Start(right_motor, i * right_forward)
            Program.Delay(10)
          EndFor
          Motor.Move(right_motor, 20 * right_forward, 160 - (Motor.GetCount(right_motor) * right_forward), "True")
          delay()
          
          Motor.Move(grabber_motor, 50, 100, "True")
          stop()
          delay()
          
          Motor.ResetCount(right_motor)
          For i = 1 To 20
            Motor.Start(right_motor, right_forward * i * -1)
            Program.Delay(10)
          EndFor
          Motor.Move(right_motor, right_forward * -20, 160 + (Motor.GetCount(right_motor) * right_forward), "True")
          stop()
          delay()
          
          Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 160, "True")
        EndIf
      EndIf
      reset_values()
    EndIf
    
    If yellow = "False" Then
      delay()
      deg = 160
      move_forward()
      
      ' Жёлтая зона, второй элемент
      Sensor.SetMode(left_sensor, 1)
      delay()
      b = Sensor.ReadRawValue(left_sensor, 0)
      update_display()
      
      If b > 40 Then
        Sensor.SetMode(left_sensor, 2)
        delay()
        g = Sensor.ReadRawValue(left_sensor, 0)
        Sensor.SetMode(left_sensor, 1)
        If g > 50 Then
          ' Человек
          object = "Human"
          update_display()
          
          yellow = "True"
          yellow_man = "True"
        Else
          ' Огонь
          object = "Fire"
          update_display()
          
          kick_water()
        EndIf
      Else
        ultra = Sensor.ReadRawValue(ultrasonic, 0)
        If ultra < 85 Then
          ' Химикат
          yellow = "True"
          chem = "True"
          object = "Chemical"
          is_chem_on_left = "True"
          update_display()
          
          take_chem_on_left()
        EndIf
      EndIf
      reset_values()
      deg = 160
      move_backward()
    EndIf
    
    Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 165, "True")
    stop()
    delay()
    
    Motor.MoveSync(motors, left_forward * -20, right_forward * 20, 380, "True")
    stop()
    delay()
    
    Program.Delay(5000)
    Motor.MoveSync(motors, left_forward * 20, right_forward * 20, 300, "True")
  Else
    deg = 200
    move_backward()
    Motor.MoveSync(motors, left_forward * -20, right_forward * 20, 370, "True")
    c = c - 220
  EndIf
  
  a = 474
  Motor.ResetCount(not_inversed_motor)
  While Motor.GetCount(not_inversed_motor) < c
    Ultrasonic_fast()
  EndWhile
  
  stop()
  delay()
  If chem = "True" Then
    Motor.Move(grabber_motor, -50, 115, "True")
  EndIf
  delay()
  
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 300, "True")
  stop()
  If chem = "True" Then
    Motor.Move(grabber_motor, -50, 120, "True")
  EndIf
  
  Motor.MoveSync(motors, left_forward * -20, right_forward * 20, 180, "True")
  Motor.StartSync(motors, left_forward * 60, right_forward * 60)
  Program.Delay(1200)
  stop()
  Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 150, "True")
  Motor.Move(left_motor, left_forward * 40, 280, "True")
  
  Motor.StartSync(motors, left_forward * 90, right_forward * 95)
  Program.Delay(3500)
  stop()
  
  Motor.Move(water_motor, -50, 20, "True")
  
  take_cubes()
  Motor.MoveSync(motors, left_forward * -15, right_forward * -15, 140, "True")
  
  If red_man = "True" And yellow_man = "True" Then
    take_near_double()
    finish_after_near()
  ElseIf yellow_man = "True" And green_man = "True" Then
    Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 180, "True")
    take_near_double()
    finish_after_near()
  ElseIf red_man = "True" And green_man = "True" Then
    take_near_double_long()
    finish_after_near()
  Else
    If red_man = "True" And brown_man = "True" Then
      take_both()
    ElseIf red_man = "True" Then
      take_near()
    ElseIf brown_man = "True" Then
      take_long()
      Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 210, "True")
    Else
      Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 210, "True")
    EndIf
    
    If yellow_man = "True" And white_man = "True" Then
      take_both()
    ElseIf yellow_man = "True" Then
      take_near()
    ElseIf white_man = "True" Then
      take_long()
      Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 210, "True")
    Else
      Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 210, "True")
    EndIf
    
    If green_man = "True" And blue_man = "True" Then
      take_both()
    ElseIf green_man = "True" Then
      take_near()
    ElseIf blue_man = "True" Then
      take_long()
      Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 210, "True")
    Else
      Motor.MoveSync(motors, -15 * left_forward, -15 * right_forward, 210, "True")
    EndIf
    
    Motor.Move(right_motor, -15 * right_forward, 360, "True")
    Motor.StartSync(motors, left_forward * -25, right_forward * -25)
    Program.Delay(1500)
    stop()
  EndIf
  
  If start_from_right = "True" Then
    Motor.ResetCount(not_inversed_motor)
    Motor.StartSync(motors, left_forward * 55, right_forward * 50)
    While Motor.GetCount(not_inversed_motor) < 1200
    EndWhile
    While Sensor.ReadPercent(line_sensor) < 25
    EndWhile
    While Sensor.ReadPercent(line_sensor) > 10
    EndWhile
    stop()
    delay()
    
    Motor.Move(right_motor, right_forward * 30, 365, "True")
    Motor.StartSync(motors, left_forward * 50, right_forward * 50)
    stop()
    Motor.MoveSync(motors, left_forward * -30, right_forward * -30, 140, "True")
    Motor.Move(right_motor, right_forward * 30, 300, "True")
    Motor.StartSync(motors, left_forward * 55, right_forward * 50)
    Program.Delay(4000)
    stop()
    Motor.MoveSync(motors, left_forward * -20, right_forward * -20, 20, "True")
  EndIf
EndSub

main()