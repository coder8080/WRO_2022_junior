DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAS VLV_MOTOR_11 252
DATAF VLV_FORWARD_11
DATAF VLV_DEG_11
DATAF VLV_MAX_POWER_11
DATAS VLV_ACCELERATION_11 252
DATAS VLV_ZAME_11 252
DATAS VLV_TO_STOP_11 252
DATAF VLV_DEG_10
DATAF VLV_POWER_1
DATAF VLV_BASE_POWER_13
DATAF VLV_MIN_POWER_13
DATAF VLV_DEG_13
DATAF VLV_TIME_4
DATAS VLV_MOTOR_12 252
DATAF VLV_FORWARD_12
DATAF VLV_DEG_12
DATAF VLV_MAX_POWER_12
DATAS VLV_ACCELERATION_12 252
DATAS VLV_ZAME_12 252
DATAS VLV_TO_STOP_12 252
DATAF VLV_L_2
DATAF VLV_R_2
DATAF VLV_POWER_8
DATAF VLV_DEG_8
DATAF VGV_LEFT_LINE
DATAF VGV_RIGHT_LINE
DATAF VGV_LEFT_SENSOR
DATAF VGV_RIGHT_SENSOR
DATAS VGV_LEFT_MOTOR 252
DATAS VGV_RIGHT_MOTOR 252
DATAS VGV_NOT_INVERTED_MOTOR 252
DATAS VGV_MOTORS 252
DATAF VGV_LEFT_FORWARD
DATAF VGV_RIGHT_FORWARD
DATAS VGV_GRABBER_MOTOR 252
DATAS VGV_WATER_MOTOR 252
DATAF VGV_LEFT_MAX
DATAF VGV_LEFT_MIN
DATAF VGV_RIGHT_MAX
DATAF VGV_RIGHT_MIN
DATAF VGV_LAST_ERR
DATAF VGV_LAST_MOTOR_ERR
DATAF VGV_L
DATAF VGV_R
DATAF VLV_ERR_2
DATAF VLV_DIFF_2
DATAF VLV_DELTA_2
DATAF VLV_LEFT_POWER_2
DATAF VLV_RIGHT_POWER_2
DATAF VLV_L_8
DATAF VLV_P_8
DATAF VLV_R_8
DATAF VLV_DELTA_8
DATAF VLV_LEFT_POWER_8
DATAF VLV_RIGHT_POWER_8
DATAF VLV_L_9
DATAF VLV_R_9
DATAF VLV_ERR_9
DATAF VLV_DIFF_9
DATAF VLV_DELTA_9
DATAF VLV_LEFT_POWER_9
DATAF VLV_RIGHT_POWER_9
DATAF VLV_L_10
DATAF VLV_NORMAL_DEG_11
DATAF VLV_M_11
DATAF VLV_P_11
DATAF VLV_POWER_11
DATAF VLV_NORMAL_DEG_12
DATAF VLV_M_12
DATAF VLV_P_12
DATAF VLV_POWER_12
DATAF VLV_L_13
DATAF VLV_P_13
DATAF VLV_R_13
DATAF VLV_DELTA_13
DATAF VLV_POWER_13
DATAF VLV_LEFT_POWER_13
DATAF VLV_RIGHT_POWER_13
DATA32 RUNCOUNTER_F_BEEP_0

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    STRINGS DUPLICATE '' VLV_MOTOR_11
    MOVEF_F 0.0 VLV_FORWARD_11
    MOVEF_F 0.0 VLV_DEG_11
    MOVEF_F 0.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE '' VLV_ACCELERATION_11
    STRINGS DUPLICATE '' VLV_ZAME_11
    STRINGS DUPLICATE '' VLV_TO_STOP_11
    MOVEF_F 0.0 VLV_DEG_10
    MOVEF_F 0.0 VLV_POWER_1
    MOVEF_F 0.0 VLV_BASE_POWER_13
    MOVEF_F 0.0 VLV_MIN_POWER_13
    MOVEF_F 0.0 VLV_DEG_13
    MOVEF_F 0.0 VLV_TIME_4
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_FORWARD_12
    MOVEF_F 0.0 VLV_DEG_12
    MOVEF_F 0.0 VLV_MAX_POWER_12
    STRINGS DUPLICATE '' VLV_ACCELERATION_12
    STRINGS DUPLICATE '' VLV_ZAME_12
    STRINGS DUPLICATE '' VLV_TO_STOP_12
    MOVEF_F 0.0 VLV_L_2
    MOVEF_F 0.0 VLV_R_2
    MOVEF_F 0.0 VLV_POWER_8
    MOVEF_F 0.0 VLV_DEG_8
    MOVEF_F 0.0 VGV_LEFT_LINE
    MOVEF_F 0.0 VGV_RIGHT_LINE
    MOVEF_F 0.0 VGV_LEFT_SENSOR
    MOVEF_F 0.0 VGV_RIGHT_SENSOR
    STRINGS DUPLICATE '' VGV_LEFT_MOTOR
    STRINGS DUPLICATE '' VGV_RIGHT_MOTOR
    STRINGS DUPLICATE '' VGV_NOT_INVERTED_MOTOR
    STRINGS DUPLICATE '' VGV_MOTORS
    MOVEF_F 0.0 VGV_LEFT_FORWARD
    MOVEF_F 0.0 VGV_RIGHT_FORWARD
    STRINGS DUPLICATE '' VGV_GRABBER_MOTOR
    STRINGS DUPLICATE '' VGV_WATER_MOTOR
    MOVEF_F 0.0 VGV_LEFT_MAX
    MOVEF_F 0.0 VGV_LEFT_MIN
    MOVEF_F 0.0 VGV_RIGHT_MAX
    MOVEF_F 0.0 VGV_RIGHT_MIN
    MOVEF_F 0.0 VGV_LAST_ERR
    MOVEF_F 0.0 VGV_LAST_MOTOR_ERR
    MOVEF_F 0.0 VGV_L
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VLV_ERR_2
    MOVEF_F 0.0 VLV_DIFF_2
    MOVEF_F 0.0 VLV_DELTA_2
    MOVEF_F 0.0 VLV_LEFT_POWER_2
    MOVEF_F 0.0 VLV_RIGHT_POWER_2
    MOVEF_F 0.0 VLV_L_8
    MOVEF_F 0.0 VLV_P_8
    MOVEF_F 0.0 VLV_R_8
    MOVEF_F 0.0 VLV_DELTA_8
    MOVEF_F 0.0 VLV_LEFT_POWER_8
    MOVEF_F 0.0 VLV_RIGHT_POWER_8
    MOVEF_F 0.0 VLV_L_9
    MOVEF_F 0.0 VLV_R_9
    MOVEF_F 0.0 VLV_ERR_9
    MOVEF_F 0.0 VLV_DIFF_9
    MOVEF_F 0.0 VLV_DELTA_9
    MOVEF_F 0.0 VLV_LEFT_POWER_9
    MOVEF_F 0.0 VLV_RIGHT_POWER_9
    MOVEF_F 0.0 VLV_L_10
    MOVEF_F 0.0 VLV_NORMAL_DEG_11
    MOVEF_F 0.0 VLV_M_11
    MOVEF_F 0.0 VLV_P_11
    MOVEF_F 0.0 VLV_POWER_11
    MOVEF_F 0.0 VLV_NORMAL_DEG_12
    MOVEF_F 0.0 VLV_M_12
    MOVEF_F 0.0 VLV_P_12
    MOVEF_F 0.0 VLV_POWER_12
    MOVEF_F 0.0 VLV_L_13
    MOVEF_F 0.0 VLV_P_13
    MOVEF_F 0.0 VLV_R_13
    MOVEF_F 0.0 VLV_DELTA_13
    MOVEF_F 0.0 VLV_POWER_13
    MOVEF_F 0.0 VLV_LEFT_POWER_13
    MOVEF_F 0.0 VLV_RIGHT_POWER_13
    MOVE32_32 0 RUNCOUNTER_F_BEEP_0
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
vmthread TF_BEEP_0
{
    DATA32 tmp
  launch:
    CALL PROGRAM_F_BEEP_0 0
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 -1 RUNCOUNTER_F_BEEP_0 tmp
    JR_GT32 tmp 1 launch
}
subcall PROGRAM_MAIN
subcall PROGRAM_F_BEEP_0
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    DATAF F.2
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    MOVE8_8 0 STACKPOINTER
    JR_NEQ32 SUBPROGRAM 0 dispatch259
    WRITE32 ENDSUB_F_BEEP_0:ENDTHREAD STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BEEP_0
  dispatch259:
    STRINGS DUPLICATE '' VLV_MOTOR_11
    MOVEF_F 0.0 VLV_FORWARD_11
    MOVEF_F 0.0 VLV_DEG_11
    MOVEF_F 0.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE '' VLV_ACCELERATION_11
    STRINGS DUPLICATE '' VLV_ZAME_11
    STRINGS DUPLICATE '' VLV_TO_STOP_11
    MOVEF_F 0.0 VLV_DEG_10
    MOVEF_F 0.0 VLV_POWER_1
    MOVEF_F 0.0 VLV_BASE_POWER_13
    MOVEF_F 0.0 VLV_MIN_POWER_13
    MOVEF_F 0.0 VLV_DEG_13
    MOVEF_F 0.0 VLV_TIME_4
    STRINGS DUPLICATE '' VLV_MOTOR_12
    MOVEF_F 0.0 VLV_FORWARD_12
    MOVEF_F 0.0 VLV_DEG_12
    MOVEF_F 0.0 VLV_MAX_POWER_12
    STRINGS DUPLICATE '' VLV_ACCELERATION_12
    STRINGS DUPLICATE '' VLV_ZAME_12
    STRINGS DUPLICATE '' VLV_TO_STOP_12
    MOVEF_F 0.0 VLV_L_2
    MOVEF_F 0.0 VLV_R_2
    MOVEF_F 0.0 VLV_POWER_8
    MOVEF_F 0.0 VLV_DEG_8
    MOVEF_F 0.0 VGV_LEFT_LINE
    MOVEF_F 0.0 VGV_RIGHT_LINE
    MOVEF_F 0.0 VGV_LEFT_SENSOR
    MOVEF_F 0.0 VGV_RIGHT_SENSOR
    STRINGS DUPLICATE '' VGV_LEFT_MOTOR
    STRINGS DUPLICATE '' VGV_RIGHT_MOTOR
    STRINGS DUPLICATE '' VGV_NOT_INVERTED_MOTOR
    STRINGS DUPLICATE '' VGV_MOTORS
    MOVEF_F 0.0 VGV_LEFT_FORWARD
    MOVEF_F 0.0 VGV_RIGHT_FORWARD
    STRINGS DUPLICATE '' VGV_GRABBER_MOTOR
    STRINGS DUPLICATE '' VGV_WATER_MOTOR
    MOVEF_F 0.0 VGV_LEFT_MAX
    MOVEF_F 0.0 VGV_LEFT_MIN
    MOVEF_F 0.0 VGV_RIGHT_MAX
    MOVEF_F 0.0 VGV_RIGHT_MIN
    MOVEF_F 0.0 VGV_LAST_ERR
    MOVEF_F 0.0 VGV_LAST_MOTOR_ERR
    MOVEF_F 0.0 VGV_L
    MOVEF_F 0.0 VGV_R
    MOVEF_F 1.0 VGV_LEFT_LINE
    MOVEF_F 2.0 VGV_RIGHT_LINE
    MOVEF_F 3.0 VGV_LEFT_SENSOR
    MOVEF_F 4.0 VGV_RIGHT_SENSOR
    STRINGS DUPLICATE 'A' VGV_LEFT_MOTOR
    STRINGS DUPLICATE 'B' VGV_RIGHT_MOTOR
    STRINGS DUPLICATE 'B' VGV_NOT_INVERTED_MOTOR
    CALL TEXT.APPEND VGV_LEFT_MOTOR VGV_RIGHT_MOTOR VGV_MOTORS
    MOVEF_F -1.0 VGV_LEFT_FORWARD
    MOVEF_F 1.0 VGV_RIGHT_FORWARD
    STRINGS DUPLICATE 'C' VGV_GRABBER_MOTOR
    STRINGS DUPLICATE 'D' VGV_WATER_MOTOR
    MOVEF_F 49.0 VGV_LEFT_MAX
    MOVEF_F 4.0 VGV_LEFT_MIN
    MOVEF_F 46.0 VGV_RIGHT_MAX
    MOVEF_F 4.0 VGV_RIGHT_MIN
    MOVEF_F 0.0 VGV_LAST_ERR
    MOVEF_F 0.0 VGV_LAST_MOTOR_ERR
    DATA8 layer1
	DATA8 no1
	DATA8 mode81
	
	MOVEF_8 VGV_LEFT_LINE no1
	SUB8 no1 1 no1
	DIV8 no1 4 layer1
	MATH MOD8 no1 4 no1

	MOVEF_8 0.0 mode81
	
	INPUT_DEVICE READY_RAW layer1 no1 0 mode81 0
    DATA8 layer2
	DATA8 no2
	DATA8 mode82
	
	MOVEF_8 VGV_RIGHT_LINE no2
	SUB8 no2 1 no2
	DIV8 no2 4 layer2
	MATH MOD8 no2 4 no2

	MOVEF_8 0.0 mode82
	
	INPUT_DEVICE READY_RAW layer2 no2 0 mode82 0
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 VGV_RIGHT_SENSOR no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 4.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    CALL EV3.BATTERYVOLTAGE F.0
    JR_GTEQF F.0 8.0 else4_1
    WRITE32 ENDSUB_F_BEEP_0:CALLSUB6 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BEEP_0
CALLSUB6:
    SOUND_READY
    WRITE32 ENDSUB_F_BEEP_0:CALLSUB8 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BEEP_0
CALLSUB8:
  else4_1:
  endif4:
    WRITE32 ENDSUB_F_MAIN_0:CALLSUB9 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MAIN_0
CALLSUB9:
ENDTHREAD:
    RETURN
SUB_F_BEEP_0:
    CALL SPEAKER.TONE 100.0 500.0 200.0
RETSUB_F_BEEP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BEEP_0:
SUB_F_MAIN_0:
    STRINGS DUPLICATE VGV_LEFT_MOTOR VLV_MOTOR_11
    MOVEF_F VGV_LEFT_FORWARD VLV_FORWARD_11
    MOVEF_F 320.0 VLV_DEG_11
    MOVEF_F 40.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE 'True' VLV_ACCELERATION_11
    STRINGS DUPLICATE 'True' VLV_ZAME_11
    STRINGS DUPLICATE 'True' VLV_TO_STOP_11
    WRITE32 ENDSUB_F_MOVE_MOTOR_FORWARD_7:CALLSUB11 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_FORWARD_7
CALLSUB11:
    STRINGS DUPLICATE VGV_RIGHT_MOTOR VLV_MOTOR_11
    MOVEF_F VGV_RIGHT_FORWARD VLV_FORWARD_11
    MOVEF_F 320.0 VLV_DEG_11
    MOVEF_F 40.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE 'True' VLV_ACCELERATION_11
    STRINGS DUPLICATE 'True' VLV_ZAME_11
    STRINGS DUPLICATE 'True' VLV_TO_STOP_11
    WRITE32 ENDSUB_F_MOVE_MOTOR_FORWARD_7:CALLSUB12 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_FORWARD_7
CALLSUB12:
    MOVEF_F 1200.0 VLV_DEG_10
    WRITE32 ENDSUB_F_FORWARD_DEG_1:CALLSUB13 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_FORWARD_DEG_1
CALLSUB13:
    MOVEF_F 80.0 VLV_POWER_1
    WRITE32 ENDSUB_F_MOVEMENT_INIT_1:CALLSUB14 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVEMENT_INIT_1
CALLSUB14:
  while15:
    CALL SENSOR.READPERCENT VGV_LEFT_LINE F.0
    JR_LTF F.0 30.0 or16
    CALL SENSOR.READPERCENT VGV_RIGHT_LINE F.0
    JR_GTEQF F.0 30.0 endwhile15
  or16:
  whilebody15:
    WRITE32 ENDSUB_F_SYNC_0:CALLSUB19 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SYNC_0
CALLSUB19:
    CALL SENSOR.READPERCENT VGV_LEFT_LINE F.0
    JR_LTF F.0 30.0 whilebody15
    CALL SENSOR.READPERCENT VGV_RIGHT_LINE F.0
    JR_LTF F.0 30.0 whilebody15
  endwhile15:
  while22:
    CALL SENSOR.READPERCENT VGV_LEFT_LINE F.0
    JR_GTF F.0 10.0 or23
    CALL SENSOR.READPERCENT VGV_RIGHT_LINE F.0
    JR_LTEQF F.0 10.0 endwhile22
  or23:
  whilebody22:
    WRITE32 ENDSUB_F_SYNC_0:CALLSUB26 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SYNC_0
CALLSUB26:
    CALL SENSOR.READPERCENT VGV_LEFT_LINE F.0
    JR_GTF F.0 10.0 whilebody22
    CALL SENSOR.READPERCENT VGV_RIGHT_LINE F.0
    JR_GTF F.0 10.0 whilebody22
  endwhile22:
    MOVEF_F 80.0 VLV_BASE_POWER_13
    MOVEF_F 15.0 VLV_MIN_POWER_13
    MOVEF_F 40.0 VLV_DEG_13
    WRITE32 ENDSUB_F_ZAME_3:CALLSUB29 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_3
CALLSUB29:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB30 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB30:
    WRITE32 ENDSUB_F_RESET_0:CALLSUB31 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RESET_0
CALLSUB31:
    MOVEF_F 250.0 VLV_TIME_4
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB32 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB32:
    STRINGS DUPLICATE VGV_RIGHT_MOTOR VLV_MOTOR_12
    MOVEF_F VGV_RIGHT_FORWARD VLV_FORWARD_12
    MOVEF_F 490.0 VLV_DEG_12
    MOVEF_F 40.0 VLV_MAX_POWER_12
    STRINGS DUPLICATE 'True' VLV_ACCELERATION_12
    STRINGS DUPLICATE 'False' VLV_ZAME_12
    STRINGS DUPLICATE 'False' VLV_TO_STOP_12
    WRITE32 ENDSUB_F_MOVE_MOTOR_BACKWARD_7:CALLSUB33 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_BACKWARD_7
CALLSUB33:
    MOVEF_F -50.0 VLV_POWER_1
    WRITE32 ENDSUB_F_MOVEMENT_INIT_1:CALLSUB34 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVEMENT_INIT_1
CALLSUB34:
    DATA32 milliseconds35
	MOVEF_32 700.0 milliseconds35
	DATA32 timer35
	TIMER_WAIT milliseconds35 timer35
	TIMER_READY timer35
    WRITE32 ENDSUB_F_STOP_0:CALLSUB36 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB36:
    MOVEF_F 70.0 VLV_DEG_10
    WRITE32 ENDSUB_F_FORWARD_DEG_1:CALLSUB37 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_FORWARD_DEG_1
CALLSUB37:
    OUTPUT_POWER 0 1 0
	OUTPUT_STOP 0 1 1
    STRINGS DUPLICATE VGV_RIGHT_MOTOR VLV_MOTOR_11
    MOVEF_F VGV_RIGHT_FORWARD VLV_FORWARD_11
    MOVEF_F 540.0 VLV_DEG_11
    MOVEF_F 40.0 VLV_MAX_POWER_11
    STRINGS DUPLICATE 'False' VLV_ACCELERATION_11
    STRINGS DUPLICATE 'True' VLV_ZAME_11
    STRINGS DUPLICATE 'True' VLV_TO_STOP_11
    WRITE32 ENDSUB_F_MOVE_MOTOR_FORWARD_7:CALLSUB39 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVE_MOTOR_FORWARD_7
CALLSUB39:
    WRITE32 ENDSUB_F_RESET_0:CALLSUB40 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RESET_0
CALLSUB40:
    MOVEF_F 80.0 VLV_POWER_1
    WRITE32 ENDSUB_F_MOVEMENT_INIT_1:CALLSUB41 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVEMENT_INIT_1
CALLSUB41:
    CALL SENSOR.READPERCENT VGV_LEFT_LINE F.2
    SUBF F.2 VGV_LEFT_MIN F.1
    SUBF VGV_LEFT_MAX VGV_LEFT_MIN F.2
    DATAF tmpf45
    DATA8 flag45
    DIVF F.1 F.2 tmpf45
    CP_EQF 0.0 F.2 flag45
    SELECTF flag45 0.0 tmpf45 F.0

    MULF F.0 100.0 VGV_L
    CALL SENSOR.READPERCENT VGV_RIGHT_LINE F.2
    SUBF F.2 VGV_RIGHT_MIN F.1
    SUBF VGV_RIGHT_MAX VGV_RIGHT_MIN F.2
    DATAF tmpf50
    DATA8 flag50
    DIVF F.1 F.2 tmpf50
    CP_EQF 0.0 F.2 flag50
    SELECTF flag50 0.0 tmpf50 F.0

    MULF F.0 100.0 VGV_R
  while52:
    JR_GTF VGV_L 50.0 or53
    JR_LTEQF VGV_R 50.0 endwhile52
  or53:
  whilebody52:
    MOVEF_F VGV_L VLV_L_2
    MOVEF_F VGV_R VLV_R_2
    WRITE32 ENDSUB_F_LINE_2:CALLSUB54 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_LINE_2
CALLSUB54:
    CALL SENSOR.READPERCENT VGV_LEFT_LINE F.2
    SUBF F.2 VGV_LEFT_MIN F.1
    SUBF VGV_LEFT_MAX VGV_LEFT_MIN F.2
    DATAF tmpf58
    DATA8 flag58
    DIVF F.1 F.2 tmpf58
    CP_EQF 0.0 F.2 flag58
    SELECTF flag58 0.0 tmpf58 F.0

    MULF F.0 100.0 VGV_L
    CALL SENSOR.READPERCENT VGV_RIGHT_LINE F.2
    SUBF F.2 VGV_RIGHT_MIN F.1
    SUBF VGV_RIGHT_MAX VGV_RIGHT_MIN F.2
    DATAF tmpf63
    DATA8 flag63
    DIVF F.1 F.2 tmpf63
    CP_EQF 0.0 F.2 flag63
    SELECTF flag63 0.0 tmpf63 F.0

    MULF F.0 100.0 VGV_R
    JR_GTF VGV_L 50.0 whilebody52
    JR_GTF VGV_R 50.0 whilebody52
  endwhile52:
    DATA32 tmp65
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 1  RUNCOUNTER_F_BEEP_0 tmp65
    JR_NEQ32 0 tmp65 alreadylaunched65
    OBJECT_START TF_BEEP_0
  alreadylaunched65:
    MOVEF_F 630.0 VLV_DEG_10
    WRITE32 ENDSUB_F_FORWARD_DEG_1:CALLSUB66 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_FORWARD_DEG_1
CALLSUB66:
    DATA32 tmp67
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 1  RUNCOUNTER_F_BEEP_0 tmp67
    JR_NEQ32 0 tmp67 alreadylaunched67
    OBJECT_START TF_BEEP_0
  alreadylaunched67:
    MOVEF_F 810.0 VLV_DEG_10
    WRITE32 ENDSUB_F_FORWARD_DEG_1:CALLSUB68 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_FORWARD_DEG_1
CALLSUB68:
    MOVEF_F 80.0 VLV_BASE_POWER_13
    MOVEF_F 0.0 VLV_MIN_POWER_13
    MOVEF_F 120.0 VLV_DEG_13
    WRITE32 ENDSUB_F_ZAME_3:CALLSUB69 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ZAME_3
CALLSUB69:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB70 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB70:
    DATA32 tmp71
    CALL GETANDINC32 RUNCOUNTER_F_BEEP_0 1  RUNCOUNTER_F_BEEP_0 tmp71
    JR_NEQ32 0 tmp71 alreadylaunched71
    OBJECT_START TF_BEEP_0
  alreadylaunched71:
    MOVEF_F 700.0 VLV_TIME_4
    WRITE32 ENDSUB_F_DELAY_1:CALLSUB72 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_1
CALLSUB72:
    MOVEF_F 30.0 VLV_POWER_8
    MOVEF_F 70.0 VLV_DEG_8
    WRITE32 ENDSUB_F_SPEEDUP_BACKWARD_2:CALLSUB73 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SPEEDUP_BACKWARD_2
CALLSUB73:
RETSUB_F_MAIN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MAIN_0:
SUB_F_MOVEMENT_INIT_1:
    MULF VLV_POWER_1 VGV_LEFT_FORWARD F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
	OUTPUT_START 0 1
    MULF VLV_POWER_1 VGV_RIGHT_FORWARD F.0
    MOVEF_8 F.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
	OUTPUT_START 0 2
RETSUB_F_MOVEMENT_INIT_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MOVEMENT_INIT_1:
SUB_F_LINE_2:
    JR_NEQF VLV_L_2 -100.0 else78_1
    CALL SENSOR.READPERCENT VGV_LEFT_LINE F.2
    SUBF F.2 VGV_LEFT_MIN F.1
    SUBF VGV_LEFT_MAX VGV_LEFT_MIN F.2
    DATAF tmpf82
    DATA8 flag82
    DIVF F.1 F.2 tmpf82
    CP_EQF 0.0 F.2 flag82
    SELECTF flag82 0.0 tmpf82 F.0

    MULF F.0 100.0 VLV_L_2
  else78_1:
  endif78:
    JR_NEQF VLV_R_2 -100.0 else84_1
    CALL SENSOR.READPERCENT VGV_RIGHT_LINE F.2
    SUBF F.2 VGV_RIGHT_MIN F.1
    SUBF VGV_RIGHT_MAX VGV_RIGHT_MIN F.2
    DATAF tmpf88
    DATA8 flag88
    DIVF F.1 F.2 tmpf88
    CP_EQF 0.0 F.2 flag88
    SELECTF flag88 0.0 tmpf88 F.0

    MULF F.0 100.0 VLV_R_2
  else84_1:
  endif84:
    SUBF VLV_R_2 VLV_L_2 VLV_ERR_2
    SUBF VLV_ERR_2 VGV_LAST_ERR VLV_DIFF_2
    MULF VLV_ERR_2 0.3 F.0
    MULF VLV_DIFF_2 1.0 F.1
    ADDF F.0 F.1 VLV_DELTA_2
    SUBF 80.0 VLV_DELTA_2 VLV_LEFT_POWER_2
    ADDF 80.0 VLV_DELTA_2 VLV_RIGHT_POWER_2
    MULF VLV_LEFT_POWER_2 VGV_LEFT_FORWARD F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
    MULF VLV_RIGHT_POWER_2 VGV_RIGHT_FORWARD F.0
    MOVEF_8 F.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
    MOVEF_F VLV_ERR_2 VGV_LAST_ERR
RETSUB_F_LINE_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE_2:
SUB_F_DELAY_1:
    DATA32 milliseconds101
	MOVEF_32 VLV_TIME_4 milliseconds101
	DATA32 timer101
	TIMER_WAIT milliseconds101 timer101
	TIMER_READY timer101
RETSUB_F_DELAY_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DELAY_1:
SUB_F_RESET_0:
    OUTPUT_CLR_COUNT 0 1
    OUTPUT_CLR_COUNT 0 2
RETSUB_F_RESET_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_RESET_0:
SUB_F_STOP_0:
    OUTPUT_POWER 0 3 0
	OUTPUT_STOP 0 3 1
RETSUB_F_STOP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_STOP_0:
SUB_F_SPEEDUP_BACKWARD_2:
    MOVEF_F -10.0 VLV_POWER_1
    WRITE32 ENDSUB_F_MOVEMENT_INIT_1:CALLSUB105 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVEMENT_INIT_1
CALLSUB105:
    WRITE32 ENDSUB_F_RESET_0:CALLSUB106 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RESET_0
CALLSUB106:
    MOVEF_F 0.0 VLV_L_8
  while107:
    JR_GTEQF VLV_L_8 VLV_DEG_8 endwhile107
  whilebody107:
    DATAF tmpf108
    DATA8 flag108
    DIVF VLV_L_8 VLV_DEG_8 tmpf108
    CP_EQF 0.0 VLV_DEG_8 flag108
    SELECTF flag108 0.0 tmpf108 VLV_P_8

    SUBF VLV_POWER_8 10.0 F.1
    MULF F.1 VLV_P_8 F.0
    ADDF F.0 10.0 VLV_POWER_8
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.1
    MULF F.1 VGV_LEFT_FORWARD F.0
    MULF F.0 -1.0 VLV_L_8
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.1
    MULF F.1 VGV_RIGHT_FORWARD F.0
    MULF F.0 -1.0 VLV_R_8
    SUBF VLV_L_8 VLV_R_8 F.0
    MULF F.0 VLV_P_8 VLV_DELTA_8
    SUBF VLV_POWER_8 VLV_DELTA_8 VLV_LEFT_POWER_8
    ADDF VLV_POWER_8 VLV_DELTA_8 VLV_RIGHT_POWER_8
    MULF VLV_LEFT_POWER_8 VGV_LEFT_FORWARD F.1
    MULF F.1 -1.0 F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
    MULF VLV_RIGHT_POWER_8 VGV_RIGHT_FORWARD F.1
    MULF F.1 -1.0 F.0
    MOVEF_8 F.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
    JR_LTF VLV_L_8 VLV_DEG_8 whilebody107
  endwhile107:
RETSUB_F_SPEEDUP_BACKWARD_2:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SPEEDUP_BACKWARD_2:
SUB_F_SYNC_0:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    MULF F.0 VGV_LEFT_FORWARD VLV_L_9
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.0
    MULF F.0 VGV_RIGHT_FORWARD VLV_R_9
    SUBF VLV_L_9 VLV_R_9 VLV_ERR_9
    SUBF VLV_ERR_9 VGV_LAST_ERR VLV_DIFF_9
    MULF VLV_ERR_9 1.0 F.0
    MULF VLV_DIFF_9 0.0 F.1
    ADDF F.0 F.1 VLV_DELTA_9
    SUBF 80.0 VLV_DELTA_9 VLV_LEFT_POWER_9
    ADDF 80.0 VLV_DELTA_9 VLV_RIGHT_POWER_9
    MULF VLV_LEFT_POWER_9 VGV_LEFT_FORWARD F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
    MULF VLV_RIGHT_POWER_9 VGV_RIGHT_FORWARD F.0
    MOVEF_8 F.0 setSpeedB
	OUTPUT_SPEED 0 2 setSpeedB
    MOVEF_F VLV_ERR_9 VGV_LAST_ERR
RETSUB_F_SYNC_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_SYNC_0:
SUB_F_FORWARD_DEG_1:
    MOVEF_F 80.0 VLV_POWER_1
    WRITE32 ENDSUB_F_MOVEMENT_INIT_1:CALLSUB143 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVEMENT_INIT_1
CALLSUB143:
    WRITE32 ENDSUB_F_RESET_0:CALLSUB144 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RESET_0
CALLSUB144:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    MULF F.0 VGV_LEFT_FORWARD VLV_L_10
  while147:
    JR_GTEQF VLV_L_10 VLV_DEG_10 endwhile147
  whilebody147:
    WRITE32 ENDSUB_F_SYNC_0:CALLSUB148 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_SYNC_0
CALLSUB148:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    MULF F.0 VGV_LEFT_FORWARD VLV_L_10
    JR_LTF VLV_L_10 VLV_DEG_10 whilebody147
  endwhile147:
RETSUB_F_FORWARD_DEG_1:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_FORWARD_DEG_1:
SUB_F_MOVE_MOTOR_FORWARD_7:
    MOVEF_F VLV_DEG_11 VLV_NORMAL_DEG_11
    CALL EQ_STRING VLV_ACCELERATION_11 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else151_1
    SUBF VLV_NORMAL_DEG_11 120.0 VLV_NORMAL_DEG_11
  else151_1:
  endif151:
    CALL EQ_STRING VLV_ZAME_11 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else154_1
    SUBF VLV_NORMAL_DEG_11 120.0 VLV_NORMAL_DEG_11
  else154_1:
  endif154:
    CALL EQ_STRING VLV_ACCELERATION_11 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else157_1
    CALL MOTOR.RESETCOUNT VLV_MOTOR_11
    MOVEF_F 0.0 VLV_M_11
  while160:
    JR_GTEQF VLV_M_11 120.0 endwhile160
  whilebody160:
    DATAF tmpf161
    DATA8 flag161
    DIVF VLV_M_11 120.0 tmpf161
    CP_EQF 0.0 120.0 flag161
    SELECTF flag161 0.0 tmpf161 VLV_P_11

    SUBF VLV_MAX_POWER_11 10.0 F.1
    MULF F.1 VLV_P_11 F.0
    ADDF F.0 10.0 VLV_POWER_11
    MULF VLV_POWER_11 VLV_FORWARD_11 F.0
    CALL MOTOR.START VLV_MOTOR_11 F.0
    CALL MOTOR.GETCOUNT VLV_MOTOR_11 F.0
    MULF F.0 VLV_FORWARD_11 VLV_M_11
    DATA32 milliseconds169
	MOVEF_32 10.0 milliseconds169
	DATA32 timer169
	TIMER_WAIT milliseconds169 timer169
	TIMER_READY timer169
    JR_LTF VLV_M_11 120.0 whilebody160
  endwhile160:
  else157_1:
  endif157:
    MULF VLV_MAX_POWER_11 VLV_FORWARD_11 F.0
    CALL MOTOR.SCHEDULE VLV_MOTOR_11 F.0 0.0 VLV_NORMAL_DEG_11 0.0 'False' 

	DATA8 layer171
	DATA8 nos171
	DATA8 busy171
	CALL MOTORDECODEPORTSDESCRIPTOR VLV_MOTOR_11 layer171 nos171
	JR_EQ8 0 nos171 motornotbusy171
  motorwaiting171:
	OUTPUT_TEST layer171 nos171 busy171
	JR_EQ8 busy171 0 motornotbusy171
	SLEEP
	JR motorwaiting171
  motornotbusy171:
    CALL EQ_STRING VLV_ZAME_11 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else172_1
    CALL MOTOR.RESETCOUNT VLV_MOTOR_11
    MOVEF_F 0.0 VLV_M_11
  while175:
    JR_GTEQF VLV_M_11 120.0 endwhile175
  whilebody175:
    DATAF tmpf176
    DATA8 flag176
    DIVF VLV_M_11 120.0 tmpf176
    CP_EQF 0.0 120.0 flag176
    SELECTF flag176 0.0 tmpf176 F.0

    SUBF 1.0 F.0 VLV_P_11
    SUBF VLV_MAX_POWER_11 10.0 F.1
    MULF F.1 VLV_P_11 F.0
    ADDF F.0 10.0 VLV_POWER_11
    MULF VLV_POWER_11 VLV_FORWARD_11 F.0
    CALL MOTOR.START VLV_MOTOR_11 F.0
    CALL MOTOR.GETCOUNT VLV_MOTOR_11 F.0
    MULF F.0 VLV_FORWARD_11 VLV_M_11
    DATA32 milliseconds185
	MOVEF_32 10.0 milliseconds185
	DATA32 timer185
	TIMER_WAIT milliseconds185 timer185
	TIMER_READY timer185
    JR_LTF VLV_M_11 120.0 whilebody175
  endwhile175:
  else172_1:
  endif172:
    CALL EQ_STRING VLV_TO_STOP_11 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else186_1
    CALL MOTOR.STOP VLV_MOTOR_11 'True'
  else186_1:
  endif186:
RETSUB_F_MOVE_MOTOR_FORWARD_7:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MOVE_MOTOR_FORWARD_7:
SUB_F_MOVE_MOTOR_BACKWARD_7:
    MULF -10.0 VLV_FORWARD_12 F.0
    CALL MOTOR.START VLV_MOTOR_12 F.0
    MOVEF_F VLV_DEG_12 VLV_NORMAL_DEG_12
    CALL EQ_STRING VLV_ACCELERATION_12 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else191_1
    SUBF VLV_NORMAL_DEG_12 120.0 VLV_NORMAL_DEG_12
  else191_1:
  endif191:
    CALL EQ_STRING VLV_ZAME_12 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else194_1
    SUBF VLV_NORMAL_DEG_12 120.0 VLV_NORMAL_DEG_12
  else194_1:
  endif194:
    CALL EQ_STRING VLV_ACCELERATION_12 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else197_1
    CALL MOTOR.RESETCOUNT VLV_MOTOR_12
    MOVEF_F 0.0 VLV_M_12
  while200:
    JR_GTEQF VLV_M_12 120.0 endwhile200
  whilebody200:
    DATAF tmpf201
    DATA8 flag201
    DIVF VLV_M_12 120.0 tmpf201
    CP_EQF 0.0 120.0 flag201
    SELECTF flag201 0.0 tmpf201 VLV_P_12

    SUBF VLV_MAX_POWER_12 10.0 F.1
    MULF F.1 VLV_P_12 F.0
    ADDF F.0 10.0 VLV_POWER_12
    MULF VLV_POWER_12 -1.0 F.1
    MULF F.1 VLV_FORWARD_12 F.0
    CALL MOTOR.START VLV_MOTOR_12 F.0
    CALL MOTOR.GETCOUNT VLV_MOTOR_12 F.1
    MULF F.1 -1.0 F.0
    MULF F.0 VLV_FORWARD_12 VLV_M_12
    JR_GTEQF VLV_M_12 0.0 else211_1
    MOVEF_F 0.0 VLV_M_12
  else211_1:
  endif211:
    DATA32 milliseconds212
	MOVEF_32 10.0 milliseconds212
	DATA32 timer212
	TIMER_WAIT milliseconds212 timer212
	TIMER_READY timer212
    JR_LTF VLV_M_12 120.0 whilebody200
  endwhile200:
  else197_1:
  endif197:
    MULF VLV_MAX_POWER_12 -1.0 F.1
    MULF F.1 VLV_FORWARD_12 F.0
    CALL MOTOR.SCHEDULE VLV_MOTOR_12 F.0 0.0 VLV_NORMAL_DEG_12 0.0 'False' 

	DATA8 layer215
	DATA8 nos215
	DATA8 busy215
	CALL MOTORDECODEPORTSDESCRIPTOR VLV_MOTOR_12 layer215 nos215
	JR_EQ8 0 nos215 motornotbusy215
  motorwaiting215:
	OUTPUT_TEST layer215 nos215 busy215
	JR_EQ8 busy215 0 motornotbusy215
	SLEEP
	JR motorwaiting215
  motornotbusy215:
    CALL EQ_STRING VLV_ZAME_12 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else216_1
    CALL MOTOR.RESETCOUNT VLV_MOTOR_12
    MOVEF_F 0.0 VLV_M_12
  while219:
    JR_GTEQF VLV_M_12 120.0 endwhile219
  whilebody219:
    DATAF tmpf220
    DATA8 flag220
    DIVF VLV_M_12 120.0 tmpf220
    CP_EQF 0.0 120.0 flag220
    SELECTF flag220 0.0 tmpf220 F.0

    SUBF 1.0 F.0 VLV_P_12
    SUBF VLV_MAX_POWER_12 10.0 F.1
    MULF F.1 VLV_P_12 F.0
    ADDF F.0 10.0 VLV_POWER_12
    MULF VLV_POWER_12 -1.0 F.1
    MULF F.1 VLV_FORWARD_12 F.0
    CALL MOTOR.START VLV_MOTOR_12 F.0
    CALL MOTOR.GETCOUNT VLV_MOTOR_12 F.1
    MULF F.1 -1.0 F.0
    MULF F.0 VLV_FORWARD_12 VLV_M_12
    DATA32 milliseconds231
	MOVEF_32 10.0 milliseconds231
	DATA32 timer231
	TIMER_WAIT milliseconds231 timer231
	TIMER_READY timer231
    JR_LTF VLV_M_12 120.0 whilebody219
  endwhile219:
  else216_1:
  endif216:
    CALL EQ_STRING VLV_TO_STOP_12 'True' S.0
    AND8888_32 S.0 -538976289 S.0
    STRINGS COMPARE S.0 'TRUE' S.0
    JR_EQ8 S.0 0 else232_1
    CALL MOTOR.STOP VLV_MOTOR_12 'True'
  else232_1:
  endif232:
RETSUB_F_MOVE_MOTOR_BACKWARD_7:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MOVE_MOTOR_BACKWARD_7:
SUB_F_ZAME_3:
    MOVEF_F VLV_BASE_POWER_13 VLV_POWER_1
    WRITE32 ENDSUB_F_MOVEMENT_INIT_1:CALLSUB235 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MOVEMENT_INIT_1
CALLSUB235:
    WRITE32 ENDSUB_F_RESET_0:CALLSUB236 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_RESET_0
CALLSUB236:
    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    MULF F.0 VGV_LEFT_FORWARD VLV_L_13
  while239:
    JR_GTEQF VLV_L_13 VLV_DEG_13 endwhile239
  whilebody239:
    DATAF tmpf240
    DATA8 flag240
    DIVF VLV_L_13 VLV_DEG_13 tmpf240
    CP_EQF 0.0 VLV_DEG_13 flag240
    SELECTF flag240 0.0 tmpf240 VLV_P_13

    OUTPUT_GET_COUNT 0 0 getTachoA
	MOVE32_F getTachoA F.0
    MULF F.0 VGV_LEFT_FORWARD VLV_L_13
    OUTPUT_GET_COUNT 0 1 getTachoB
	MOVE32_F getTachoB F.0
    MULF F.0 VGV_RIGHT_FORWARD VLV_R_13
    SUBF VLV_L_13 VLV_R_13 F.0
    SUBF 1.0 VLV_P_13 F.1
    MULF F.0 F.1 VLV_DELTA_13
    SUBF VLV_BASE_POWER_13 VLV_MIN_POWER_13 F.1
    SUBF 1.0 VLV_P_13 F.2
    MULF F.1 F.2 F.0
    ADDF F.0 VLV_MIN_POWER_13 VLV_POWER_13
    SUBF VLV_POWER_13 VLV_DELTA_13 VLV_LEFT_POWER_13
    ADDF VLV_POWER_13 VLV_DELTA_13 VLV_RIGHT_POWER_13
    MULF VLV_LEFT_POWER_13 VGV_LEFT_FORWARD F.0
    MOVEF_8 F.0 setPowerA
	OUTPUT_POWER 0 1 setPowerA
    MULF VLV_RIGHT_POWER_13 VGV_RIGHT_FORWARD F.0
    MOVEF_8 F.0 setPowerB
	OUTPUT_POWER 0 2 setPowerB
    DATA32 milliseconds258
	MOVEF_32 10.0 milliseconds258
	DATA32 timer258
	TIMER_WAIT milliseconds258 timer258
	TIMER_READY timer258
    JR_LTF VLV_L_13 VLV_DEG_13 whilebody239
  endwhile239:
RETSUB_F_ZAME_3:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ZAME_3:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall EV3.BATTERYVOLTAGE  // F
{
	OUT_F voltage
	UI_READ GET_VBATT voltage
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall EQ_STRING       // SSS
{
	IN_S  a 252
	IN_S  b 252
	OUT_S result 8
	
	DATA8 flag
	
	// check if completely equal
	STRINGS COMPARE a b flag
	JR_NEQ8 FLAG 0 isequal
	// second chance: when both values are "True" in any casing, this also counts as equal
	AND8888_32 a -538976289 a        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE a 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
	AND8888_32 b -538976289 b        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE b 'TRUE' flag	
	JR_EQ8 0,flag,isnotequal
isequal:
	STRINGS DUPLICATE 'True' result
	RETURN
isnotequal:
	STRINGS DUPLICATE 'False' result
	RETURN
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.START      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	JR_GTEQF speed -100.0 nottoosmall
	MOVEF_F -100.0 speed
nottoosmall:
	JR_LTEQF speed 100.0 nottoobig
	MOVEF_F 100.0 speed
nottoobig:

	DATA8 spd
	MOVEF_8 speed spd

    OUTPUT_TIME_SPEED layer nos spd 0 2147483647 0 0
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall GETANDINC32     // V
{
	IN_32 counterin
	IN_32 inc
	OUT_32 counterout
	OUT_32 prev

	MOVE32_32 counterin prev
	ADD32 counterin inc counterout
}
