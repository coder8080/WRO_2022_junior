DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAF VGV_LINE
DATAF VGV_LINE_MAX
DATAF VGV_LINE_MIN
DATAF VGV_RIGHT_SENSOR
DATAF VGV_R
DATAF VGV_G
DATAF VGV_B
DATAS VGV_RIGHT_RED 252
DATAS VGV_RIGHT_GREEN 252
DATAS VGV_RIGHT_BLUE 252
DATAS VGV_RIGHT_SUM 252
DATAS VGV_RIGHT_TEXT 252

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    MOVEF_F 0.0 VGV_LINE
    MOVEF_F 0.0 VGV_LINE_MAX
    MOVEF_F 0.0 VGV_LINE_MIN
    MOVEF_F 0.0 VGV_RIGHT_SENSOR
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_B
    STRINGS DUPLICATE '' VGV_RIGHT_RED
    STRINGS DUPLICATE '' VGV_RIGHT_GREEN
    STRINGS DUPLICATE '' VGV_RIGHT_BLUE
    STRINGS DUPLICATE '' VGV_RIGHT_SUM
    STRINGS DUPLICATE '' VGV_RIGHT_TEXT
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    DATAS S.0 252
    DATAS S.1 252
    DATAS S.2 252
    DATAS S.3 252
    DATAS S.4 252
    MOVE8_8 0 STACKPOINTER
    MOVEF_F 0.0 VGV_LINE
    MOVEF_F 0.0 VGV_LINE_MAX
    MOVEF_F 0.0 VGV_LINE_MIN
    MOVEF_F 0.0 VGV_RIGHT_SENSOR
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_B
    STRINGS DUPLICATE '' VGV_RIGHT_RED
    STRINGS DUPLICATE '' VGV_RIGHT_GREEN
    STRINGS DUPLICATE '' VGV_RIGHT_BLUE
    STRINGS DUPLICATE '' VGV_RIGHT_SUM
    STRINGS DUPLICATE '' VGV_RIGHT_TEXT
    MOVEF_F 1.0 VGV_LINE
    MOVEF_F 40.0 VGV_LINE_MAX
    MOVEF_F 5.0 VGV_LINE_MIN
    MOVEF_F 1.0 VGV_RIGHT_SENSOR
    DATA8 layer0
	DATA8 no0
	DATA8 mode80
	
	MOVEF_8 VGV_LINE no0
	SUB8 no0 1 no0
	DIV8 no0 4 layer0
	MATH MOD8 no0 4 no0

	MOVEF_8 4.0 mode80
	
	INPUT_DEVICE READY_RAW layer0 no0 0 mode80 0
  while1:
  whilebody1:
    MOVEF_F 0.0 VGV_R
    MOVEF_F 0.0 VGV_G
    MOVEF_F 0.0 VGV_B
    INPUT_READEXT 0 0 0 -1 18 3 s1out1 s1out2 s1out3
	MOVE32_F s1out1 VGV_R
	MOVE32_F s1out2 VGV_G
	MOVE32_F s1out3 VGV_B
    STRINGS VALUE_FORMATTED VGV_R '%g' 99 S.0
    CALL TEXT.APPEND S.0 '' VGV_RIGHT_RED
    STRINGS VALUE_FORMATTED VGV_G '%g' 99 S.0
    CALL TEXT.APPEND S.0 '' VGV_RIGHT_GREEN
    STRINGS VALUE_FORMATTED VGV_B '%g' 99 S.0
    CALL TEXT.APPEND S.0 '' VGV_RIGHT_BLUE
    ADDF VGV_R VGV_G F.1
    ADDF F.1 VGV_B F.0
    STRINGS VALUE_FORMATTED F.0 '%g' 99 S.0
    CALL TEXT.APPEND S.0 '' VGV_RIGHT_SUM
    CALL TEXT.APPEND VGV_RIGHT_RED ' ' S.4
    CALL TEXT.APPEND S.4 VGV_RIGHT_GREEN S.3
    CALL TEXT.APPEND S.3 ' ' S.2
    CALL TEXT.APPEND S.2 VGV_RIGHT_BLUE S.1
    CALL TEXT.APPEND S.1 ' ' S.0
    CALL TEXT.APPEND S.0 VGV_RIGHT_SUM VGV_RIGHT_TEXT
    MOVE32_32 1 STOPLCDUPDATE
    CALL LCD.CLEAR
    CALL LCD.TEXT 1.0 0.0 40.0 1.0 VGV_RIGHT_TEXT
    MOVE32_32 0 STOPLCDUPDATE
	UI_DRAW UPDATE
    JR whilebody1
  endwhile1:
ENDTHREAD:
    RETURN
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
