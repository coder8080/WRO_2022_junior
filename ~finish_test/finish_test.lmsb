DATA16 FD_NATIVECODECOMMAND
DATA16 FD_NATIVECODERESPONSE
DATA32 STOPLCDUPDATE
DATA32 NUMMAILBOXES
ARRAY8 MOTORISINVERTED 4     
ARRAY8 FIRSTOF2  16
ARRAY16 LOCKS 2           
DATA32 s1out1
DATA32 s1out2
DATA32 s1out3
DATA32 s2out1
DATA32 s2out2
DATA32 s2out3
DATA32 s3out1
DATA32 s3out2
DATA32 s3out3
DATA32 s4out1
DATA32 s4out2
DATA32 s4out3
DATA32 getTachoA
DATA32 tmpTachoA
DATA8 getSpeedA
DATA8 setSpeedA
DATA8 setPowerA
DATA32 getTachoB
DATA32 tmpTachoB
DATA8 getSpeedB
DATA8 setSpeedB
DATA8 setPowerB
DATA32 getTachoC
DATA32 tmpTachoC
DATA8 getSpeedC
DATA8 setSpeedC
DATA8 setPowerC
DATA32 getTachoD
DATA32 tmpTachoD
DATA8 getSpeedD
DATA8 setSpeedD
DATA8 setPowerD
DATA16 newArray1d
DATA32 newSize1d
DATA32 newIndex1d
DATA32 timeMC1
DATA32 timeMC2
DATA32 timeMC3
DATA32 timeMC4
DATA32 timeMC5
DATA32 timeMC6
DATA32 timeMC7
DATA32 timeMC8
DATA32 timeMC9
DATA32 timeMC1tmp
DATA32 timeMC2tmp
DATA32 timeMC3tmp
DATA32 timeMC4tmp
DATA32 timeMC5tmp
DATA32 timeMC6tmp
DATA32 timeMC7tmp
DATA32 timeMC8tmp
DATA32 timeMC9tmp
DATAS VGV_LEFT_MOTOR 252
DATAS VGV_RIGHT_MOTOR 252
DATAS VGV_NOT_INVERSED_MOTOR 252
DATAS VGV_GRABBER_MOTOR 252
DATAS VGV_MOTORS 252
DATAS VGV_WATER_MOTOR 252
DATAF VGV_LEFT_SENSOR
DATAF VGV_RIGHT_SENSOR
DATAF VGV_LINE_SENSOR
DATAF VGV_ULTRASONIC
DATAF VGV_RIGHT_FORWARD
DATAF VGV_LEFT_FORWARD
DATAF VGV_A
DATAF VGV_P
DATAF VGV_D
DATAF VGV_LASTERROR
DATAF VGV_NOWERROR
DATAF VGV_DIF
DATAF VGV_INTEGRAL
DATAF VGV_DERIVATIVE
DATAF VGV_UP
DATAF VGV_P_U
DATAF VGV_D_U
DATAF VGV_DEG
DATAS VGV_IS_CHEM_ON_RIGHT 252
DATAS VGV_IS_CHEM_ON_LEFT 252
DATAS VGV_BROWN 252
DATAS VGV_RED 252
DATAS VGV_YELLOW 252
DATAS VGV_GREEN 252
DATAS VGV_BLUE 252
DATAS VGV_WHITE 252
DATAS VGV_CHEM 252
DATAS VGV_BROWN_MAN 252
DATAS VGV_RED_MAN 252
DATAS VGV_YELLOW_MAN 252
DATAS VGV_GREEN_MAN 252
DATAS VGV_BLUE_MAN 252
DATAS VGV_WHITE_MAN 252
DATAF VGV_CUBES_COUNT
DATAF VGV_WATER_STATE
DATAS VGV_OBJECT 252
DATAF VGV_B
DATAF VGV_W
DATAF VGV_R_C
DATAF VGV_L_C
DATAF VGV_DIFF
DATAF VGV_R_P
DATAF VGV_L_P

vmthread MAIN
{
    MOVE32_32 0 STOPLCDUPDATE
    MOVE32_32 0 NUMMAILBOXES
    OUTPUT_RESET 0 15

	WRITE8 0 0 MOTORISINVERTED
	WRITE8 0 1 MOTORISINVERTED
	WRITE8 0 2 MOTORISINVERTED
	WRITE8 0 3 MOTORISINVERTED
	WRITE8 0 0 FIRSTOF2
	WRITE8 0 1 FIRSTOF2
	WRITE8 0 2 FIRSTOF2
	WRITE8 1 3 FIRSTOF2
	WRITE8 0 4 FIRSTOF2
	WRITE8 1 5 FIRSTOF2
	WRITE8 2 6 FIRSTOF2
	WRITE8 0 7 FIRSTOF2
	WRITE8 0 8 FIRSTOF2
	WRITE8 1 9 FIRSTOF2
	WRITE8 2 10 FIRSTOF2
	WRITE8 0 11 FIRSTOF2
	WRITE8 4 12 FIRSTOF2
	WRITE8 0 13 FIRSTOF2
	WRITE8 0 14 FIRSTOF2
	WRITE8 0 15 FIRSTOF2
    INPUT_DEVICE CLR_ALL -1
    ARRAY CREATE8 0 LOCKS
    MOVE32_32 0 s1out1
	MOVE32_32 0 s1out2
	MOVE32_32 0 s1out3
    MOVE32_32 0 s2out1
	MOVE32_32 0 s2out2
	MOVE32_32 0 s2out3
    MOVE32_32 0 s3out1
	MOVE32_32 0 s3out2
	MOVE32_32 0 s3out3
    MOVE32_32 0 s4out1
	MOVE32_32 0 s4out2
	MOVE32_32 0 s4out3
    MOVE32_32 0 timeMC1
	MOVE32_32 0 timeMC2
	MOVE32_32 0 timeMC3
	MOVE32_32 0 timeMC4
	MOVE32_32 0 timeMC5
	MOVE32_32 0 timeMC6
	MOVE32_32 0 timeMC7
	MOVE32_32 0 timeMC8
	MOVE32_32 0 timeMC9
    STRINGS DUPLICATE '' VGV_LEFT_MOTOR
    STRINGS DUPLICATE '' VGV_RIGHT_MOTOR
    STRINGS DUPLICATE '' VGV_NOT_INVERSED_MOTOR
    STRINGS DUPLICATE '' VGV_GRABBER_MOTOR
    STRINGS DUPLICATE '' VGV_MOTORS
    STRINGS DUPLICATE '' VGV_WATER_MOTOR
    MOVEF_F 0.0 VGV_LEFT_SENSOR
    MOVEF_F 0.0 VGV_RIGHT_SENSOR
    MOVEF_F 0.0 VGV_LINE_SENSOR
    MOVEF_F 0.0 VGV_ULTRASONIC
    MOVEF_F 0.0 VGV_RIGHT_FORWARD
    MOVEF_F 0.0 VGV_LEFT_FORWARD
    MOVEF_F 0.0 VGV_A
    MOVEF_F 0.0 VGV_P
    MOVEF_F 0.0 VGV_D
    MOVEF_F 0.0 VGV_LASTERROR
    MOVEF_F 0.0 VGV_NOWERROR
    MOVEF_F 0.0 VGV_DIF
    MOVEF_F 0.0 VGV_INTEGRAL
    MOVEF_F 0.0 VGV_DERIVATIVE
    MOVEF_F 0.0 VGV_UP
    MOVEF_F 0.0 VGV_P_U
    MOVEF_F 0.0 VGV_D_U
    MOVEF_F 0.0 VGV_DEG
    STRINGS DUPLICATE '' VGV_IS_CHEM_ON_RIGHT
    STRINGS DUPLICATE '' VGV_IS_CHEM_ON_LEFT
    STRINGS DUPLICATE '' VGV_BROWN
    STRINGS DUPLICATE '' VGV_RED
    STRINGS DUPLICATE '' VGV_YELLOW
    STRINGS DUPLICATE '' VGV_GREEN
    STRINGS DUPLICATE '' VGV_BLUE
    STRINGS DUPLICATE '' VGV_WHITE
    STRINGS DUPLICATE '' VGV_CHEM
    STRINGS DUPLICATE '' VGV_BROWN_MAN
    STRINGS DUPLICATE '' VGV_RED_MAN
    STRINGS DUPLICATE '' VGV_YELLOW_MAN
    STRINGS DUPLICATE '' VGV_GREEN_MAN
    STRINGS DUPLICATE '' VGV_BLUE_MAN
    STRINGS DUPLICATE '' VGV_WHITE_MAN
    MOVEF_F 0.0 VGV_CUBES_COUNT
    MOVEF_F 0.0 VGV_WATER_STATE
    STRINGS DUPLICATE '' VGV_OBJECT
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W
    MOVEF_F 0.0 VGV_R_C
    MOVEF_F 0.0 VGV_L_C
    MOVEF_F 0.0 VGV_DIFF
    MOVEF_F 0.0 VGV_R_P
    MOVEF_F 0.0 VGV_L_P
    ARRAY CREATE8 1 LOCKS
    CALL PROGRAM_MAIN -1
    PROGRAM_STOP -1
}
subcall PROGRAM_MAIN
{
    IN_32 SUBPROGRAM
    DATA32 INDEX
    ARRAY8 STACKPOINTER 4
    DATAF F.0
    DATAF F.1
    ARRAY32 RETURNSTACK2 128
    ARRAY32 RETURNSTACK 128
    MOVE8_8 0 STACKPOINTER
    STRINGS DUPLICATE '' VGV_LEFT_MOTOR
    STRINGS DUPLICATE '' VGV_RIGHT_MOTOR
    STRINGS DUPLICATE '' VGV_NOT_INVERSED_MOTOR
    STRINGS DUPLICATE '' VGV_GRABBER_MOTOR
    STRINGS DUPLICATE '' VGV_MOTORS
    STRINGS DUPLICATE '' VGV_WATER_MOTOR
    MOVEF_F 0.0 VGV_LEFT_SENSOR
    MOVEF_F 0.0 VGV_RIGHT_SENSOR
    MOVEF_F 0.0 VGV_LINE_SENSOR
    MOVEF_F 0.0 VGV_ULTRASONIC
    MOVEF_F 0.0 VGV_RIGHT_FORWARD
    MOVEF_F 0.0 VGV_LEFT_FORWARD
    MOVEF_F 0.0 VGV_A
    MOVEF_F 0.0 VGV_P
    MOVEF_F 0.0 VGV_D
    MOVEF_F 0.0 VGV_LASTERROR
    MOVEF_F 0.0 VGV_NOWERROR
    MOVEF_F 0.0 VGV_DIF
    MOVEF_F 0.0 VGV_INTEGRAL
    MOVEF_F 0.0 VGV_DERIVATIVE
    MOVEF_F 0.0 VGV_UP
    MOVEF_F 0.0 VGV_P_U
    MOVEF_F 0.0 VGV_D_U
    MOVEF_F 0.0 VGV_DEG
    STRINGS DUPLICATE '' VGV_IS_CHEM_ON_RIGHT
    STRINGS DUPLICATE '' VGV_IS_CHEM_ON_LEFT
    STRINGS DUPLICATE '' VGV_BROWN
    STRINGS DUPLICATE '' VGV_RED
    STRINGS DUPLICATE '' VGV_YELLOW
    STRINGS DUPLICATE '' VGV_GREEN
    STRINGS DUPLICATE '' VGV_BLUE
    STRINGS DUPLICATE '' VGV_WHITE
    STRINGS DUPLICATE '' VGV_CHEM
    STRINGS DUPLICATE '' VGV_BROWN_MAN
    STRINGS DUPLICATE '' VGV_RED_MAN
    STRINGS DUPLICATE '' VGV_YELLOW_MAN
    STRINGS DUPLICATE '' VGV_GREEN_MAN
    STRINGS DUPLICATE '' VGV_BLUE_MAN
    STRINGS DUPLICATE '' VGV_WHITE_MAN
    MOVEF_F 0.0 VGV_CUBES_COUNT
    MOVEF_F 0.0 VGV_WATER_STATE
    STRINGS DUPLICATE '' VGV_OBJECT
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W
    STRINGS DUPLICATE 'A' VGV_LEFT_MOTOR
    STRINGS DUPLICATE 'B' VGV_RIGHT_MOTOR
    STRINGS DUPLICATE 'B' VGV_NOT_INVERSED_MOTOR
    STRINGS DUPLICATE 'C' VGV_GRABBER_MOTOR
    CALL TEXT.APPEND VGV_LEFT_MOTOR VGV_RIGHT_MOTOR VGV_MOTORS
    STRINGS DUPLICATE 'D' VGV_WATER_MOTOR
    MOVEF_F 2.0 VGV_LEFT_SENSOR
    MOVEF_F 3.0 VGV_RIGHT_SENSOR
    MOVEF_F 1.0 VGV_LINE_SENSOR
    MOVEF_F 4.0 VGV_ULTRASONIC
    MOVEF_F 1.0 VGV_RIGHT_FORWARD
    MOVEF_F -1.0 VGV_LEFT_FORWARD
    MOVEF_F 0.0 VGV_A
    MOVEF_F 1.0 VGV_P
    MOVEF_F 6.0 VGV_D
    MOVEF_F 0.0 VGV_LASTERROR
    MOVEF_F 0.0 VGV_NOWERROR
    MOVEF_F 0.0 VGV_DIF
    MOVEF_F 0.0 VGV_INTEGRAL
    MOVEF_F 0.0 VGV_DERIVATIVE
    MOVEF_F 0.0 VGV_UP
    MOVEF_F 1.0 VGV_P_U
    MOVEF_F 0.0 VGV_D_U
    MOVEF_F 0.0 VGV_DEG
    STRINGS DUPLICATE 'False' VGV_IS_CHEM_ON_RIGHT
    STRINGS DUPLICATE 'False' VGV_IS_CHEM_ON_LEFT
    STRINGS DUPLICATE 'False' VGV_BROWN
    STRINGS DUPLICATE 'False' VGV_RED
    STRINGS DUPLICATE 'False' VGV_YELLOW
    STRINGS DUPLICATE 'False' VGV_GREEN
    STRINGS DUPLICATE 'False' VGV_BLUE
    STRINGS DUPLICATE 'False' VGV_WHITE
    STRINGS DUPLICATE 'False' VGV_CHEM
    STRINGS DUPLICATE 'False' VGV_BROWN_MAN
    STRINGS DUPLICATE 'False' VGV_RED_MAN
    STRINGS DUPLICATE 'False' VGV_YELLOW_MAN
    STRINGS DUPLICATE 'False' VGV_GREEN_MAN
    STRINGS DUPLICATE 'False' VGV_BLUE_MAN
    STRINGS DUPLICATE 'False' VGV_WHITE_MAN
    MOVEF_F 2.0 VGV_CUBES_COUNT
    MOVEF_F 0.0 VGV_WATER_STATE
    STRINGS DUPLICATE '' VGV_OBJECT
    MOVEF_F 0.0 VGV_B
    MOVEF_F 0.0 VGV_W
    DATA8 layer1
	DATA8 no1
	DATA8 mode81
	
	MOVEF_8 VGV_LINE_SENSOR no1
	SUB8 no1 1 no1
	DIV8 no1 4 layer1
	MATH MOD8 no1 4 no1

	MOVEF_8 0.0 mode81
	
	INPUT_DEVICE READY_RAW layer1 no1 0 mode81 0
    DATA8 layer2
	DATA8 no2
	DATA8 mode82
	
	MOVEF_8 VGV_RIGHT_SENSOR no2
	SUB8 no2 1 no2
	DIV8 no2 4 layer2
	MATH MOD8 no2 4 no2

	MOVEF_8 1.0 mode82
	
	INPUT_DEVICE READY_RAW layer2 no2 0 mode82 0
    DATA8 layer3
	DATA8 no3
	DATA8 mode83
	
	MOVEF_8 VGV_LEFT_SENSOR no3
	SUB8 no3 1 no3
	DIV8 no3 4 layer3
	MATH MOD8 no3 4 no3

	MOVEF_8 1.0 mode83
	
	INPUT_DEVICE READY_RAW layer3 no3 0 mode83 0
    DATA8 layer4
	DATA8 no4
	DATA8 mode84
	
	MOVEF_8 VGV_ULTRASONIC no4
	SUB8 no4 1 no4
	DIV8 no4 4 layer4
	MATH MOD8 no4 4 no4

	MOVEF_8 0.0 mode84
	
	INPUT_DEVICE READY_RAW layer4 no4 0 mode84 0
    CALL EV3.BATTERYVOLTAGE F.0
    JR_GTEQF F.0 8.0 else5_1
    CALL LCD.CLEAR
    CALL LCD.TEXT 1.0 0.0 0.0 1.0 'Low battery'
    WRITE32 ENDSUB_F_BEEP_0:CALLSUB9 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BEEP_0
CALLSUB9:
    WRITE32 ENDSUB_F_DELAY_0:CALLSUB10 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_DELAY_0
CALLSUB10:
    WRITE32 ENDSUB_F_BEEP_0:CALLSUB11 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_BEEP_0
CALLSUB11:
  else5_1:
  endif5:
    WRITE32 ENDSUB_F_MAIN_0:CALLSUB12 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_MAIN_0
CALLSUB12:
ENDTHREAD:
    RETURN
SUB_F_LINE_0:
    CALL SENSOR.READPERCENT 1.0 F.0
    SUBF 20.0 F.0 VGV_NOWERROR
    SUBF VGV_LASTERROR VGV_NOWERROR VGV_DIF
    ADDF VGV_INTEGRAL VGV_NOWERROR F.0
    DATAF tmpf17
    DATA8 flag17
    DIVF F.0 10.0 tmpf17
    CP_EQF 0.0 10.0 flag17
    SELECTF flag17 0.0 tmpf17 VGV_INTEGRAL

    SUBF VGV_NOWERROR VGV_LASTERROR VGV_DERIVATIVE
    MULF VGV_NOWERROR VGV_P F.0
    MULF VGV_INTEGRAL VGV_D F.1
    ADDF F.0 F.1 VGV_UP
    SUBF 40.0 VGV_UP F.0
    CALL MOTOR.STARTPOWER 'B' F.0
    SUBF -40.0 VGV_UP F.0
    CALL MOTOR.STARTPOWER 'A' F.0
    MOVEF_F VGV_NOWERROR VGV_LASTERROR
RETSUB_F_LINE_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_LINE_0:
SUB_F_ULTRASONIC_SLOW_0:
    CALL SENSOR.READRAWVALUE VGV_ULTRASONIC 0.0 F.0
    SUBF F.0 VGV_A VGV_NOWERROR
    SUBF VGV_LASTERROR VGV_NOWERROR VGV_DIF
    ADDF VGV_INTEGRAL VGV_NOWERROR F.0
    DATAF tmpf30
    DATA8 flag30
    DIVF F.0 10.0 tmpf30
    CP_EQF 0.0 10.0 flag30
    SELECTF flag30 0.0 tmpf30 VGV_INTEGRAL

    SUBF VGV_NOWERROR VGV_LASTERROR VGV_DERIVATIVE
    MULF VGV_NOWERROR VGV_P_U F.0
    MULF VGV_INTEGRAL VGV_D_U F.1
    ADDF F.0 F.1 VGV_UP
    ADDF 20.0 VGV_UP F.1
    MULF F.1 VGV_RIGHT_FORWARD F.0
    CALL MOTOR.STARTPOWER VGV_RIGHT_MOTOR F.0
    SUBF 20.0 VGV_UP F.1
    MULF F.1 VGV_LEFT_FORWARD F.0
    CALL MOTOR.STARTPOWER VGV_LEFT_MOTOR F.0
    MOVEF_F VGV_NOWERROR VGV_LASTERROR
RETSUB_F_ULTRASONIC_SLOW_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ULTRASONIC_SLOW_0:
SUB_F_ULTRASONIC_SUPERFAST_0:
    CALL SENSOR.READRAWVALUE VGV_ULTRASONIC 0.0 F.0
    SUBF F.0 VGV_A VGV_NOWERROR
    SUBF VGV_LASTERROR VGV_NOWERROR VGV_DIF
    ADDF VGV_INTEGRAL VGV_NOWERROR F.0
    DATAF tmpf45
    DATA8 flag45
    DIVF F.0 10.0 tmpf45
    CP_EQF 0.0 10.0 flag45
    SELECTF flag45 0.0 tmpf45 VGV_INTEGRAL

    SUBF VGV_NOWERROR VGV_LASTERROR VGV_DERIVATIVE
    MULF VGV_NOWERROR VGV_P_U F.0
    MULF VGV_INTEGRAL VGV_D_U F.1
    ADDF F.0 F.1 VGV_UP
    ADDF 60.0 VGV_UP F.1
    MULF F.1 VGV_RIGHT_FORWARD F.0
    CALL MOTOR.STARTPOWER VGV_RIGHT_MOTOR F.0
    SUBF 60.0 VGV_UP F.1
    MULF F.1 VGV_LEFT_FORWARD F.0
    CALL MOTOR.STARTPOWER VGV_LEFT_MOTOR F.0
    MOVEF_F VGV_NOWERROR VGV_LASTERROR
RETSUB_F_ULTRASONIC_SUPERFAST_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_ULTRASONIC_SUPERFAST_0:
SUB_F_STOP_0:
    CALL MOTOR.STOP VGV_MOTORS 'True'
RETSUB_F_STOP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_STOP_0:
SUB_F_DELAY_0:
    DATA32 milliseconds57
	MOVEF_32 300.0 milliseconds57
	DATA32 timer57
	TIMER_WAIT milliseconds57 timer57
	TIMER_READY timer57
RETSUB_F_DELAY_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_DELAY_0:
SUB_F_BEEP_0:
    CALL SPEAKER.TONE 100.0 500.0 200.0
RETSUB_F_BEEP_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_BEEP_0:
SUB_F_CLOSE_CUBES_0:
    CALL MOTOR.SCHEDULE VGV_WATER_MOTOR -10.0 0.0 70.0 0.0 'True' 

	DATA8 layer59
	DATA8 nos59
	DATA8 busy59
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_WATER_MOTOR layer59 nos59
	JR_EQ8 0 nos59 motornotbusy59
  motorwaiting59:
	OUTPUT_TEST layer59 nos59 busy59
	JR_EQ8 busy59 0 motornotbusy59
	SLEEP
	JR motorwaiting59
  motornotbusy59:
RETSUB_F_CLOSE_CUBES_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_CLOSE_CUBES_0:
SUB_F_OPEN_CUBES_0:
    CALL MOTOR.SCHEDULE VGV_WATER_MOTOR 10.0 0.0 70.0 0.0 'True' 

	DATA8 layer60
	DATA8 nos60
	DATA8 busy60
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_WATER_MOTOR layer60 nos60
	JR_EQ8 0 nos60 motornotbusy60
  motorwaiting60:
	OUTPUT_TEST layer60 nos60 busy60
	JR_EQ8 busy60 0 motornotbusy60
	SLEEP
	JR motorwaiting60
  motornotbusy60:
RETSUB_F_OPEN_CUBES_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_OPEN_CUBES_0:
SUB_F_GO_FORWARD_0:
    CALL MOTOR.GETCOUNT VGV_RIGHT_MOTOR F.0
    MULF F.0 VGV_RIGHT_FORWARD VGV_R_C
    CALL MOTOR.GETCOUNT VGV_LEFT_MOTOR F.0
    MULF F.0 VGV_LEFT_FORWARD VGV_L_C
    SUBF VGV_R_C VGV_L_C F.0
    MULF F.0 1.0 VGV_DIFF
    SUBF 20.0 VGV_DIFF F.0
    MULF F.0 VGV_RIGHT_FORWARD VGV_R_P
    ADDF 20.0 VGV_DIFF F.0
    MULF F.0 VGV_LEFT_FORWARD VGV_L_P
    CALL MOTOR.STARTPOWER VGV_RIGHT_MOTOR VGV_R_P
    CALL MOTOR.STARTPOWER VGV_LEFT_MOTOR VGV_L_P
RETSUB_F_GO_FORWARD_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_GO_FORWARD_0:
SUB_F_GO_BACKWARD_0:
    CALL MOTOR.GETCOUNT VGV_RIGHT_MOTOR F.0
    MULF F.0 VGV_RIGHT_FORWARD VGV_R_C
    CALL MOTOR.GETCOUNT VGV_LEFT_MOTOR F.0
    MULF F.0 VGV_LEFT_FORWARD VGV_L_C
    SUBF VGV_R_C VGV_L_C F.0
    MULF F.0 1.0 VGV_DIFF
    SUBF -20.0 VGV_DIFF F.0
    MULF F.0 VGV_RIGHT_FORWARD VGV_R_P
    ADDF -20.0 VGV_DIFF F.0
    MULF F.0 VGV_LEFT_FORWARD VGV_L_P
    CALL MOTOR.STARTPOWER VGV_RIGHT_MOTOR VGV_R_P
    CALL MOTOR.STARTPOWER VGV_LEFT_MOTOR VGV_L_P
RETSUB_F_GO_BACKWARD_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_GO_BACKWARD_0:
SUB_F_MOVE_FORWARD_0:
    CALL MOTOR.RESETCOUNT VGV_LEFT_MOTOR
    CALL MOTOR.RESETCOUNT VGV_RIGHT_MOTOR
  while87:
    CALL MOTOR.GETCOUNT VGV_NOT_INVERSED_MOTOR F.0
    JR_GTEQF F.0 VGV_DEG endwhile87
  whilebody87:
    WRITE32 ENDSUB_F_GO_FORWARD_0:CALLSUB89 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GO_FORWARD_0
CALLSUB89:
    CALL MOTOR.GETCOUNT VGV_NOT_INVERSED_MOTOR F.0
    JR_LTF F.0 VGV_DEG whilebody87
  endwhile87:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB91 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB91:
RETSUB_F_MOVE_FORWARD_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MOVE_FORWARD_0:
SUB_F_MOVE_BACKWARD_0:
    CALL MOTOR.RESETCOUNT VGV_LEFT_MOTOR
    CALL MOTOR.RESETCOUNT VGV_RIGHT_MOTOR
  while94:
    CALL MOTOR.GETCOUNT VGV_NOT_INVERSED_MOTOR F.0
    MULF -1.0 VGV_DEG F.1
    JR_LTEQF F.0 F.1 endwhile94
  whilebody94:
    WRITE32 ENDSUB_F_GO_BACKWARD_0:CALLSUB97 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_GO_BACKWARD_0
CALLSUB97:
    CALL MOTOR.GETCOUNT VGV_NOT_INVERSED_MOTOR F.0
    MULF -1.0 VGV_DEG F.1
    JR_GTF F.0 F.1 whilebody94
  endwhile94:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB100 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB100:
RETSUB_F_MOVE_BACKWARD_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MOVE_BACKWARD_0:
SUB_F_MAIN_0:
    MULF VGV_LEFT_FORWARD -20.0 F.0
    MULF VGV_RIGHT_FORWARD -20.0 F.1
    CALL MOTOR.SCHEDULESYNC VGV_MOTORS F.0 F.1 220.0 'True'

	DATA8 layer103
	DATA8 nos103
	DATA8 busy103
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_MOTORS layer103 nos103
	JR_EQ8 0 nos103 motornotbusy103
  motorwaiting103:
	OUTPUT_TEST layer103 nos103 busy103
	JR_EQ8 busy103 0 motornotbusy103
	SLEEP
	JR motorwaiting103
  motornotbusy103:
    MULF VGV_LEFT_FORWARD 20.0 F.0
    CALL MOTOR.SCHEDULE VGV_LEFT_MOTOR F.0 0.0 360.0 0.0 'True' 

	DATA8 layer105
	DATA8 nos105
	DATA8 busy105
	CALL MOTORDECODEPORTSDESCRIPTOR VGV_LEFT_MOTOR layer105 nos105
	JR_EQ8 0 nos105 motornotbusy105
  motorwaiting105:
	OUTPUT_TEST layer105 nos105 busy105
	JR_EQ8 busy105 0 motornotbusy105
	SLEEP
	JR motorwaiting105
  motornotbusy105:
    MOVEF_F 107.0 VGV_A
    TIMER_READ timeMC1
  while107:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_GTEQF F.0 4500.0 endwhile107
  whilebody107:
    WRITE32 ENDSUB_F_ULTRASONIC_SUPERFAST_0:CALLSUB109 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_ULTRASONIC_SUPERFAST_0
CALLSUB109:
    TIMER_READ timeMC1tmp
	SUB32 timeMC1tmp timeMC1 timeMC1tmp
	MOVE32_F timeMC1tmp F.0
    JR_LTF F.0 4500.0 whilebody107
  endwhile107:
    WRITE32 ENDSUB_F_STOP_0:CALLSUB111 STACKPOINTER RETURNSTACK
    ADD8 STACKPOINTER 1 STACKPOINTER
    JR SUB_F_STOP_0
CALLSUB111:
RETSUB_F_MAIN_0:
    SUB8 STACKPOINTER 1 STACKPOINTER
    READ32 RETURNSTACK STACKPOINTER INDEX
    JR_DYNAMIC INDEX
ENDSUB_F_MAIN_0:
}
subcall TEXT.APPEND     // SSS
{
	IN_S a 252
	IN_S b 252
    OUT_S result 252
	
	DATA16 len0
	DATA16 len1
	DATA16 sum

	STRINGS GET_SIZE a len0
	STRINGS GET_SIZE b len1
	ADD16 len0,len1,sum
	JR_GT16 sum,251,stringsizeexceeded

	STRINGS ADD a b result
	RETURN
	
stringsizeexceeded:	
    STRINGS DUPLICATE a result
}
subcall EV3.BATTERYVOLTAGE  // F
{
	OUT_F voltage
	UI_READ GET_VBATT voltage
}
subcall LCD.CLEAR   // V
{
	UI_DRAW(TOPLINE,0)
	UI_DRAW(CLEAN)
	
	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall LCD.TEXT     // FFFFSV
{
	IN_F col
	IN_F x
	IN_F y
	IN_F font
	IN_S text 252
	
	DATA8 col_8
	DATA16 x_16
	DATA16 y_16
	DATA8 font_8	
	MOVEF_8 col col_8
	MOVEF_16 x x_16
	MOVEF_16 y y_16
	MOVEF_8 font font_8
	
	UI_DRAW SELECT_FONT font_8
	UI_DRAW TEXT col_8 x_16 y_16 text

	JR_NEQ32 0 STOPLCDUPDATE skipupdate
	UI_DRAW UPDATE
skipupdate:
}
subcall SENSOR.READPERCENT       // FF
{
	IN_F port
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 percentage

	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	INPUT_READ layer no 0 -1 percentage
	JR_LT8 percentage 0 novalue
	
	MOVE8_F percentage result
	RETURN
novalue:	
	MOVE8_F 0 result
}
subcall MOTOR.STARTPOWER      // SFV     MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F power

	DATA8 layer
	DATA8 nos	

	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport
	
	JR_GTEQF power -100.0 nottoosmall
	MOVEF_F -100.0 power
nottoosmall:
	JR_LTEQF power 100.0 nottoobig
	MOVEF_F 100.0 power
nottoobig:

	DATA8 pwr
	MOVEF_8 power pwr

    OUTPUT_TIME_POWER layer nos pwr 0 2147483647 0 0
noport:
}
subcall MOTORDECODEPORTSDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 nos

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 0 nos	
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	RL8  1 c c
	OR8  nos c nos
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	RL8  1 c c
	OR8  nos c nos	
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall SENSOR.READRAWVALUE            // FFF
{
	IN_F port
	IN_F index
	OUT_F result

	DATA8 layer
	DATA8 no
	DATA8 index8
		
	MOVEF_8 port no
	SUB8 no 1 no
	DIV8 no 4 layer
	MATH MOD8 no 4 no

	MOVEF_8 index index8
	JR_LT8 index8 0 outofbounds
	JR_GT8 index8 7 outofbounds

	DATA32 rawvalue0
	DATA32 rawvalue1
	DATA32 rawvalue2
	DATA32 rawvalue3
	DATA32 rawvalue4
	DATA32 rawvalue5
	DATA32 rawvalue6
	DATA32 rawvalue7
	INPUT_READEXT layer no 0 -1 18 8 rawvalue0 rawvalue1 rawvalue2 rawvalue3 rawvalue4 rawvalue5 rawvalue6 rawvalue7
	
	DATA32 rawtmp
	READ32 rawvalue0 index8 rawtmp

	JR_LT32 rawtmp -1000000000 nomoredata
	MOVE32_F rawtmp result
	RETURN

nomoredata:
outofbounds:
	MOVEF_F 0.0 result
}
subcall MOTOR.STOP       // SSV      MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_S brake 8

	DATA8 layer
	DATA8 nos	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	
	
	OUTPUT_STOP layer nos brk
noport:
}
subcall SPEAKER.TONE      // FFFV
{
	IN_F volume
	IN_F tone
	IN_F duration
	
	DATA8 vol
	DATA16 tne
	DATA16 dur
	MOVEF_8 volume vol
	MOVEF_16 tone tne
	MOVEF_16 duration dur
	
	SOUND TONE vol tne dur
}
subcall MOTOR.SCHEDULE   // SFFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F step1
	IN_F step2
	IN_F step3
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos
	DATA8 spd
	DATA32 stp1
	DATA32 stp2
	DATA32 stp3	
	DATA8 brk
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	MOVEF_8 speed spd
	MATH ABS step1 step1
	MOVEF_32 step1 stp1
	MATH ABS step2 step2
	MOVEF_32 step2 stp2
	MATH ABS step3 step3
	MOVEF_32 step3 stp3	
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	OUTPUT_STEP_SPEED layer nos spd stp1 stp2 stp3 brk
noport:
}
subcall MOTOR.GETCOUNT    // SF     MOTORDECODEPORTDESCRIPTOR
{
	IN_S port 8
	OUT_F result
	
	DATA8 layer
	DATA8 no
	DATA32 tacho
	
	CALL MOTORDECODEPORTDESCRIPTOR port layer no
	JR_LT8 no 0 noport
	
	OUTPUT_GET_COUNT layer no tacho
	MOVE32_F tacho result

	DATA8 nos
	RL8 1 no nos
	DATA8 inv
	READ8 MOTORISINVERTED layer inv 
	AND8 inv nos inv
	JR_EQ8 inv 0 noinvert
	SUBF 0.0 result result
noinvert:
	RETURN

noport:	
	MOVE8_F 0 result	
}
subcall MOTORDECODEPORTDESCRIPTOR  //  V
{
	IN_S descriptor 8
	OUT_8 layer
	OUT_8 no

	DATA8 i 
	DATA8 c

	MOVE8_8 0 layer
	MOVE8_8 -1 no
	MOVE8_8 0 i
loop:
	READ8 descriptor i c
	JR_EQ8 c 0 decoding_end
	
	JR_LT8 c 65 no_uppercase_port
	JR_GT8 c 68 no_uppercase_port
	SUB8 c 65 c
	MOVE8_8 c no
	JR loop_end
no_uppercase_port:
	JR_LT8 c 97 no_lowercase_port
	JR_GT8 c 100 no_lowercase_port
	SUB8 c 97 c
	MOVE8_8 c no
	JR loop_end
no_lowercase_port:
	JR_LT8 c 49 loop_end
	JR_GT8 c 52 loop_end
	SUB8 c 49 layer
loop_end:
	ADD8 1 i i
	JR loop	
	
decoding_end:
	RETURN
}
subcall MOTOR.RESETCOUNT    // SV        MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	
	DATA8 layer
	DATA8 nos
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	JR_EQ8 nos 0 noport

	OUTPUT_CLR_COUNT layer nos
noport:
}
subcall MOTOR.SCHEDULESYNC   // SFFFSV    MOTORSCHEDULESTEERIMPL
{
	IN_S ports 8
	IN_F speed1
	IN_F speed2
	IN_F count
	IN_S brake 8
	
	JR_GTEQF speed1 -100.0 nottoosmall1
	MOVEF_F -100.0 speed1
nottoosmall1:
	JR_LTEQF speed1 100.0 nottoobig1
	MOVEF_F 100.0 speed1
nottoobig1:
	JR_GTEQF speed2 -100.0 nottoosmall2
	MOVEF_F -100.0 speed2
nottoosmall2:
	JR_LTEQF speed2 100.0 nottoobig2
	MOVEF_F 100.0 speed2
nottoobig2:

	DATAF speed  
	DATAF turn
	MOVE8_F 0 speed
	MOVE8_F 0 turn

	DATAF speed1abs
	DATAF speed2abs
	MATH ABS speed1 speed1abs
	MATH ABS speed2 speed2abs
	JR_LTF speed1abs speed2abs secondisfaster
	JR_EQF speed1abs 0.0 donecomputation
	 MOVEF_F speed1 speed
	 MULF 100.0 speed2 turn
	 DIVF turn speed1 turn
	 SUBF 100.0 turn turn
	JR donecomputation
secondisfaster:
	 MOVEF_F speed2 speed
	 MULF 100.0 speed1 turn
	 DIVF turn speed2 turn
	 SUBF turn 100.0 turn
donecomputation:
	
	CALL MOTORSCHEDULESTEERIMPL ports speed turn count brake
}
subcall MOTORSCHEDULESTEERIMPL   // SFFFSV    MOTORDECODEPORTSDESCRIPTOR
{
	IN_S ports 8
	IN_F speed
	IN_F turn
	IN_F count
	IN_S brake 8
	
	DATA8 layer
	DATA8 nos	
	DATA8 first
	DATA8 second
	DATA8 invfirst
	DATA8 invsecond
	
	CALL MOTORDECODEPORTSDESCRIPTOR ports layer nos
	READ8 FIRSTOF2 nos first
	JR_EQ8 0 first not_two_ports
	XOR8 first nos second
	READ8 MOTORISINVERTED layer invfirst
	AND8 first invfirst invfirst
	READ8 MOTORISINVERTED layer invsecond
	AND8 second invsecond invsecond

	JR_LTF turn 0.0 second_is_master
first_is_master:
	JR_EQ8 invfirst 0 non_invert_first
	SUBF 0.0 speed speed
	JR_NEQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion
non_invert_first:
	JR_EQ8 invsecond 0 done_inversion
	SUBF 200.0 turn turn
	JR done_inversion

second_is_master:
	JR_EQ8 invsecond 0 non_invert_second
	SUBF 0.0 speed speed
	JR_NEQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion
non_invert_second:
	JR_EQ8 invfirst 0 done_inversion
	SUBF -200.0 turn turn
	JR done_inversion

done_inversion:
	DATA32 cnt
	DATA8 brk
	MATH ABS count count
	MOVEF_32 count cnt
	AND8888_32 brake -538976289 brake        // AND 0xdfdfdfdf performs an upcase for 4 letters
    STRINGS COMPARE brake 'TRUE' brk	

	JR_LTEQ32 cnt 0 dontmove	

	DATA8 spd  
	DATA16 trn
	MOVEF_16 turn trn
	MOVEF_8 speed spd
	OUTPUT_STEP_SYNC layer nos spd trn cnt brk	
dontmove:	
not_two_ports:
}
